#![doc = " fiat-crypto output postprocessed by fiat-constify: <https://github.com/rustcrypto/utils>"]
#![doc = " Autogenerated: './word_by_word_montgomery' --lang Rust --inline p192 32 '2^192 - 2^64 - 1' mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat divstep divstep_precomp"]
#![doc = " curve description: p192"]
#![doc = " machine_wordsize = 32 (from \"32\")"]
#![doc = " requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat, divstep, divstep_precomp"]
#![doc = " m = 0xfffffffffffffffffffffffffffffffeffffffffffffffff (from \"2^192 - 2^64 - 1\")"]
#![doc = ""]
#![doc = " NOTE: In addition to the bounds specified above each function, all"]
#![doc = "   functions synthesized for this Montgomery arithmetic require the"]
#![doc = "   input to be strictly less than the prime modulus (m), and also"]
#![doc = "   require the input to be in the unique saturated representation."]
#![doc = "   All functions also ensure that these two properties are true of"]
#![doc = "   return values."]
#![doc = ""]
#![doc = " Computed values:"]
#![doc = "   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160)"]
#![doc = "   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184)"]
#![doc = "   twos_complement_eval z = let x1 := z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) in"]
#![doc = "                            if x1 & (2^192-1) < 2^191 then x1 & (2^192-1) else (x1 & (2^192-1)) - 2^192"]
#![allow(unused_parens)]
#![allow(non_camel_case_types)]
#![allow(
    clippy::identity_op,
    clippy::unnecessary_cast,
    dead_code,
    rustdoc::broken_intra_doc_links,
    unused_assignments,
    unused_mut,
    unused_variables
)]
pub type fiat_p192_u1 = u8;
pub type fiat_p192_i1 = i8;
pub type fiat_p192_u2 = u8;
pub type fiat_p192_i2 = i8;
pub type fiat_p192_montgomery_domain_field_element = [u32; 6];
pub type fiat_p192_non_montgomery_domain_field_element = [u32; 6];
#[doc = " The function fiat_p192_addcarryx_u32 is an addition with carry."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (arg1 + arg2 + arg3) mod 2^32"]
#[doc = "   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [0x0 ~> 0xffffffff]"]
#[doc = "   arg3: [0x0 ~> 0xffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[doc = "   out2: [0x0 ~> 0x1]"]
#[inline]
pub const fn fiat_p192_addcarryx_u32(
    arg1: fiat_p192_u1,
    arg2: u32,
    arg3: u32,
) -> (u32, fiat_p192_u1) {
    let mut out1: u32 = 0;
    let mut out2: fiat_p192_u1 = 0;
    let x1: u64 = (((arg1 as u64) + (arg2 as u64)) + (arg3 as u64));
    let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
    let x3: fiat_p192_u1 = ((x1 >> 32) as fiat_p192_u1);
    out1 = x2;
    out2 = x3;
    (out1, out2)
}
#[doc = " The function fiat_p192_subborrowx_u32 is a subtraction with borrow."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (-arg1 + arg2 + -arg3) mod 2^32"]
#[doc = "   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [0x0 ~> 0xffffffff]"]
#[doc = "   arg3: [0x0 ~> 0xffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[doc = "   out2: [0x0 ~> 0x1]"]
#[inline]
pub const fn fiat_p192_subborrowx_u32(
    arg1: fiat_p192_u1,
    arg2: u32,
    arg3: u32,
) -> (u32, fiat_p192_u1) {
    let mut out1: u32 = 0;
    let mut out2: fiat_p192_u1 = 0;
    let x1: i64 = (((arg2 as i64) - (arg1 as i64)) - (arg3 as i64));
    let x2: fiat_p192_i1 = ((x1 >> 32) as fiat_p192_i1);
    let x3: u32 = ((x1 & (0xffffffff as i64)) as u32);
    out1 = x3;
    out2 = (((0x0 as fiat_p192_i2) - (x2 as fiat_p192_i2)) as fiat_p192_u1);
    (out1, out2)
}
#[doc = " The function fiat_p192_mulx_u32 is a multiplication, returning the full double-width result."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (arg1 * arg2) mod 2^32"]
#[doc = "   out2 = ⌊arg1 * arg2 / 2^32⌋"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0xffffffff]"]
#[doc = "   arg2: [0x0 ~> 0xffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[doc = "   out2: [0x0 ~> 0xffffffff]"]
#[inline]
pub const fn fiat_p192_mulx_u32(arg1: u32, arg2: u32) -> (u32, u32) {
    let mut out1: u32 = 0;
    let mut out2: u32 = 0;
    let x1: u64 = ((arg1 as u64) * (arg2 as u64));
    let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
    let x3: u32 = ((x1 >> 32) as u32);
    out1 = x2;
    out2 = x3;
    (out1, out2)
}
#[doc = " The function fiat_p192_cmovznz_u32 is a single-word conditional move."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (if arg1 = 0 then arg2 else arg3)"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [0x0 ~> 0xffffffff]"]
#[doc = "   arg3: [0x0 ~> 0xffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[inline]
pub const fn fiat_p192_cmovznz_u32(arg1: fiat_p192_u1, arg2: u32, arg3: u32) -> u32 {
    let mut out1: u32 = 0;
    let x1: fiat_p192_u1 = (!(!arg1));
    let x2: u32 = ((((((0x0 as fiat_p192_i2) - (x1 as fiat_p192_i2)) as fiat_p192_i1) as i64)
        & (0xffffffff as i64)) as u32);
    let x3: u32 = ((x2 & arg3) | ((!x2) & arg2));
    out1 = x3;
    out1
}
#[doc = " The function fiat_p192_mul multiplies two field elements in the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = "   0 ≤ eval arg2 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_p192_mul(
    arg1: &fiat_p192_montgomery_domain_field_element,
    arg2: &fiat_p192_montgomery_domain_field_element,
) -> fiat_p192_montgomery_domain_field_element {
    let mut out1: fiat_p192_montgomery_domain_field_element = [0; 6];
    let x1: u32 = (arg1[1]);
    let x2: u32 = (arg1[2]);
    let x3: u32 = (arg1[3]);
    let x4: u32 = (arg1[4]);
    let x5: u32 = (arg1[5]);
    let x6: u32 = (arg1[0]);
    let mut x7: u32 = 0;
    let mut x8: u32 = 0;
    let (x7, x8) = fiat_p192_mulx_u32(x6, (arg2[5]));
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    let (x9, x10) = fiat_p192_mulx_u32(x6, (arg2[4]));
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    let (x11, x12) = fiat_p192_mulx_u32(x6, (arg2[3]));
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    let (x13, x14) = fiat_p192_mulx_u32(x6, (arg2[2]));
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    let (x15, x16) = fiat_p192_mulx_u32(x6, (arg2[1]));
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    let (x17, x18) = fiat_p192_mulx_u32(x6, (arg2[0]));
    let mut x19: u32 = 0;
    let mut x20: fiat_p192_u1 = 0;
    let (x19, x20) = fiat_p192_addcarryx_u32(0x0, x18, x15);
    let mut x21: u32 = 0;
    let mut x22: fiat_p192_u1 = 0;
    let (x21, x22) = fiat_p192_addcarryx_u32(x20, x16, x13);
    let mut x23: u32 = 0;
    let mut x24: fiat_p192_u1 = 0;
    let (x23, x24) = fiat_p192_addcarryx_u32(x22, x14, x11);
    let mut x25: u32 = 0;
    let mut x26: fiat_p192_u1 = 0;
    let (x25, x26) = fiat_p192_addcarryx_u32(x24, x12, x9);
    let mut x27: u32 = 0;
    let mut x28: fiat_p192_u1 = 0;
    let (x27, x28) = fiat_p192_addcarryx_u32(x26, x10, x7);
    let x29: u32 = ((x28 as u32) + x8);
    let mut x30: u32 = 0;
    let mut x31: u32 = 0;
    let (x30, x31) = fiat_p192_mulx_u32(x17, 0xffffffff);
    let mut x32: u32 = 0;
    let mut x33: u32 = 0;
    let (x32, x33) = fiat_p192_mulx_u32(x17, 0xffffffff);
    let mut x34: u32 = 0;
    let mut x35: u32 = 0;
    let (x34, x35) = fiat_p192_mulx_u32(x17, 0xffffffff);
    let mut x36: u32 = 0;
    let mut x37: u32 = 0;
    let (x36, x37) = fiat_p192_mulx_u32(x17, 0xfffffffe);
    let mut x38: u32 = 0;
    let mut x39: u32 = 0;
    let (x38, x39) = fiat_p192_mulx_u32(x17, 0xffffffff);
    let mut x40: u32 = 0;
    let mut x41: u32 = 0;
    let (x40, x41) = fiat_p192_mulx_u32(x17, 0xffffffff);
    let mut x42: u32 = 0;
    let mut x43: fiat_p192_u1 = 0;
    let (x42, x43) = fiat_p192_addcarryx_u32(0x0, x41, x38);
    let mut x44: u32 = 0;
    let mut x45: fiat_p192_u1 = 0;
    let (x44, x45) = fiat_p192_addcarryx_u32(x43, x39, x36);
    let mut x46: u32 = 0;
    let mut x47: fiat_p192_u1 = 0;
    let (x46, x47) = fiat_p192_addcarryx_u32(x45, x37, x34);
    let mut x48: u32 = 0;
    let mut x49: fiat_p192_u1 = 0;
    let (x48, x49) = fiat_p192_addcarryx_u32(x47, x35, x32);
    let mut x50: u32 = 0;
    let mut x51: fiat_p192_u1 = 0;
    let (x50, x51) = fiat_p192_addcarryx_u32(x49, x33, x30);
    let x52: u32 = ((x51 as u32) + x31);
    let mut x53: u32 = 0;
    let mut x54: fiat_p192_u1 = 0;
    let (x53, x54) = fiat_p192_addcarryx_u32(0x0, x17, x40);
    let mut x55: u32 = 0;
    let mut x56: fiat_p192_u1 = 0;
    let (x55, x56) = fiat_p192_addcarryx_u32(x54, x19, x42);
    let mut x57: u32 = 0;
    let mut x58: fiat_p192_u1 = 0;
    let (x57, x58) = fiat_p192_addcarryx_u32(x56, x21, x44);
    let mut x59: u32 = 0;
    let mut x60: fiat_p192_u1 = 0;
    let (x59, x60) = fiat_p192_addcarryx_u32(x58, x23, x46);
    let mut x61: u32 = 0;
    let mut x62: fiat_p192_u1 = 0;
    let (x61, x62) = fiat_p192_addcarryx_u32(x60, x25, x48);
    let mut x63: u32 = 0;
    let mut x64: fiat_p192_u1 = 0;
    let (x63, x64) = fiat_p192_addcarryx_u32(x62, x27, x50);
    let mut x65: u32 = 0;
    let mut x66: fiat_p192_u1 = 0;
    let (x65, x66) = fiat_p192_addcarryx_u32(x64, x29, x52);
    let mut x67: u32 = 0;
    let mut x68: u32 = 0;
    let (x67, x68) = fiat_p192_mulx_u32(x1, (arg2[5]));
    let mut x69: u32 = 0;
    let mut x70: u32 = 0;
    let (x69, x70) = fiat_p192_mulx_u32(x1, (arg2[4]));
    let mut x71: u32 = 0;
    let mut x72: u32 = 0;
    let (x71, x72) = fiat_p192_mulx_u32(x1, (arg2[3]));
    let mut x73: u32 = 0;
    let mut x74: u32 = 0;
    let (x73, x74) = fiat_p192_mulx_u32(x1, (arg2[2]));
    let mut x75: u32 = 0;
    let mut x76: u32 = 0;
    let (x75, x76) = fiat_p192_mulx_u32(x1, (arg2[1]));
    let mut x77: u32 = 0;
    let mut x78: u32 = 0;
    let (x77, x78) = fiat_p192_mulx_u32(x1, (arg2[0]));
    let mut x79: u32 = 0;
    let mut x80: fiat_p192_u1 = 0;
    let (x79, x80) = fiat_p192_addcarryx_u32(0x0, x78, x75);
    let mut x81: u32 = 0;
    let mut x82: fiat_p192_u1 = 0;
    let (x81, x82) = fiat_p192_addcarryx_u32(x80, x76, x73);
    let mut x83: u32 = 0;
    let mut x84: fiat_p192_u1 = 0;
    let (x83, x84) = fiat_p192_addcarryx_u32(x82, x74, x71);
    let mut x85: u32 = 0;
    let mut x86: fiat_p192_u1 = 0;
    let (x85, x86) = fiat_p192_addcarryx_u32(x84, x72, x69);
    let mut x87: u32 = 0;
    let mut x88: fiat_p192_u1 = 0;
    let (x87, x88) = fiat_p192_addcarryx_u32(x86, x70, x67);
    let x89: u32 = ((x88 as u32) + x68);
    let mut x90: u32 = 0;
    let mut x91: fiat_p192_u1 = 0;
    let (x90, x91) = fiat_p192_addcarryx_u32(0x0, x55, x77);
    let mut x92: u32 = 0;
    let mut x93: fiat_p192_u1 = 0;
    let (x92, x93) = fiat_p192_addcarryx_u32(x91, x57, x79);
    let mut x94: u32 = 0;
    let mut x95: fiat_p192_u1 = 0;
    let (x94, x95) = fiat_p192_addcarryx_u32(x93, x59, x81);
    let mut x96: u32 = 0;
    let mut x97: fiat_p192_u1 = 0;
    let (x96, x97) = fiat_p192_addcarryx_u32(x95, x61, x83);
    let mut x98: u32 = 0;
    let mut x99: fiat_p192_u1 = 0;
    let (x98, x99) = fiat_p192_addcarryx_u32(x97, x63, x85);
    let mut x100: u32 = 0;
    let mut x101: fiat_p192_u1 = 0;
    let (x100, x101) = fiat_p192_addcarryx_u32(x99, x65, x87);
    let mut x102: u32 = 0;
    let mut x103: fiat_p192_u1 = 0;
    let (x102, x103) = fiat_p192_addcarryx_u32(x101, (x66 as u32), x89);
    let mut x104: u32 = 0;
    let mut x105: u32 = 0;
    let (x104, x105) = fiat_p192_mulx_u32(x90, 0xffffffff);
    let mut x106: u32 = 0;
    let mut x107: u32 = 0;
    let (x106, x107) = fiat_p192_mulx_u32(x90, 0xffffffff);
    let mut x108: u32 = 0;
    let mut x109: u32 = 0;
    let (x108, x109) = fiat_p192_mulx_u32(x90, 0xffffffff);
    let mut x110: u32 = 0;
    let mut x111: u32 = 0;
    let (x110, x111) = fiat_p192_mulx_u32(x90, 0xfffffffe);
    let mut x112: u32 = 0;
    let mut x113: u32 = 0;
    let (x112, x113) = fiat_p192_mulx_u32(x90, 0xffffffff);
    let mut x114: u32 = 0;
    let mut x115: u32 = 0;
    let (x114, x115) = fiat_p192_mulx_u32(x90, 0xffffffff);
    let mut x116: u32 = 0;
    let mut x117: fiat_p192_u1 = 0;
    let (x116, x117) = fiat_p192_addcarryx_u32(0x0, x115, x112);
    let mut x118: u32 = 0;
    let mut x119: fiat_p192_u1 = 0;
    let (x118, x119) = fiat_p192_addcarryx_u32(x117, x113, x110);
    let mut x120: u32 = 0;
    let mut x121: fiat_p192_u1 = 0;
    let (x120, x121) = fiat_p192_addcarryx_u32(x119, x111, x108);
    let mut x122: u32 = 0;
    let mut x123: fiat_p192_u1 = 0;
    let (x122, x123) = fiat_p192_addcarryx_u32(x121, x109, x106);
    let mut x124: u32 = 0;
    let mut x125: fiat_p192_u1 = 0;
    let (x124, x125) = fiat_p192_addcarryx_u32(x123, x107, x104);
    let x126: u32 = ((x125 as u32) + x105);
    let mut x127: u32 = 0;
    let mut x128: fiat_p192_u1 = 0;
    let (x127, x128) = fiat_p192_addcarryx_u32(0x0, x90, x114);
    let mut x129: u32 = 0;
    let mut x130: fiat_p192_u1 = 0;
    let (x129, x130) = fiat_p192_addcarryx_u32(x128, x92, x116);
    let mut x131: u32 = 0;
    let mut x132: fiat_p192_u1 = 0;
    let (x131, x132) = fiat_p192_addcarryx_u32(x130, x94, x118);
    let mut x133: u32 = 0;
    let mut x134: fiat_p192_u1 = 0;
    let (x133, x134) = fiat_p192_addcarryx_u32(x132, x96, x120);
    let mut x135: u32 = 0;
    let mut x136: fiat_p192_u1 = 0;
    let (x135, x136) = fiat_p192_addcarryx_u32(x134, x98, x122);
    let mut x137: u32 = 0;
    let mut x138: fiat_p192_u1 = 0;
    let (x137, x138) = fiat_p192_addcarryx_u32(x136, x100, x124);
    let mut x139: u32 = 0;
    let mut x140: fiat_p192_u1 = 0;
    let (x139, x140) = fiat_p192_addcarryx_u32(x138, x102, x126);
    let x141: u32 = ((x140 as u32) + (x103 as u32));
    let mut x142: u32 = 0;
    let mut x143: u32 = 0;
    let (x142, x143) = fiat_p192_mulx_u32(x2, (arg2[5]));
    let mut x144: u32 = 0;
    let mut x145: u32 = 0;
    let (x144, x145) = fiat_p192_mulx_u32(x2, (arg2[4]));
    let mut x146: u32 = 0;
    let mut x147: u32 = 0;
    let (x146, x147) = fiat_p192_mulx_u32(x2, (arg2[3]));
    let mut x148: u32 = 0;
    let mut x149: u32 = 0;
    let (x148, x149) = fiat_p192_mulx_u32(x2, (arg2[2]));
    let mut x150: u32 = 0;
    let mut x151: u32 = 0;
    let (x150, x151) = fiat_p192_mulx_u32(x2, (arg2[1]));
    let mut x152: u32 = 0;
    let mut x153: u32 = 0;
    let (x152, x153) = fiat_p192_mulx_u32(x2, (arg2[0]));
    let mut x154: u32 = 0;
    let mut x155: fiat_p192_u1 = 0;
    let (x154, x155) = fiat_p192_addcarryx_u32(0x0, x153, x150);
    let mut x156: u32 = 0;
    let mut x157: fiat_p192_u1 = 0;
    let (x156, x157) = fiat_p192_addcarryx_u32(x155, x151, x148);
    let mut x158: u32 = 0;
    let mut x159: fiat_p192_u1 = 0;
    let (x158, x159) = fiat_p192_addcarryx_u32(x157, x149, x146);
    let mut x160: u32 = 0;
    let mut x161: fiat_p192_u1 = 0;
    let (x160, x161) = fiat_p192_addcarryx_u32(x159, x147, x144);
    let mut x162: u32 = 0;
    let mut x163: fiat_p192_u1 = 0;
    let (x162, x163) = fiat_p192_addcarryx_u32(x161, x145, x142);
    let x164: u32 = ((x163 as u32) + x143);
    let mut x165: u32 = 0;
    let mut x166: fiat_p192_u1 = 0;
    let (x165, x166) = fiat_p192_addcarryx_u32(0x0, x129, x152);
    let mut x167: u32 = 0;
    let mut x168: fiat_p192_u1 = 0;
    let (x167, x168) = fiat_p192_addcarryx_u32(x166, x131, x154);
    let mut x169: u32 = 0;
    let mut x170: fiat_p192_u1 = 0;
    let (x169, x170) = fiat_p192_addcarryx_u32(x168, x133, x156);
    let mut x171: u32 = 0;
    let mut x172: fiat_p192_u1 = 0;
    let (x171, x172) = fiat_p192_addcarryx_u32(x170, x135, x158);
    let mut x173: u32 = 0;
    let mut x174: fiat_p192_u1 = 0;
    let (x173, x174) = fiat_p192_addcarryx_u32(x172, x137, x160);
    let mut x175: u32 = 0;
    let mut x176: fiat_p192_u1 = 0;
    let (x175, x176) = fiat_p192_addcarryx_u32(x174, x139, x162);
    let mut x177: u32 = 0;
    let mut x178: fiat_p192_u1 = 0;
    let (x177, x178) = fiat_p192_addcarryx_u32(x176, x141, x164);
    let mut x179: u32 = 0;
    let mut x180: u32 = 0;
    let (x179, x180) = fiat_p192_mulx_u32(x165, 0xffffffff);
    let mut x181: u32 = 0;
    let mut x182: u32 = 0;
    let (x181, x182) = fiat_p192_mulx_u32(x165, 0xffffffff);
    let mut x183: u32 = 0;
    let mut x184: u32 = 0;
    let (x183, x184) = fiat_p192_mulx_u32(x165, 0xffffffff);
    let mut x185: u32 = 0;
    let mut x186: u32 = 0;
    let (x185, x186) = fiat_p192_mulx_u32(x165, 0xfffffffe);
    let mut x187: u32 = 0;
    let mut x188: u32 = 0;
    let (x187, x188) = fiat_p192_mulx_u32(x165, 0xffffffff);
    let mut x189: u32 = 0;
    let mut x190: u32 = 0;
    let (x189, x190) = fiat_p192_mulx_u32(x165, 0xffffffff);
    let mut x191: u32 = 0;
    let mut x192: fiat_p192_u1 = 0;
    let (x191, x192) = fiat_p192_addcarryx_u32(0x0, x190, x187);
    let mut x193: u32 = 0;
    let mut x194: fiat_p192_u1 = 0;
    let (x193, x194) = fiat_p192_addcarryx_u32(x192, x188, x185);
    let mut x195: u32 = 0;
    let mut x196: fiat_p192_u1 = 0;
    let (x195, x196) = fiat_p192_addcarryx_u32(x194, x186, x183);
    let mut x197: u32 = 0;
    let mut x198: fiat_p192_u1 = 0;
    let (x197, x198) = fiat_p192_addcarryx_u32(x196, x184, x181);
    let mut x199: u32 = 0;
    let mut x200: fiat_p192_u1 = 0;
    let (x199, x200) = fiat_p192_addcarryx_u32(x198, x182, x179);
    let x201: u32 = ((x200 as u32) + x180);
    let mut x202: u32 = 0;
    let mut x203: fiat_p192_u1 = 0;
    let (x202, x203) = fiat_p192_addcarryx_u32(0x0, x165, x189);
    let mut x204: u32 = 0;
    let mut x205: fiat_p192_u1 = 0;
    let (x204, x205) = fiat_p192_addcarryx_u32(x203, x167, x191);
    let mut x206: u32 = 0;
    let mut x207: fiat_p192_u1 = 0;
    let (x206, x207) = fiat_p192_addcarryx_u32(x205, x169, x193);
    let mut x208: u32 = 0;
    let mut x209: fiat_p192_u1 = 0;
    let (x208, x209) = fiat_p192_addcarryx_u32(x207, x171, x195);
    let mut x210: u32 = 0;
    let mut x211: fiat_p192_u1 = 0;
    let (x210, x211) = fiat_p192_addcarryx_u32(x209, x173, x197);
    let mut x212: u32 = 0;
    let mut x213: fiat_p192_u1 = 0;
    let (x212, x213) = fiat_p192_addcarryx_u32(x211, x175, x199);
    let mut x214: u32 = 0;
    let mut x215: fiat_p192_u1 = 0;
    let (x214, x215) = fiat_p192_addcarryx_u32(x213, x177, x201);
    let x216: u32 = ((x215 as u32) + (x178 as u32));
    let mut x217: u32 = 0;
    let mut x218: u32 = 0;
    let (x217, x218) = fiat_p192_mulx_u32(x3, (arg2[5]));
    let mut x219: u32 = 0;
    let mut x220: u32 = 0;
    let (x219, x220) = fiat_p192_mulx_u32(x3, (arg2[4]));
    let mut x221: u32 = 0;
    let mut x222: u32 = 0;
    let (x221, x222) = fiat_p192_mulx_u32(x3, (arg2[3]));
    let mut x223: u32 = 0;
    let mut x224: u32 = 0;
    let (x223, x224) = fiat_p192_mulx_u32(x3, (arg2[2]));
    let mut x225: u32 = 0;
    let mut x226: u32 = 0;
    let (x225, x226) = fiat_p192_mulx_u32(x3, (arg2[1]));
    let mut x227: u32 = 0;
    let mut x228: u32 = 0;
    let (x227, x228) = fiat_p192_mulx_u32(x3, (arg2[0]));
    let mut x229: u32 = 0;
    let mut x230: fiat_p192_u1 = 0;
    let (x229, x230) = fiat_p192_addcarryx_u32(0x0, x228, x225);
    let mut x231: u32 = 0;
    let mut x232: fiat_p192_u1 = 0;
    let (x231, x232) = fiat_p192_addcarryx_u32(x230, x226, x223);
    let mut x233: u32 = 0;
    let mut x234: fiat_p192_u1 = 0;
    let (x233, x234) = fiat_p192_addcarryx_u32(x232, x224, x221);
    let mut x235: u32 = 0;
    let mut x236: fiat_p192_u1 = 0;
    let (x235, x236) = fiat_p192_addcarryx_u32(x234, x222, x219);
    let mut x237: u32 = 0;
    let mut x238: fiat_p192_u1 = 0;
    let (x237, x238) = fiat_p192_addcarryx_u32(x236, x220, x217);
    let x239: u32 = ((x238 as u32) + x218);
    let mut x240: u32 = 0;
    let mut x241: fiat_p192_u1 = 0;
    let (x240, x241) = fiat_p192_addcarryx_u32(0x0, x204, x227);
    let mut x242: u32 = 0;
    let mut x243: fiat_p192_u1 = 0;
    let (x242, x243) = fiat_p192_addcarryx_u32(x241, x206, x229);
    let mut x244: u32 = 0;
    let mut x245: fiat_p192_u1 = 0;
    let (x244, x245) = fiat_p192_addcarryx_u32(x243, x208, x231);
    let mut x246: u32 = 0;
    let mut x247: fiat_p192_u1 = 0;
    let (x246, x247) = fiat_p192_addcarryx_u32(x245, x210, x233);
    let mut x248: u32 = 0;
    let mut x249: fiat_p192_u1 = 0;
    let (x248, x249) = fiat_p192_addcarryx_u32(x247, x212, x235);
    let mut x250: u32 = 0;
    let mut x251: fiat_p192_u1 = 0;
    let (x250, x251) = fiat_p192_addcarryx_u32(x249, x214, x237);
    let mut x252: u32 = 0;
    let mut x253: fiat_p192_u1 = 0;
    let (x252, x253) = fiat_p192_addcarryx_u32(x251, x216, x239);
    let mut x254: u32 = 0;
    let mut x255: u32 = 0;
    let (x254, x255) = fiat_p192_mulx_u32(x240, 0xffffffff);
    let mut x256: u32 = 0;
    let mut x257: u32 = 0;
    let (x256, x257) = fiat_p192_mulx_u32(x240, 0xffffffff);
    let mut x258: u32 = 0;
    let mut x259: u32 = 0;
    let (x258, x259) = fiat_p192_mulx_u32(x240, 0xffffffff);
    let mut x260: u32 = 0;
    let mut x261: u32 = 0;
    let (x260, x261) = fiat_p192_mulx_u32(x240, 0xfffffffe);
    let mut x262: u32 = 0;
    let mut x263: u32 = 0;
    let (x262, x263) = fiat_p192_mulx_u32(x240, 0xffffffff);
    let mut x264: u32 = 0;
    let mut x265: u32 = 0;
    let (x264, x265) = fiat_p192_mulx_u32(x240, 0xffffffff);
    let mut x266: u32 = 0;
    let mut x267: fiat_p192_u1 = 0;
    let (x266, x267) = fiat_p192_addcarryx_u32(0x0, x265, x262);
    let mut x268: u32 = 0;
    let mut x269: fiat_p192_u1 = 0;
    let (x268, x269) = fiat_p192_addcarryx_u32(x267, x263, x260);
    let mut x270: u32 = 0;
    let mut x271: fiat_p192_u1 = 0;
    let (x270, x271) = fiat_p192_addcarryx_u32(x269, x261, x258);
    let mut x272: u32 = 0;
    let mut x273: fiat_p192_u1 = 0;
    let (x272, x273) = fiat_p192_addcarryx_u32(x271, x259, x256);
    let mut x274: u32 = 0;
    let mut x275: fiat_p192_u1 = 0;
    let (x274, x275) = fiat_p192_addcarryx_u32(x273, x257, x254);
    let x276: u32 = ((x275 as u32) + x255);
    let mut x277: u32 = 0;
    let mut x278: fiat_p192_u1 = 0;
    let (x277, x278) = fiat_p192_addcarryx_u32(0x0, x240, x264);
    let mut x279: u32 = 0;
    let mut x280: fiat_p192_u1 = 0;
    let (x279, x280) = fiat_p192_addcarryx_u32(x278, x242, x266);
    let mut x281: u32 = 0;
    let mut x282: fiat_p192_u1 = 0;
    let (x281, x282) = fiat_p192_addcarryx_u32(x280, x244, x268);
    let mut x283: u32 = 0;
    let mut x284: fiat_p192_u1 = 0;
    let (x283, x284) = fiat_p192_addcarryx_u32(x282, x246, x270);
    let mut x285: u32 = 0;
    let mut x286: fiat_p192_u1 = 0;
    let (x285, x286) = fiat_p192_addcarryx_u32(x284, x248, x272);
    let mut x287: u32 = 0;
    let mut x288: fiat_p192_u1 = 0;
    let (x287, x288) = fiat_p192_addcarryx_u32(x286, x250, x274);
    let mut x289: u32 = 0;
    let mut x290: fiat_p192_u1 = 0;
    let (x289, x290) = fiat_p192_addcarryx_u32(x288, x252, x276);
    let x291: u32 = ((x290 as u32) + (x253 as u32));
    let mut x292: u32 = 0;
    let mut x293: u32 = 0;
    let (x292, x293) = fiat_p192_mulx_u32(x4, (arg2[5]));
    let mut x294: u32 = 0;
    let mut x295: u32 = 0;
    let (x294, x295) = fiat_p192_mulx_u32(x4, (arg2[4]));
    let mut x296: u32 = 0;
    let mut x297: u32 = 0;
    let (x296, x297) = fiat_p192_mulx_u32(x4, (arg2[3]));
    let mut x298: u32 = 0;
    let mut x299: u32 = 0;
    let (x298, x299) = fiat_p192_mulx_u32(x4, (arg2[2]));
    let mut x300: u32 = 0;
    let mut x301: u32 = 0;
    let (x300, x301) = fiat_p192_mulx_u32(x4, (arg2[1]));
    let mut x302: u32 = 0;
    let mut x303: u32 = 0;
    let (x302, x303) = fiat_p192_mulx_u32(x4, (arg2[0]));
    let mut x304: u32 = 0;
    let mut x305: fiat_p192_u1 = 0;
    let (x304, x305) = fiat_p192_addcarryx_u32(0x0, x303, x300);
    let mut x306: u32 = 0;
    let mut x307: fiat_p192_u1 = 0;
    let (x306, x307) = fiat_p192_addcarryx_u32(x305, x301, x298);
    let mut x308: u32 = 0;
    let mut x309: fiat_p192_u1 = 0;
    let (x308, x309) = fiat_p192_addcarryx_u32(x307, x299, x296);
    let mut x310: u32 = 0;
    let mut x311: fiat_p192_u1 = 0;
    let (x310, x311) = fiat_p192_addcarryx_u32(x309, x297, x294);
    let mut x312: u32 = 0;
    let mut x313: fiat_p192_u1 = 0;
    let (x312, x313) = fiat_p192_addcarryx_u32(x311, x295, x292);
    let x314: u32 = ((x313 as u32) + x293);
    let mut x315: u32 = 0;
    let mut x316: fiat_p192_u1 = 0;
    let (x315, x316) = fiat_p192_addcarryx_u32(0x0, x279, x302);
    let mut x317: u32 = 0;
    let mut x318: fiat_p192_u1 = 0;
    let (x317, x318) = fiat_p192_addcarryx_u32(x316, x281, x304);
    let mut x319: u32 = 0;
    let mut x320: fiat_p192_u1 = 0;
    let (x319, x320) = fiat_p192_addcarryx_u32(x318, x283, x306);
    let mut x321: u32 = 0;
    let mut x322: fiat_p192_u1 = 0;
    let (x321, x322) = fiat_p192_addcarryx_u32(x320, x285, x308);
    let mut x323: u32 = 0;
    let mut x324: fiat_p192_u1 = 0;
    let (x323, x324) = fiat_p192_addcarryx_u32(x322, x287, x310);
    let mut x325: u32 = 0;
    let mut x326: fiat_p192_u1 = 0;
    let (x325, x326) = fiat_p192_addcarryx_u32(x324, x289, x312);
    let mut x327: u32 = 0;
    let mut x328: fiat_p192_u1 = 0;
    let (x327, x328) = fiat_p192_addcarryx_u32(x326, x291, x314);
    let mut x329: u32 = 0;
    let mut x330: u32 = 0;
    let (x329, x330) = fiat_p192_mulx_u32(x315, 0xffffffff);
    let mut x331: u32 = 0;
    let mut x332: u32 = 0;
    let (x331, x332) = fiat_p192_mulx_u32(x315, 0xffffffff);
    let mut x333: u32 = 0;
    let mut x334: u32 = 0;
    let (x333, x334) = fiat_p192_mulx_u32(x315, 0xffffffff);
    let mut x335: u32 = 0;
    let mut x336: u32 = 0;
    let (x335, x336) = fiat_p192_mulx_u32(x315, 0xfffffffe);
    let mut x337: u32 = 0;
    let mut x338: u32 = 0;
    let (x337, x338) = fiat_p192_mulx_u32(x315, 0xffffffff);
    let mut x339: u32 = 0;
    let mut x340: u32 = 0;
    let (x339, x340) = fiat_p192_mulx_u32(x315, 0xffffffff);
    let mut x341: u32 = 0;
    let mut x342: fiat_p192_u1 = 0;
    let (x341, x342) = fiat_p192_addcarryx_u32(0x0, x340, x337);
    let mut x343: u32 = 0;
    let mut x344: fiat_p192_u1 = 0;
    let (x343, x344) = fiat_p192_addcarryx_u32(x342, x338, x335);
    let mut x345: u32 = 0;
    let mut x346: fiat_p192_u1 = 0;
    let (x345, x346) = fiat_p192_addcarryx_u32(x344, x336, x333);
    let mut x347: u32 = 0;
    let mut x348: fiat_p192_u1 = 0;
    let (x347, x348) = fiat_p192_addcarryx_u32(x346, x334, x331);
    let mut x349: u32 = 0;
    let mut x350: fiat_p192_u1 = 0;
    let (x349, x350) = fiat_p192_addcarryx_u32(x348, x332, x329);
    let x351: u32 = ((x350 as u32) + x330);
    let mut x352: u32 = 0;
    let mut x353: fiat_p192_u1 = 0;
    let (x352, x353) = fiat_p192_addcarryx_u32(0x0, x315, x339);
    let mut x354: u32 = 0;
    let mut x355: fiat_p192_u1 = 0;
    let (x354, x355) = fiat_p192_addcarryx_u32(x353, x317, x341);
    let mut x356: u32 = 0;
    let mut x357: fiat_p192_u1 = 0;
    let (x356, x357) = fiat_p192_addcarryx_u32(x355, x319, x343);
    let mut x358: u32 = 0;
    let mut x359: fiat_p192_u1 = 0;
    let (x358, x359) = fiat_p192_addcarryx_u32(x357, x321, x345);
    let mut x360: u32 = 0;
    let mut x361: fiat_p192_u1 = 0;
    let (x360, x361) = fiat_p192_addcarryx_u32(x359, x323, x347);
    let mut x362: u32 = 0;
    let mut x363: fiat_p192_u1 = 0;
    let (x362, x363) = fiat_p192_addcarryx_u32(x361, x325, x349);
    let mut x364: u32 = 0;
    let mut x365: fiat_p192_u1 = 0;
    let (x364, x365) = fiat_p192_addcarryx_u32(x363, x327, x351);
    let x366: u32 = ((x365 as u32) + (x328 as u32));
    let mut x367: u32 = 0;
    let mut x368: u32 = 0;
    let (x367, x368) = fiat_p192_mulx_u32(x5, (arg2[5]));
    let mut x369: u32 = 0;
    let mut x370: u32 = 0;
    let (x369, x370) = fiat_p192_mulx_u32(x5, (arg2[4]));
    let mut x371: u32 = 0;
    let mut x372: u32 = 0;
    let (x371, x372) = fiat_p192_mulx_u32(x5, (arg2[3]));
    let mut x373: u32 = 0;
    let mut x374: u32 = 0;
    let (x373, x374) = fiat_p192_mulx_u32(x5, (arg2[2]));
    let mut x375: u32 = 0;
    let mut x376: u32 = 0;
    let (x375, x376) = fiat_p192_mulx_u32(x5, (arg2[1]));
    let mut x377: u32 = 0;
    let mut x378: u32 = 0;
    let (x377, x378) = fiat_p192_mulx_u32(x5, (arg2[0]));
    let mut x379: u32 = 0;
    let mut x380: fiat_p192_u1 = 0;
    let (x379, x380) = fiat_p192_addcarryx_u32(0x0, x378, x375);
    let mut x381: u32 = 0;
    let mut x382: fiat_p192_u1 = 0;
    let (x381, x382) = fiat_p192_addcarryx_u32(x380, x376, x373);
    let mut x383: u32 = 0;
    let mut x384: fiat_p192_u1 = 0;
    let (x383, x384) = fiat_p192_addcarryx_u32(x382, x374, x371);
    let mut x385: u32 = 0;
    let mut x386: fiat_p192_u1 = 0;
    let (x385, x386) = fiat_p192_addcarryx_u32(x384, x372, x369);
    let mut x387: u32 = 0;
    let mut x388: fiat_p192_u1 = 0;
    let (x387, x388) = fiat_p192_addcarryx_u32(x386, x370, x367);
    let x389: u32 = ((x388 as u32) + x368);
    let mut x390: u32 = 0;
    let mut x391: fiat_p192_u1 = 0;
    let (x390, x391) = fiat_p192_addcarryx_u32(0x0, x354, x377);
    let mut x392: u32 = 0;
    let mut x393: fiat_p192_u1 = 0;
    let (x392, x393) = fiat_p192_addcarryx_u32(x391, x356, x379);
    let mut x394: u32 = 0;
    let mut x395: fiat_p192_u1 = 0;
    let (x394, x395) = fiat_p192_addcarryx_u32(x393, x358, x381);
    let mut x396: u32 = 0;
    let mut x397: fiat_p192_u1 = 0;
    let (x396, x397) = fiat_p192_addcarryx_u32(x395, x360, x383);
    let mut x398: u32 = 0;
    let mut x399: fiat_p192_u1 = 0;
    let (x398, x399) = fiat_p192_addcarryx_u32(x397, x362, x385);
    let mut x400: u32 = 0;
    let mut x401: fiat_p192_u1 = 0;
    let (x400, x401) = fiat_p192_addcarryx_u32(x399, x364, x387);
    let mut x402: u32 = 0;
    let mut x403: fiat_p192_u1 = 0;
    let (x402, x403) = fiat_p192_addcarryx_u32(x401, x366, x389);
    let mut x404: u32 = 0;
    let mut x405: u32 = 0;
    let (x404, x405) = fiat_p192_mulx_u32(x390, 0xffffffff);
    let mut x406: u32 = 0;
    let mut x407: u32 = 0;
    let (x406, x407) = fiat_p192_mulx_u32(x390, 0xffffffff);
    let mut x408: u32 = 0;
    let mut x409: u32 = 0;
    let (x408, x409) = fiat_p192_mulx_u32(x390, 0xffffffff);
    let mut x410: u32 = 0;
    let mut x411: u32 = 0;
    let (x410, x411) = fiat_p192_mulx_u32(x390, 0xfffffffe);
    let mut x412: u32 = 0;
    let mut x413: u32 = 0;
    let (x412, x413) = fiat_p192_mulx_u32(x390, 0xffffffff);
    let mut x414: u32 = 0;
    let mut x415: u32 = 0;
    let (x414, x415) = fiat_p192_mulx_u32(x390, 0xffffffff);
    let mut x416: u32 = 0;
    let mut x417: fiat_p192_u1 = 0;
    let (x416, x417) = fiat_p192_addcarryx_u32(0x0, x415, x412);
    let mut x418: u32 = 0;
    let mut x419: fiat_p192_u1 = 0;
    let (x418, x419) = fiat_p192_addcarryx_u32(x417, x413, x410);
    let mut x420: u32 = 0;
    let mut x421: fiat_p192_u1 = 0;
    let (x420, x421) = fiat_p192_addcarryx_u32(x419, x411, x408);
    let mut x422: u32 = 0;
    let mut x423: fiat_p192_u1 = 0;
    let (x422, x423) = fiat_p192_addcarryx_u32(x421, x409, x406);
    let mut x424: u32 = 0;
    let mut x425: fiat_p192_u1 = 0;
    let (x424, x425) = fiat_p192_addcarryx_u32(x423, x407, x404);
    let x426: u32 = ((x425 as u32) + x405);
    let mut x427: u32 = 0;
    let mut x428: fiat_p192_u1 = 0;
    let (x427, x428) = fiat_p192_addcarryx_u32(0x0, x390, x414);
    let mut x429: u32 = 0;
    let mut x430: fiat_p192_u1 = 0;
    let (x429, x430) = fiat_p192_addcarryx_u32(x428, x392, x416);
    let mut x431: u32 = 0;
    let mut x432: fiat_p192_u1 = 0;
    let (x431, x432) = fiat_p192_addcarryx_u32(x430, x394, x418);
    let mut x433: u32 = 0;
    let mut x434: fiat_p192_u1 = 0;
    let (x433, x434) = fiat_p192_addcarryx_u32(x432, x396, x420);
    let mut x435: u32 = 0;
    let mut x436: fiat_p192_u1 = 0;
    let (x435, x436) = fiat_p192_addcarryx_u32(x434, x398, x422);
    let mut x437: u32 = 0;
    let mut x438: fiat_p192_u1 = 0;
    let (x437, x438) = fiat_p192_addcarryx_u32(x436, x400, x424);
    let mut x439: u32 = 0;
    let mut x440: fiat_p192_u1 = 0;
    let (x439, x440) = fiat_p192_addcarryx_u32(x438, x402, x426);
    let x441: u32 = ((x440 as u32) + (x403 as u32));
    let mut x442: u32 = 0;
    let mut x443: fiat_p192_u1 = 0;
    let (x442, x443) = fiat_p192_subborrowx_u32(0x0, x429, 0xffffffff);
    let mut x444: u32 = 0;
    let mut x445: fiat_p192_u1 = 0;
    let (x444, x445) = fiat_p192_subborrowx_u32(x443, x431, 0xffffffff);
    let mut x446: u32 = 0;
    let mut x447: fiat_p192_u1 = 0;
    let (x446, x447) = fiat_p192_subborrowx_u32(x445, x433, 0xfffffffe);
    let mut x448: u32 = 0;
    let mut x449: fiat_p192_u1 = 0;
    let (x448, x449) = fiat_p192_subborrowx_u32(x447, x435, 0xffffffff);
    let mut x450: u32 = 0;
    let mut x451: fiat_p192_u1 = 0;
    let (x450, x451) = fiat_p192_subborrowx_u32(x449, x437, 0xffffffff);
    let mut x452: u32 = 0;
    let mut x453: fiat_p192_u1 = 0;
    let (x452, x453) = fiat_p192_subborrowx_u32(x451, x439, 0xffffffff);
    let mut x454: u32 = 0;
    let mut x455: fiat_p192_u1 = 0;
    let (x454, x455) = fiat_p192_subborrowx_u32(x453, x441, (0x0 as u32));
    let mut x456: u32 = 0;
    let (x456) = fiat_p192_cmovznz_u32(x455, x442, x429);
    let mut x457: u32 = 0;
    let (x457) = fiat_p192_cmovznz_u32(x455, x444, x431);
    let mut x458: u32 = 0;
    let (x458) = fiat_p192_cmovznz_u32(x455, x446, x433);
    let mut x459: u32 = 0;
    let (x459) = fiat_p192_cmovznz_u32(x455, x448, x435);
    let mut x460: u32 = 0;
    let (x460) = fiat_p192_cmovznz_u32(x455, x450, x437);
    let mut x461: u32 = 0;
    let (x461) = fiat_p192_cmovznz_u32(x455, x452, x439);
    out1[0] = x456;
    out1[1] = x457;
    out1[2] = x458;
    out1[3] = x459;
    out1[4] = x460;
    out1[5] = x461;
    out1
}
#[doc = " The function fiat_p192_square squares a field element in the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_p192_square(
    arg1: &fiat_p192_montgomery_domain_field_element,
) -> fiat_p192_montgomery_domain_field_element {
    let mut out1: fiat_p192_montgomery_domain_field_element = [0; 6];
    let x1: u32 = (arg1[1]);
    let x2: u32 = (arg1[2]);
    let x3: u32 = (arg1[3]);
    let x4: u32 = (arg1[4]);
    let x5: u32 = (arg1[5]);
    let x6: u32 = (arg1[0]);
    let mut x7: u32 = 0;
    let mut x8: u32 = 0;
    let (x7, x8) = fiat_p192_mulx_u32(x6, (arg1[5]));
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    let (x9, x10) = fiat_p192_mulx_u32(x6, (arg1[4]));
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    let (x11, x12) = fiat_p192_mulx_u32(x6, (arg1[3]));
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    let (x13, x14) = fiat_p192_mulx_u32(x6, (arg1[2]));
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    let (x15, x16) = fiat_p192_mulx_u32(x6, (arg1[1]));
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    let (x17, x18) = fiat_p192_mulx_u32(x6, (arg1[0]));
    let mut x19: u32 = 0;
    let mut x20: fiat_p192_u1 = 0;
    let (x19, x20) = fiat_p192_addcarryx_u32(0x0, x18, x15);
    let mut x21: u32 = 0;
    let mut x22: fiat_p192_u1 = 0;
    let (x21, x22) = fiat_p192_addcarryx_u32(x20, x16, x13);
    let mut x23: u32 = 0;
    let mut x24: fiat_p192_u1 = 0;
    let (x23, x24) = fiat_p192_addcarryx_u32(x22, x14, x11);
    let mut x25: u32 = 0;
    let mut x26: fiat_p192_u1 = 0;
    let (x25, x26) = fiat_p192_addcarryx_u32(x24, x12, x9);
    let mut x27: u32 = 0;
    let mut x28: fiat_p192_u1 = 0;
    let (x27, x28) = fiat_p192_addcarryx_u32(x26, x10, x7);
    let x29: u32 = ((x28 as u32) + x8);
    let mut x30: u32 = 0;
    let mut x31: u32 = 0;
    let (x30, x31) = fiat_p192_mulx_u32(x17, 0xffffffff);
    let mut x32: u32 = 0;
    let mut x33: u32 = 0;
    let (x32, x33) = fiat_p192_mulx_u32(x17, 0xffffffff);
    let mut x34: u32 = 0;
    let mut x35: u32 = 0;
    let (x34, x35) = fiat_p192_mulx_u32(x17, 0xffffffff);
    let mut x36: u32 = 0;
    let mut x37: u32 = 0;
    let (x36, x37) = fiat_p192_mulx_u32(x17, 0xfffffffe);
    let mut x38: u32 = 0;
    let mut x39: u32 = 0;
    let (x38, x39) = fiat_p192_mulx_u32(x17, 0xffffffff);
    let mut x40: u32 = 0;
    let mut x41: u32 = 0;
    let (x40, x41) = fiat_p192_mulx_u32(x17, 0xffffffff);
    let mut x42: u32 = 0;
    let mut x43: fiat_p192_u1 = 0;
    let (x42, x43) = fiat_p192_addcarryx_u32(0x0, x41, x38);
    let mut x44: u32 = 0;
    let mut x45: fiat_p192_u1 = 0;
    let (x44, x45) = fiat_p192_addcarryx_u32(x43, x39, x36);
    let mut x46: u32 = 0;
    let mut x47: fiat_p192_u1 = 0;
    let (x46, x47) = fiat_p192_addcarryx_u32(x45, x37, x34);
    let mut x48: u32 = 0;
    let mut x49: fiat_p192_u1 = 0;
    let (x48, x49) = fiat_p192_addcarryx_u32(x47, x35, x32);
    let mut x50: u32 = 0;
    let mut x51: fiat_p192_u1 = 0;
    let (x50, x51) = fiat_p192_addcarryx_u32(x49, x33, x30);
    let x52: u32 = ((x51 as u32) + x31);
    let mut x53: u32 = 0;
    let mut x54: fiat_p192_u1 = 0;
    let (x53, x54) = fiat_p192_addcarryx_u32(0x0, x17, x40);
    let mut x55: u32 = 0;
    let mut x56: fiat_p192_u1 = 0;
    let (x55, x56) = fiat_p192_addcarryx_u32(x54, x19, x42);
    let mut x57: u32 = 0;
    let mut x58: fiat_p192_u1 = 0;
    let (x57, x58) = fiat_p192_addcarryx_u32(x56, x21, x44);
    let mut x59: u32 = 0;
    let mut x60: fiat_p192_u1 = 0;
    let (x59, x60) = fiat_p192_addcarryx_u32(x58, x23, x46);
    let mut x61: u32 = 0;
    let mut x62: fiat_p192_u1 = 0;
    let (x61, x62) = fiat_p192_addcarryx_u32(x60, x25, x48);
    let mut x63: u32 = 0;
    let mut x64: fiat_p192_u1 = 0;
    let (x63, x64) = fiat_p192_addcarryx_u32(x62, x27, x50);
    let mut x65: u32 = 0;
    let mut x66: fiat_p192_u1 = 0;
    let (x65, x66) = fiat_p192_addcarryx_u32(x64, x29, x52);
    let mut x67: u32 = 0;
    let mut x68: u32 = 0;
    let (x67, x68) = fiat_p192_mulx_u32(x1, (arg1[5]));
    let mut x69: u32 = 0;
    let mut x70: u32 = 0;
    let (x69, x70) = fiat_p192_mulx_u32(x1, (arg1[4]));
    let mut x71: u32 = 0;
    let mut x72: u32 = 0;
    let (x71, x72) = fiat_p192_mulx_u32(x1, (arg1[3]));
    let mut x73: u32 = 0;
    let mut x74: u32 = 0;
    let (x73, x74) = fiat_p192_mulx_u32(x1, (arg1[2]));
    let mut x75: u32 = 0;
    let mut x76: u32 = 0;
    let (x75, x76) = fiat_p192_mulx_u32(x1, (arg1[1]));
    let mut x77: u32 = 0;
    let mut x78: u32 = 0;
    let (x77, x78) = fiat_p192_mulx_u32(x1, (arg1[0]));
    let mut x79: u32 = 0;
    let mut x80: fiat_p192_u1 = 0;
    let (x79, x80) = fiat_p192_addcarryx_u32(0x0, x78, x75);
    let mut x81: u32 = 0;
    let mut x82: fiat_p192_u1 = 0;
    let (x81, x82) = fiat_p192_addcarryx_u32(x80, x76, x73);
    let mut x83: u32 = 0;
    let mut x84: fiat_p192_u1 = 0;
    let (x83, x84) = fiat_p192_addcarryx_u32(x82, x74, x71);
    let mut x85: u32 = 0;
    let mut x86: fiat_p192_u1 = 0;
    let (x85, x86) = fiat_p192_addcarryx_u32(x84, x72, x69);
    let mut x87: u32 = 0;
    let mut x88: fiat_p192_u1 = 0;
    let (x87, x88) = fiat_p192_addcarryx_u32(x86, x70, x67);
    let x89: u32 = ((x88 as u32) + x68);
    let mut x90: u32 = 0;
    let mut x91: fiat_p192_u1 = 0;
    let (x90, x91) = fiat_p192_addcarryx_u32(0x0, x55, x77);
    let mut x92: u32 = 0;
    let mut x93: fiat_p192_u1 = 0;
    let (x92, x93) = fiat_p192_addcarryx_u32(x91, x57, x79);
    let mut x94: u32 = 0;
    let mut x95: fiat_p192_u1 = 0;
    let (x94, x95) = fiat_p192_addcarryx_u32(x93, x59, x81);
    let mut x96: u32 = 0;
    let mut x97: fiat_p192_u1 = 0;
    let (x96, x97) = fiat_p192_addcarryx_u32(x95, x61, x83);
    let mut x98: u32 = 0;
    let mut x99: fiat_p192_u1 = 0;
    let (x98, x99) = fiat_p192_addcarryx_u32(x97, x63, x85);
    let mut x100: u32 = 0;
    let mut x101: fiat_p192_u1 = 0;
    let (x100, x101) = fiat_p192_addcarryx_u32(x99, x65, x87);
    let mut x102: u32 = 0;
    let mut x103: fiat_p192_u1 = 0;
    let (x102, x103) = fiat_p192_addcarryx_u32(x101, (x66 as u32), x89);
    let mut x104: u32 = 0;
    let mut x105: u32 = 0;
    let (x104, x105) = fiat_p192_mulx_u32(x90, 0xffffffff);
    let mut x106: u32 = 0;
    let mut x107: u32 = 0;
    let (x106, x107) = fiat_p192_mulx_u32(x90, 0xffffffff);
    let mut x108: u32 = 0;
    let mut x109: u32 = 0;
    let (x108, x109) = fiat_p192_mulx_u32(x90, 0xffffffff);
    let mut x110: u32 = 0;
    let mut x111: u32 = 0;
    let (x110, x111) = fiat_p192_mulx_u32(x90, 0xfffffffe);
    let mut x112: u32 = 0;
    let mut x113: u32 = 0;
    let (x112, x113) = fiat_p192_mulx_u32(x90, 0xffffffff);
    let mut x114: u32 = 0;
    let mut x115: u32 = 0;
    let (x114, x115) = fiat_p192_mulx_u32(x90, 0xffffffff);
    let mut x116: u32 = 0;
    let mut x117: fiat_p192_u1 = 0;
    let (x116, x117) = fiat_p192_addcarryx_u32(0x0, x115, x112);
    let mut x118: u32 = 0;
    let mut x119: fiat_p192_u1 = 0;
    let (x118, x119) = fiat_p192_addcarryx_u32(x117, x113, x110);
    let mut x120: u32 = 0;
    let mut x121: fiat_p192_u1 = 0;
    let (x120, x121) = fiat_p192_addcarryx_u32(x119, x111, x108);
    let mut x122: u32 = 0;
    let mut x123: fiat_p192_u1 = 0;
    let (x122, x123) = fiat_p192_addcarryx_u32(x121, x109, x106);
    let mut x124: u32 = 0;
    let mut x125: fiat_p192_u1 = 0;
    let (x124, x125) = fiat_p192_addcarryx_u32(x123, x107, x104);
    let x126: u32 = ((x125 as u32) + x105);
    let mut x127: u32 = 0;
    let mut x128: fiat_p192_u1 = 0;
    let (x127, x128) = fiat_p192_addcarryx_u32(0x0, x90, x114);
    let mut x129: u32 = 0;
    let mut x130: fiat_p192_u1 = 0;
    let (x129, x130) = fiat_p192_addcarryx_u32(x128, x92, x116);
    let mut x131: u32 = 0;
    let mut x132: fiat_p192_u1 = 0;
    let (x131, x132) = fiat_p192_addcarryx_u32(x130, x94, x118);
    let mut x133: u32 = 0;
    let mut x134: fiat_p192_u1 = 0;
    let (x133, x134) = fiat_p192_addcarryx_u32(x132, x96, x120);
    let mut x135: u32 = 0;
    let mut x136: fiat_p192_u1 = 0;
    let (x135, x136) = fiat_p192_addcarryx_u32(x134, x98, x122);
    let mut x137: u32 = 0;
    let mut x138: fiat_p192_u1 = 0;
    let (x137, x138) = fiat_p192_addcarryx_u32(x136, x100, x124);
    let mut x139: u32 = 0;
    let mut x140: fiat_p192_u1 = 0;
    let (x139, x140) = fiat_p192_addcarryx_u32(x138, x102, x126);
    let x141: u32 = ((x140 as u32) + (x103 as u32));
    let mut x142: u32 = 0;
    let mut x143: u32 = 0;
    let (x142, x143) = fiat_p192_mulx_u32(x2, (arg1[5]));
    let mut x144: u32 = 0;
    let mut x145: u32 = 0;
    let (x144, x145) = fiat_p192_mulx_u32(x2, (arg1[4]));
    let mut x146: u32 = 0;
    let mut x147: u32 = 0;
    let (x146, x147) = fiat_p192_mulx_u32(x2, (arg1[3]));
    let mut x148: u32 = 0;
    let mut x149: u32 = 0;
    let (x148, x149) = fiat_p192_mulx_u32(x2, (arg1[2]));
    let mut x150: u32 = 0;
    let mut x151: u32 = 0;
    let (x150, x151) = fiat_p192_mulx_u32(x2, (arg1[1]));
    let mut x152: u32 = 0;
    let mut x153: u32 = 0;
    let (x152, x153) = fiat_p192_mulx_u32(x2, (arg1[0]));
    let mut x154: u32 = 0;
    let mut x155: fiat_p192_u1 = 0;
    let (x154, x155) = fiat_p192_addcarryx_u32(0x0, x153, x150);
    let mut x156: u32 = 0;
    let mut x157: fiat_p192_u1 = 0;
    let (x156, x157) = fiat_p192_addcarryx_u32(x155, x151, x148);
    let mut x158: u32 = 0;
    let mut x159: fiat_p192_u1 = 0;
    let (x158, x159) = fiat_p192_addcarryx_u32(x157, x149, x146);
    let mut x160: u32 = 0;
    let mut x161: fiat_p192_u1 = 0;
    let (x160, x161) = fiat_p192_addcarryx_u32(x159, x147, x144);
    let mut x162: u32 = 0;
    let mut x163: fiat_p192_u1 = 0;
    let (x162, x163) = fiat_p192_addcarryx_u32(x161, x145, x142);
    let x164: u32 = ((x163 as u32) + x143);
    let mut x165: u32 = 0;
    let mut x166: fiat_p192_u1 = 0;
    let (x165, x166) = fiat_p192_addcarryx_u32(0x0, x129, x152);
    let mut x167: u32 = 0;
    let mut x168: fiat_p192_u1 = 0;
    let (x167, x168) = fiat_p192_addcarryx_u32(x166, x131, x154);
    let mut x169: u32 = 0;
    let mut x170: fiat_p192_u1 = 0;
    let (x169, x170) = fiat_p192_addcarryx_u32(x168, x133, x156);
    let mut x171: u32 = 0;
    let mut x172: fiat_p192_u1 = 0;
    let (x171, x172) = fiat_p192_addcarryx_u32(x170, x135, x158);
    let mut x173: u32 = 0;
    let mut x174: fiat_p192_u1 = 0;
    let (x173, x174) = fiat_p192_addcarryx_u32(x172, x137, x160);
    let mut x175: u32 = 0;
    let mut x176: fiat_p192_u1 = 0;
    let (x175, x176) = fiat_p192_addcarryx_u32(x174, x139, x162);
    let mut x177: u32 = 0;
    let mut x178: fiat_p192_u1 = 0;
    let (x177, x178) = fiat_p192_addcarryx_u32(x176, x141, x164);
    let mut x179: u32 = 0;
    let mut x180: u32 = 0;
    let (x179, x180) = fiat_p192_mulx_u32(x165, 0xffffffff);
    let mut x181: u32 = 0;
    let mut x182: u32 = 0;
    let (x181, x182) = fiat_p192_mulx_u32(x165, 0xffffffff);
    let mut x183: u32 = 0;
    let mut x184: u32 = 0;
    let (x183, x184) = fiat_p192_mulx_u32(x165, 0xffffffff);
    let mut x185: u32 = 0;
    let mut x186: u32 = 0;
    let (x185, x186) = fiat_p192_mulx_u32(x165, 0xfffffffe);
    let mut x187: u32 = 0;
    let mut x188: u32 = 0;
    let (x187, x188) = fiat_p192_mulx_u32(x165, 0xffffffff);
    let mut x189: u32 = 0;
    let mut x190: u32 = 0;
    let (x189, x190) = fiat_p192_mulx_u32(x165, 0xffffffff);
    let mut x191: u32 = 0;
    let mut x192: fiat_p192_u1 = 0;
    let (x191, x192) = fiat_p192_addcarryx_u32(0x0, x190, x187);
    let mut x193: u32 = 0;
    let mut x194: fiat_p192_u1 = 0;
    let (x193, x194) = fiat_p192_addcarryx_u32(x192, x188, x185);
    let mut x195: u32 = 0;
    let mut x196: fiat_p192_u1 = 0;
    let (x195, x196) = fiat_p192_addcarryx_u32(x194, x186, x183);
    let mut x197: u32 = 0;
    let mut x198: fiat_p192_u1 = 0;
    let (x197, x198) = fiat_p192_addcarryx_u32(x196, x184, x181);
    let mut x199: u32 = 0;
    let mut x200: fiat_p192_u1 = 0;
    let (x199, x200) = fiat_p192_addcarryx_u32(x198, x182, x179);
    let x201: u32 = ((x200 as u32) + x180);
    let mut x202: u32 = 0;
    let mut x203: fiat_p192_u1 = 0;
    let (x202, x203) = fiat_p192_addcarryx_u32(0x0, x165, x189);
    let mut x204: u32 = 0;
    let mut x205: fiat_p192_u1 = 0;
    let (x204, x205) = fiat_p192_addcarryx_u32(x203, x167, x191);
    let mut x206: u32 = 0;
    let mut x207: fiat_p192_u1 = 0;
    let (x206, x207) = fiat_p192_addcarryx_u32(x205, x169, x193);
    let mut x208: u32 = 0;
    let mut x209: fiat_p192_u1 = 0;
    let (x208, x209) = fiat_p192_addcarryx_u32(x207, x171, x195);
    let mut x210: u32 = 0;
    let mut x211: fiat_p192_u1 = 0;
    let (x210, x211) = fiat_p192_addcarryx_u32(x209, x173, x197);
    let mut x212: u32 = 0;
    let mut x213: fiat_p192_u1 = 0;
    let (x212, x213) = fiat_p192_addcarryx_u32(x211, x175, x199);
    let mut x214: u32 = 0;
    let mut x215: fiat_p192_u1 = 0;
    let (x214, x215) = fiat_p192_addcarryx_u32(x213, x177, x201);
    let x216: u32 = ((x215 as u32) + (x178 as u32));
    let mut x217: u32 = 0;
    let mut x218: u32 = 0;
    let (x217, x218) = fiat_p192_mulx_u32(x3, (arg1[5]));
    let mut x219: u32 = 0;
    let mut x220: u32 = 0;
    let (x219, x220) = fiat_p192_mulx_u32(x3, (arg1[4]));
    let mut x221: u32 = 0;
    let mut x222: u32 = 0;
    let (x221, x222) = fiat_p192_mulx_u32(x3, (arg1[3]));
    let mut x223: u32 = 0;
    let mut x224: u32 = 0;
    let (x223, x224) = fiat_p192_mulx_u32(x3, (arg1[2]));
    let mut x225: u32 = 0;
    let mut x226: u32 = 0;
    let (x225, x226) = fiat_p192_mulx_u32(x3, (arg1[1]));
    let mut x227: u32 = 0;
    let mut x228: u32 = 0;
    let (x227, x228) = fiat_p192_mulx_u32(x3, (arg1[0]));
    let mut x229: u32 = 0;
    let mut x230: fiat_p192_u1 = 0;
    let (x229, x230) = fiat_p192_addcarryx_u32(0x0, x228, x225);
    let mut x231: u32 = 0;
    let mut x232: fiat_p192_u1 = 0;
    let (x231, x232) = fiat_p192_addcarryx_u32(x230, x226, x223);
    let mut x233: u32 = 0;
    let mut x234: fiat_p192_u1 = 0;
    let (x233, x234) = fiat_p192_addcarryx_u32(x232, x224, x221);
    let mut x235: u32 = 0;
    let mut x236: fiat_p192_u1 = 0;
    let (x235, x236) = fiat_p192_addcarryx_u32(x234, x222, x219);
    let mut x237: u32 = 0;
    let mut x238: fiat_p192_u1 = 0;
    let (x237, x238) = fiat_p192_addcarryx_u32(x236, x220, x217);
    let x239: u32 = ((x238 as u32) + x218);
    let mut x240: u32 = 0;
    let mut x241: fiat_p192_u1 = 0;
    let (x240, x241) = fiat_p192_addcarryx_u32(0x0, x204, x227);
    let mut x242: u32 = 0;
    let mut x243: fiat_p192_u1 = 0;
    let (x242, x243) = fiat_p192_addcarryx_u32(x241, x206, x229);
    let mut x244: u32 = 0;
    let mut x245: fiat_p192_u1 = 0;
    let (x244, x245) = fiat_p192_addcarryx_u32(x243, x208, x231);
    let mut x246: u32 = 0;
    let mut x247: fiat_p192_u1 = 0;
    let (x246, x247) = fiat_p192_addcarryx_u32(x245, x210, x233);
    let mut x248: u32 = 0;
    let mut x249: fiat_p192_u1 = 0;
    let (x248, x249) = fiat_p192_addcarryx_u32(x247, x212, x235);
    let mut x250: u32 = 0;
    let mut x251: fiat_p192_u1 = 0;
    let (x250, x251) = fiat_p192_addcarryx_u32(x249, x214, x237);
    let mut x252: u32 = 0;
    let mut x253: fiat_p192_u1 = 0;
    let (x252, x253) = fiat_p192_addcarryx_u32(x251, x216, x239);
    let mut x254: u32 = 0;
    let mut x255: u32 = 0;
    let (x254, x255) = fiat_p192_mulx_u32(x240, 0xffffffff);
    let mut x256: u32 = 0;
    let mut x257: u32 = 0;
    let (x256, x257) = fiat_p192_mulx_u32(x240, 0xffffffff);
    let mut x258: u32 = 0;
    let mut x259: u32 = 0;
    let (x258, x259) = fiat_p192_mulx_u32(x240, 0xffffffff);
    let mut x260: u32 = 0;
    let mut x261: u32 = 0;
    let (x260, x261) = fiat_p192_mulx_u32(x240, 0xfffffffe);
    let mut x262: u32 = 0;
    let mut x263: u32 = 0;
    let (x262, x263) = fiat_p192_mulx_u32(x240, 0xffffffff);
    let mut x264: u32 = 0;
    let mut x265: u32 = 0;
    let (x264, x265) = fiat_p192_mulx_u32(x240, 0xffffffff);
    let mut x266: u32 = 0;
    let mut x267: fiat_p192_u1 = 0;
    let (x266, x267) = fiat_p192_addcarryx_u32(0x0, x265, x262);
    let mut x268: u32 = 0;
    let mut x269: fiat_p192_u1 = 0;
    let (x268, x269) = fiat_p192_addcarryx_u32(x267, x263, x260);
    let mut x270: u32 = 0;
    let mut x271: fiat_p192_u1 = 0;
    let (x270, x271) = fiat_p192_addcarryx_u32(x269, x261, x258);
    let mut x272: u32 = 0;
    let mut x273: fiat_p192_u1 = 0;
    let (x272, x273) = fiat_p192_addcarryx_u32(x271, x259, x256);
    let mut x274: u32 = 0;
    let mut x275: fiat_p192_u1 = 0;
    let (x274, x275) = fiat_p192_addcarryx_u32(x273, x257, x254);
    let x276: u32 = ((x275 as u32) + x255);
    let mut x277: u32 = 0;
    let mut x278: fiat_p192_u1 = 0;
    let (x277, x278) = fiat_p192_addcarryx_u32(0x0, x240, x264);
    let mut x279: u32 = 0;
    let mut x280: fiat_p192_u1 = 0;
    let (x279, x280) = fiat_p192_addcarryx_u32(x278, x242, x266);
    let mut x281: u32 = 0;
    let mut x282: fiat_p192_u1 = 0;
    let (x281, x282) = fiat_p192_addcarryx_u32(x280, x244, x268);
    let mut x283: u32 = 0;
    let mut x284: fiat_p192_u1 = 0;
    let (x283, x284) = fiat_p192_addcarryx_u32(x282, x246, x270);
    let mut x285: u32 = 0;
    let mut x286: fiat_p192_u1 = 0;
    let (x285, x286) = fiat_p192_addcarryx_u32(x284, x248, x272);
    let mut x287: u32 = 0;
    let mut x288: fiat_p192_u1 = 0;
    let (x287, x288) = fiat_p192_addcarryx_u32(x286, x250, x274);
    let mut x289: u32 = 0;
    let mut x290: fiat_p192_u1 = 0;
    let (x289, x290) = fiat_p192_addcarryx_u32(x288, x252, x276);
    let x291: u32 = ((x290 as u32) + (x253 as u32));
    let mut x292: u32 = 0;
    let mut x293: u32 = 0;
    let (x292, x293) = fiat_p192_mulx_u32(x4, (arg1[5]));
    let mut x294: u32 = 0;
    let mut x295: u32 = 0;
    let (x294, x295) = fiat_p192_mulx_u32(x4, (arg1[4]));
    let mut x296: u32 = 0;
    let mut x297: u32 = 0;
    let (x296, x297) = fiat_p192_mulx_u32(x4, (arg1[3]));
    let mut x298: u32 = 0;
    let mut x299: u32 = 0;
    let (x298, x299) = fiat_p192_mulx_u32(x4, (arg1[2]));
    let mut x300: u32 = 0;
    let mut x301: u32 = 0;
    let (x300, x301) = fiat_p192_mulx_u32(x4, (arg1[1]));
    let mut x302: u32 = 0;
    let mut x303: u32 = 0;
    let (x302, x303) = fiat_p192_mulx_u32(x4, (arg1[0]));
    let mut x304: u32 = 0;
    let mut x305: fiat_p192_u1 = 0;
    let (x304, x305) = fiat_p192_addcarryx_u32(0x0, x303, x300);
    let mut x306: u32 = 0;
    let mut x307: fiat_p192_u1 = 0;
    let (x306, x307) = fiat_p192_addcarryx_u32(x305, x301, x298);
    let mut x308: u32 = 0;
    let mut x309: fiat_p192_u1 = 0;
    let (x308, x309) = fiat_p192_addcarryx_u32(x307, x299, x296);
    let mut x310: u32 = 0;
    let mut x311: fiat_p192_u1 = 0;
    let (x310, x311) = fiat_p192_addcarryx_u32(x309, x297, x294);
    let mut x312: u32 = 0;
    let mut x313: fiat_p192_u1 = 0;
    let (x312, x313) = fiat_p192_addcarryx_u32(x311, x295, x292);
    let x314: u32 = ((x313 as u32) + x293);
    let mut x315: u32 = 0;
    let mut x316: fiat_p192_u1 = 0;
    let (x315, x316) = fiat_p192_addcarryx_u32(0x0, x279, x302);
    let mut x317: u32 = 0;
    let mut x318: fiat_p192_u1 = 0;
    let (x317, x318) = fiat_p192_addcarryx_u32(x316, x281, x304);
    let mut x319: u32 = 0;
    let mut x320: fiat_p192_u1 = 0;
    let (x319, x320) = fiat_p192_addcarryx_u32(x318, x283, x306);
    let mut x321: u32 = 0;
    let mut x322: fiat_p192_u1 = 0;
    let (x321, x322) = fiat_p192_addcarryx_u32(x320, x285, x308);
    let mut x323: u32 = 0;
    let mut x324: fiat_p192_u1 = 0;
    let (x323, x324) = fiat_p192_addcarryx_u32(x322, x287, x310);
    let mut x325: u32 = 0;
    let mut x326: fiat_p192_u1 = 0;
    let (x325, x326) = fiat_p192_addcarryx_u32(x324, x289, x312);
    let mut x327: u32 = 0;
    let mut x328: fiat_p192_u1 = 0;
    let (x327, x328) = fiat_p192_addcarryx_u32(x326, x291, x314);
    let mut x329: u32 = 0;
    let mut x330: u32 = 0;
    let (x329, x330) = fiat_p192_mulx_u32(x315, 0xffffffff);
    let mut x331: u32 = 0;
    let mut x332: u32 = 0;
    let (x331, x332) = fiat_p192_mulx_u32(x315, 0xffffffff);
    let mut x333: u32 = 0;
    let mut x334: u32 = 0;
    let (x333, x334) = fiat_p192_mulx_u32(x315, 0xffffffff);
    let mut x335: u32 = 0;
    let mut x336: u32 = 0;
    let (x335, x336) = fiat_p192_mulx_u32(x315, 0xfffffffe);
    let mut x337: u32 = 0;
    let mut x338: u32 = 0;
    let (x337, x338) = fiat_p192_mulx_u32(x315, 0xffffffff);
    let mut x339: u32 = 0;
    let mut x340: u32 = 0;
    let (x339, x340) = fiat_p192_mulx_u32(x315, 0xffffffff);
    let mut x341: u32 = 0;
    let mut x342: fiat_p192_u1 = 0;
    let (x341, x342) = fiat_p192_addcarryx_u32(0x0, x340, x337);
    let mut x343: u32 = 0;
    let mut x344: fiat_p192_u1 = 0;
    let (x343, x344) = fiat_p192_addcarryx_u32(x342, x338, x335);
    let mut x345: u32 = 0;
    let mut x346: fiat_p192_u1 = 0;
    let (x345, x346) = fiat_p192_addcarryx_u32(x344, x336, x333);
    let mut x347: u32 = 0;
    let mut x348: fiat_p192_u1 = 0;
    let (x347, x348) = fiat_p192_addcarryx_u32(x346, x334, x331);
    let mut x349: u32 = 0;
    let mut x350: fiat_p192_u1 = 0;
    let (x349, x350) = fiat_p192_addcarryx_u32(x348, x332, x329);
    let x351: u32 = ((x350 as u32) + x330);
    let mut x352: u32 = 0;
    let mut x353: fiat_p192_u1 = 0;
    let (x352, x353) = fiat_p192_addcarryx_u32(0x0, x315, x339);
    let mut x354: u32 = 0;
    let mut x355: fiat_p192_u1 = 0;
    let (x354, x355) = fiat_p192_addcarryx_u32(x353, x317, x341);
    let mut x356: u32 = 0;
    let mut x357: fiat_p192_u1 = 0;
    let (x356, x357) = fiat_p192_addcarryx_u32(x355, x319, x343);
    let mut x358: u32 = 0;
    let mut x359: fiat_p192_u1 = 0;
    let (x358, x359) = fiat_p192_addcarryx_u32(x357, x321, x345);
    let mut x360: u32 = 0;
    let mut x361: fiat_p192_u1 = 0;
    let (x360, x361) = fiat_p192_addcarryx_u32(x359, x323, x347);
    let mut x362: u32 = 0;
    let mut x363: fiat_p192_u1 = 0;
    let (x362, x363) = fiat_p192_addcarryx_u32(x361, x325, x349);
    let mut x364: u32 = 0;
    let mut x365: fiat_p192_u1 = 0;
    let (x364, x365) = fiat_p192_addcarryx_u32(x363, x327, x351);
    let x366: u32 = ((x365 as u32) + (x328 as u32));
    let mut x367: u32 = 0;
    let mut x368: u32 = 0;
    let (x367, x368) = fiat_p192_mulx_u32(x5, (arg1[5]));
    let mut x369: u32 = 0;
    let mut x370: u32 = 0;
    let (x369, x370) = fiat_p192_mulx_u32(x5, (arg1[4]));
    let mut x371: u32 = 0;
    let mut x372: u32 = 0;
    let (x371, x372) = fiat_p192_mulx_u32(x5, (arg1[3]));
    let mut x373: u32 = 0;
    let mut x374: u32 = 0;
    let (x373, x374) = fiat_p192_mulx_u32(x5, (arg1[2]));
    let mut x375: u32 = 0;
    let mut x376: u32 = 0;
    let (x375, x376) = fiat_p192_mulx_u32(x5, (arg1[1]));
    let mut x377: u32 = 0;
    let mut x378: u32 = 0;
    let (x377, x378) = fiat_p192_mulx_u32(x5, (arg1[0]));
    let mut x379: u32 = 0;
    let mut x380: fiat_p192_u1 = 0;
    let (x379, x380) = fiat_p192_addcarryx_u32(0x0, x378, x375);
    let mut x381: u32 = 0;
    let mut x382: fiat_p192_u1 = 0;
    let (x381, x382) = fiat_p192_addcarryx_u32(x380, x376, x373);
    let mut x383: u32 = 0;
    let mut x384: fiat_p192_u1 = 0;
    let (x383, x384) = fiat_p192_addcarryx_u32(x382, x374, x371);
    let mut x385: u32 = 0;
    let mut x386: fiat_p192_u1 = 0;
    let (x385, x386) = fiat_p192_addcarryx_u32(x384, x372, x369);
    let mut x387: u32 = 0;
    let mut x388: fiat_p192_u1 = 0;
    let (x387, x388) = fiat_p192_addcarryx_u32(x386, x370, x367);
    let x389: u32 = ((x388 as u32) + x368);
    let mut x390: u32 = 0;
    let mut x391: fiat_p192_u1 = 0;
    let (x390, x391) = fiat_p192_addcarryx_u32(0x0, x354, x377);
    let mut x392: u32 = 0;
    let mut x393: fiat_p192_u1 = 0;
    let (x392, x393) = fiat_p192_addcarryx_u32(x391, x356, x379);
    let mut x394: u32 = 0;
    let mut x395: fiat_p192_u1 = 0;
    let (x394, x395) = fiat_p192_addcarryx_u32(x393, x358, x381);
    let mut x396: u32 = 0;
    let mut x397: fiat_p192_u1 = 0;
    let (x396, x397) = fiat_p192_addcarryx_u32(x395, x360, x383);
    let mut x398: u32 = 0;
    let mut x399: fiat_p192_u1 = 0;
    let (x398, x399) = fiat_p192_addcarryx_u32(x397, x362, x385);
    let mut x400: u32 = 0;
    let mut x401: fiat_p192_u1 = 0;
    let (x400, x401) = fiat_p192_addcarryx_u32(x399, x364, x387);
    let mut x402: u32 = 0;
    let mut x403: fiat_p192_u1 = 0;
    let (x402, x403) = fiat_p192_addcarryx_u32(x401, x366, x389);
    let mut x404: u32 = 0;
    let mut x405: u32 = 0;
    let (x404, x405) = fiat_p192_mulx_u32(x390, 0xffffffff);
    let mut x406: u32 = 0;
    let mut x407: u32 = 0;
    let (x406, x407) = fiat_p192_mulx_u32(x390, 0xffffffff);
    let mut x408: u32 = 0;
    let mut x409: u32 = 0;
    let (x408, x409) = fiat_p192_mulx_u32(x390, 0xffffffff);
    let mut x410: u32 = 0;
    let mut x411: u32 = 0;
    let (x410, x411) = fiat_p192_mulx_u32(x390, 0xfffffffe);
    let mut x412: u32 = 0;
    let mut x413: u32 = 0;
    let (x412, x413) = fiat_p192_mulx_u32(x390, 0xffffffff);
    let mut x414: u32 = 0;
    let mut x415: u32 = 0;
    let (x414, x415) = fiat_p192_mulx_u32(x390, 0xffffffff);
    let mut x416: u32 = 0;
    let mut x417: fiat_p192_u1 = 0;
    let (x416, x417) = fiat_p192_addcarryx_u32(0x0, x415, x412);
    let mut x418: u32 = 0;
    let mut x419: fiat_p192_u1 = 0;
    let (x418, x419) = fiat_p192_addcarryx_u32(x417, x413, x410);
    let mut x420: u32 = 0;
    let mut x421: fiat_p192_u1 = 0;
    let (x420, x421) = fiat_p192_addcarryx_u32(x419, x411, x408);
    let mut x422: u32 = 0;
    let mut x423: fiat_p192_u1 = 0;
    let (x422, x423) = fiat_p192_addcarryx_u32(x421, x409, x406);
    let mut x424: u32 = 0;
    let mut x425: fiat_p192_u1 = 0;
    let (x424, x425) = fiat_p192_addcarryx_u32(x423, x407, x404);
    let x426: u32 = ((x425 as u32) + x405);
    let mut x427: u32 = 0;
    let mut x428: fiat_p192_u1 = 0;
    let (x427, x428) = fiat_p192_addcarryx_u32(0x0, x390, x414);
    let mut x429: u32 = 0;
    let mut x430: fiat_p192_u1 = 0;
    let (x429, x430) = fiat_p192_addcarryx_u32(x428, x392, x416);
    let mut x431: u32 = 0;
    let mut x432: fiat_p192_u1 = 0;
    let (x431, x432) = fiat_p192_addcarryx_u32(x430, x394, x418);
    let mut x433: u32 = 0;
    let mut x434: fiat_p192_u1 = 0;
    let (x433, x434) = fiat_p192_addcarryx_u32(x432, x396, x420);
    let mut x435: u32 = 0;
    let mut x436: fiat_p192_u1 = 0;
    let (x435, x436) = fiat_p192_addcarryx_u32(x434, x398, x422);
    let mut x437: u32 = 0;
    let mut x438: fiat_p192_u1 = 0;
    let (x437, x438) = fiat_p192_addcarryx_u32(x436, x400, x424);
    let mut x439: u32 = 0;
    let mut x440: fiat_p192_u1 = 0;
    let (x439, x440) = fiat_p192_addcarryx_u32(x438, x402, x426);
    let x441: u32 = ((x440 as u32) + (x403 as u32));
    let mut x442: u32 = 0;
    let mut x443: fiat_p192_u1 = 0;
    let (x442, x443) = fiat_p192_subborrowx_u32(0x0, x429, 0xffffffff);
    let mut x444: u32 = 0;
    let mut x445: fiat_p192_u1 = 0;
    let (x444, x445) = fiat_p192_subborrowx_u32(x443, x431, 0xffffffff);
    let mut x446: u32 = 0;
    let mut x447: fiat_p192_u1 = 0;
    let (x446, x447) = fiat_p192_subborrowx_u32(x445, x433, 0xfffffffe);
    let mut x448: u32 = 0;
    let mut x449: fiat_p192_u1 = 0;
    let (x448, x449) = fiat_p192_subborrowx_u32(x447, x435, 0xffffffff);
    let mut x450: u32 = 0;
    let mut x451: fiat_p192_u1 = 0;
    let (x450, x451) = fiat_p192_subborrowx_u32(x449, x437, 0xffffffff);
    let mut x452: u32 = 0;
    let mut x453: fiat_p192_u1 = 0;
    let (x452, x453) = fiat_p192_subborrowx_u32(x451, x439, 0xffffffff);
    let mut x454: u32 = 0;
    let mut x455: fiat_p192_u1 = 0;
    let (x454, x455) = fiat_p192_subborrowx_u32(x453, x441, (0x0 as u32));
    let mut x456: u32 = 0;
    let (x456) = fiat_p192_cmovznz_u32(x455, x442, x429);
    let mut x457: u32 = 0;
    let (x457) = fiat_p192_cmovznz_u32(x455, x444, x431);
    let mut x458: u32 = 0;
    let (x458) = fiat_p192_cmovznz_u32(x455, x446, x433);
    let mut x459: u32 = 0;
    let (x459) = fiat_p192_cmovznz_u32(x455, x448, x435);
    let mut x460: u32 = 0;
    let (x460) = fiat_p192_cmovznz_u32(x455, x450, x437);
    let mut x461: u32 = 0;
    let (x461) = fiat_p192_cmovznz_u32(x455, x452, x439);
    out1[0] = x456;
    out1[1] = x457;
    out1[2] = x458;
    out1[3] = x459;
    out1[4] = x460;
    out1[5] = x461;
    out1
}
#[doc = " The function fiat_p192_add adds two field elements in the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = "   0 ≤ eval arg2 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_p192_add(
    arg1: &fiat_p192_montgomery_domain_field_element,
    arg2: &fiat_p192_montgomery_domain_field_element,
) -> fiat_p192_montgomery_domain_field_element {
    let mut out1: fiat_p192_montgomery_domain_field_element = [0; 6];
    let mut x1: u32 = 0;
    let mut x2: fiat_p192_u1 = 0;
    let (x1, x2) = fiat_p192_addcarryx_u32(0x0, (arg1[0]), (arg2[0]));
    let mut x3: u32 = 0;
    let mut x4: fiat_p192_u1 = 0;
    let (x3, x4) = fiat_p192_addcarryx_u32(x2, (arg1[1]), (arg2[1]));
    let mut x5: u32 = 0;
    let mut x6: fiat_p192_u1 = 0;
    let (x5, x6) = fiat_p192_addcarryx_u32(x4, (arg1[2]), (arg2[2]));
    let mut x7: u32 = 0;
    let mut x8: fiat_p192_u1 = 0;
    let (x7, x8) = fiat_p192_addcarryx_u32(x6, (arg1[3]), (arg2[3]));
    let mut x9: u32 = 0;
    let mut x10: fiat_p192_u1 = 0;
    let (x9, x10) = fiat_p192_addcarryx_u32(x8, (arg1[4]), (arg2[4]));
    let mut x11: u32 = 0;
    let mut x12: fiat_p192_u1 = 0;
    let (x11, x12) = fiat_p192_addcarryx_u32(x10, (arg1[5]), (arg2[5]));
    let mut x13: u32 = 0;
    let mut x14: fiat_p192_u1 = 0;
    let (x13, x14) = fiat_p192_subborrowx_u32(0x0, x1, 0xffffffff);
    let mut x15: u32 = 0;
    let mut x16: fiat_p192_u1 = 0;
    let (x15, x16) = fiat_p192_subborrowx_u32(x14, x3, 0xffffffff);
    let mut x17: u32 = 0;
    let mut x18: fiat_p192_u1 = 0;
    let (x17, x18) = fiat_p192_subborrowx_u32(x16, x5, 0xfffffffe);
    let mut x19: u32 = 0;
    let mut x20: fiat_p192_u1 = 0;
    let (x19, x20) = fiat_p192_subborrowx_u32(x18, x7, 0xffffffff);
    let mut x21: u32 = 0;
    let mut x22: fiat_p192_u1 = 0;
    let (x21, x22) = fiat_p192_subborrowx_u32(x20, x9, 0xffffffff);
    let mut x23: u32 = 0;
    let mut x24: fiat_p192_u1 = 0;
    let (x23, x24) = fiat_p192_subborrowx_u32(x22, x11, 0xffffffff);
    let mut x25: u32 = 0;
    let mut x26: fiat_p192_u1 = 0;
    let (x25, x26) = fiat_p192_subborrowx_u32(x24, (x12 as u32), (0x0 as u32));
    let mut x27: u32 = 0;
    let (x27) = fiat_p192_cmovznz_u32(x26, x13, x1);
    let mut x28: u32 = 0;
    let (x28) = fiat_p192_cmovznz_u32(x26, x15, x3);
    let mut x29: u32 = 0;
    let (x29) = fiat_p192_cmovznz_u32(x26, x17, x5);
    let mut x30: u32 = 0;
    let (x30) = fiat_p192_cmovznz_u32(x26, x19, x7);
    let mut x31: u32 = 0;
    let (x31) = fiat_p192_cmovznz_u32(x26, x21, x9);
    let mut x32: u32 = 0;
    let (x32) = fiat_p192_cmovznz_u32(x26, x23, x11);
    out1[0] = x27;
    out1[1] = x28;
    out1[2] = x29;
    out1[3] = x30;
    out1[4] = x31;
    out1[5] = x32;
    out1
}
#[doc = " The function fiat_p192_sub subtracts two field elements in the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = "   0 ≤ eval arg2 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_p192_sub(
    arg1: &fiat_p192_montgomery_domain_field_element,
    arg2: &fiat_p192_montgomery_domain_field_element,
) -> fiat_p192_montgomery_domain_field_element {
    let mut out1: fiat_p192_montgomery_domain_field_element = [0; 6];
    let mut x1: u32 = 0;
    let mut x2: fiat_p192_u1 = 0;
    let (x1, x2) = fiat_p192_subborrowx_u32(0x0, (arg1[0]), (arg2[0]));
    let mut x3: u32 = 0;
    let mut x4: fiat_p192_u1 = 0;
    let (x3, x4) = fiat_p192_subborrowx_u32(x2, (arg1[1]), (arg2[1]));
    let mut x5: u32 = 0;
    let mut x6: fiat_p192_u1 = 0;
    let (x5, x6) = fiat_p192_subborrowx_u32(x4, (arg1[2]), (arg2[2]));
    let mut x7: u32 = 0;
    let mut x8: fiat_p192_u1 = 0;
    let (x7, x8) = fiat_p192_subborrowx_u32(x6, (arg1[3]), (arg2[3]));
    let mut x9: u32 = 0;
    let mut x10: fiat_p192_u1 = 0;
    let (x9, x10) = fiat_p192_subborrowx_u32(x8, (arg1[4]), (arg2[4]));
    let mut x11: u32 = 0;
    let mut x12: fiat_p192_u1 = 0;
    let (x11, x12) = fiat_p192_subborrowx_u32(x10, (arg1[5]), (arg2[5]));
    let mut x13: u32 = 0;
    let (x13) = fiat_p192_cmovznz_u32(x12, (0x0 as u32), 0xffffffff);
    let mut x14: u32 = 0;
    let mut x15: fiat_p192_u1 = 0;
    let (x14, x15) = fiat_p192_addcarryx_u32(0x0, x1, x13);
    let mut x16: u32 = 0;
    let mut x17: fiat_p192_u1 = 0;
    let (x16, x17) = fiat_p192_addcarryx_u32(x15, x3, x13);
    let mut x18: u32 = 0;
    let mut x19: fiat_p192_u1 = 0;
    let (x18, x19) = fiat_p192_addcarryx_u32(x17, x5, (x13 & 0xfffffffe));
    let mut x20: u32 = 0;
    let mut x21: fiat_p192_u1 = 0;
    let (x20, x21) = fiat_p192_addcarryx_u32(x19, x7, x13);
    let mut x22: u32 = 0;
    let mut x23: fiat_p192_u1 = 0;
    let (x22, x23) = fiat_p192_addcarryx_u32(x21, x9, x13);
    let mut x24: u32 = 0;
    let mut x25: fiat_p192_u1 = 0;
    let (x24, x25) = fiat_p192_addcarryx_u32(x23, x11, x13);
    out1[0] = x14;
    out1[1] = x16;
    out1[2] = x18;
    out1[3] = x20;
    out1[4] = x22;
    out1[5] = x24;
    out1
}
#[doc = " The function fiat_p192_opp negates a field element in the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_p192_opp(
    arg1: &fiat_p192_montgomery_domain_field_element,
) -> fiat_p192_montgomery_domain_field_element {
    let mut out1: fiat_p192_montgomery_domain_field_element = [0; 6];
    let mut x1: u32 = 0;
    let mut x2: fiat_p192_u1 = 0;
    let (x1, x2) = fiat_p192_subborrowx_u32(0x0, (0x0 as u32), (arg1[0]));
    let mut x3: u32 = 0;
    let mut x4: fiat_p192_u1 = 0;
    let (x3, x4) = fiat_p192_subborrowx_u32(x2, (0x0 as u32), (arg1[1]));
    let mut x5: u32 = 0;
    let mut x6: fiat_p192_u1 = 0;
    let (x5, x6) = fiat_p192_subborrowx_u32(x4, (0x0 as u32), (arg1[2]));
    let mut x7: u32 = 0;
    let mut x8: fiat_p192_u1 = 0;
    let (x7, x8) = fiat_p192_subborrowx_u32(x6, (0x0 as u32), (arg1[3]));
    let mut x9: u32 = 0;
    let mut x10: fiat_p192_u1 = 0;
    let (x9, x10) = fiat_p192_subborrowx_u32(x8, (0x0 as u32), (arg1[4]));
    let mut x11: u32 = 0;
    let mut x12: fiat_p192_u1 = 0;
    let (x11, x12) = fiat_p192_subborrowx_u32(x10, (0x0 as u32), (arg1[5]));
    let mut x13: u32 = 0;
    let (x13) = fiat_p192_cmovznz_u32(x12, (0x0 as u32), 0xffffffff);
    let mut x14: u32 = 0;
    let mut x15: fiat_p192_u1 = 0;
    let (x14, x15) = fiat_p192_addcarryx_u32(0x0, x1, x13);
    let mut x16: u32 = 0;
    let mut x17: fiat_p192_u1 = 0;
    let (x16, x17) = fiat_p192_addcarryx_u32(x15, x3, x13);
    let mut x18: u32 = 0;
    let mut x19: fiat_p192_u1 = 0;
    let (x18, x19) = fiat_p192_addcarryx_u32(x17, x5, (x13 & 0xfffffffe));
    let mut x20: u32 = 0;
    let mut x21: fiat_p192_u1 = 0;
    let (x20, x21) = fiat_p192_addcarryx_u32(x19, x7, x13);
    let mut x22: u32 = 0;
    let mut x23: fiat_p192_u1 = 0;
    let (x22, x23) = fiat_p192_addcarryx_u32(x21, x9, x13);
    let mut x24: u32 = 0;
    let mut x25: fiat_p192_u1 = 0;
    let (x24, x25) = fiat_p192_addcarryx_u32(x23, x11, x13);
    out1[0] = x14;
    out1[1] = x16;
    out1[2] = x18;
    out1[3] = x20;
    out1[4] = x22;
    out1[5] = x24;
    out1
}
#[doc = " The function fiat_p192_from_montgomery translates a field element out of the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^6) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_p192_from_montgomery(
    arg1: &fiat_p192_montgomery_domain_field_element,
) -> fiat_p192_non_montgomery_domain_field_element {
    let mut out1: fiat_p192_non_montgomery_domain_field_element = [0; 6];
    let x1: u32 = (arg1[0]);
    let mut x2: u32 = 0;
    let mut x3: u32 = 0;
    let (x2, x3) = fiat_p192_mulx_u32(x1, 0xffffffff);
    let mut x4: u32 = 0;
    let mut x5: u32 = 0;
    let (x4, x5) = fiat_p192_mulx_u32(x1, 0xffffffff);
    let mut x6: u32 = 0;
    let mut x7: u32 = 0;
    let (x6, x7) = fiat_p192_mulx_u32(x1, 0xffffffff);
    let mut x8: u32 = 0;
    let mut x9: u32 = 0;
    let (x8, x9) = fiat_p192_mulx_u32(x1, 0xfffffffe);
    let mut x10: u32 = 0;
    let mut x11: u32 = 0;
    let (x10, x11) = fiat_p192_mulx_u32(x1, 0xffffffff);
    let mut x12: u32 = 0;
    let mut x13: u32 = 0;
    let (x12, x13) = fiat_p192_mulx_u32(x1, 0xffffffff);
    let mut x14: u32 = 0;
    let mut x15: fiat_p192_u1 = 0;
    let (x14, x15) = fiat_p192_addcarryx_u32(0x0, x13, x10);
    let mut x16: u32 = 0;
    let mut x17: fiat_p192_u1 = 0;
    let (x16, x17) = fiat_p192_addcarryx_u32(x15, x11, x8);
    let mut x18: u32 = 0;
    let mut x19: fiat_p192_u1 = 0;
    let (x18, x19) = fiat_p192_addcarryx_u32(x17, x9, x6);
    let mut x20: u32 = 0;
    let mut x21: fiat_p192_u1 = 0;
    let (x20, x21) = fiat_p192_addcarryx_u32(x19, x7, x4);
    let mut x22: u32 = 0;
    let mut x23: fiat_p192_u1 = 0;
    let (x22, x23) = fiat_p192_addcarryx_u32(x21, x5, x2);
    let mut x24: u32 = 0;
    let mut x25: fiat_p192_u1 = 0;
    let (x24, x25) = fiat_p192_addcarryx_u32(0x0, x1, x12);
    let mut x26: u32 = 0;
    let mut x27: fiat_p192_u1 = 0;
    let (x26, x27) = fiat_p192_addcarryx_u32(x25, (0x0 as u32), x14);
    let mut x28: u32 = 0;
    let mut x29: fiat_p192_u1 = 0;
    let (x28, x29) = fiat_p192_addcarryx_u32(x27, (0x0 as u32), x16);
    let mut x30: u32 = 0;
    let mut x31: fiat_p192_u1 = 0;
    let (x30, x31) = fiat_p192_addcarryx_u32(x29, (0x0 as u32), x18);
    let mut x32: u32 = 0;
    let mut x33: fiat_p192_u1 = 0;
    let (x32, x33) = fiat_p192_addcarryx_u32(x31, (0x0 as u32), x20);
    let mut x34: u32 = 0;
    let mut x35: fiat_p192_u1 = 0;
    let (x34, x35) = fiat_p192_addcarryx_u32(x33, (0x0 as u32), x22);
    let mut x36: u32 = 0;
    let mut x37: fiat_p192_u1 = 0;
    let (x36, x37) = fiat_p192_addcarryx_u32(x35, (0x0 as u32), ((x23 as u32) + x3));
    let mut x38: u32 = 0;
    let mut x39: fiat_p192_u1 = 0;
    let (x38, x39) = fiat_p192_addcarryx_u32(0x0, x26, (arg1[1]));
    let mut x40: u32 = 0;
    let mut x41: fiat_p192_u1 = 0;
    let (x40, x41) = fiat_p192_addcarryx_u32(x39, x28, (0x0 as u32));
    let mut x42: u32 = 0;
    let mut x43: fiat_p192_u1 = 0;
    let (x42, x43) = fiat_p192_addcarryx_u32(x41, x30, (0x0 as u32));
    let mut x44: u32 = 0;
    let mut x45: fiat_p192_u1 = 0;
    let (x44, x45) = fiat_p192_addcarryx_u32(x43, x32, (0x0 as u32));
    let mut x46: u32 = 0;
    let mut x47: fiat_p192_u1 = 0;
    let (x46, x47) = fiat_p192_addcarryx_u32(x45, x34, (0x0 as u32));
    let mut x48: u32 = 0;
    let mut x49: fiat_p192_u1 = 0;
    let (x48, x49) = fiat_p192_addcarryx_u32(x47, x36, (0x0 as u32));
    let mut x50: u32 = 0;
    let mut x51: u32 = 0;
    let (x50, x51) = fiat_p192_mulx_u32(x38, 0xffffffff);
    let mut x52: u32 = 0;
    let mut x53: u32 = 0;
    let (x52, x53) = fiat_p192_mulx_u32(x38, 0xffffffff);
    let mut x54: u32 = 0;
    let mut x55: u32 = 0;
    let (x54, x55) = fiat_p192_mulx_u32(x38, 0xffffffff);
    let mut x56: u32 = 0;
    let mut x57: u32 = 0;
    let (x56, x57) = fiat_p192_mulx_u32(x38, 0xfffffffe);
    let mut x58: u32 = 0;
    let mut x59: u32 = 0;
    let (x58, x59) = fiat_p192_mulx_u32(x38, 0xffffffff);
    let mut x60: u32 = 0;
    let mut x61: u32 = 0;
    let (x60, x61) = fiat_p192_mulx_u32(x38, 0xffffffff);
    let mut x62: u32 = 0;
    let mut x63: fiat_p192_u1 = 0;
    let (x62, x63) = fiat_p192_addcarryx_u32(0x0, x61, x58);
    let mut x64: u32 = 0;
    let mut x65: fiat_p192_u1 = 0;
    let (x64, x65) = fiat_p192_addcarryx_u32(x63, x59, x56);
    let mut x66: u32 = 0;
    let mut x67: fiat_p192_u1 = 0;
    let (x66, x67) = fiat_p192_addcarryx_u32(x65, x57, x54);
    let mut x68: u32 = 0;
    let mut x69: fiat_p192_u1 = 0;
    let (x68, x69) = fiat_p192_addcarryx_u32(x67, x55, x52);
    let mut x70: u32 = 0;
    let mut x71: fiat_p192_u1 = 0;
    let (x70, x71) = fiat_p192_addcarryx_u32(x69, x53, x50);
    let mut x72: u32 = 0;
    let mut x73: fiat_p192_u1 = 0;
    let (x72, x73) = fiat_p192_addcarryx_u32(0x0, x38, x60);
    let mut x74: u32 = 0;
    let mut x75: fiat_p192_u1 = 0;
    let (x74, x75) = fiat_p192_addcarryx_u32(x73, x40, x62);
    let mut x76: u32 = 0;
    let mut x77: fiat_p192_u1 = 0;
    let (x76, x77) = fiat_p192_addcarryx_u32(x75, x42, x64);
    let mut x78: u32 = 0;
    let mut x79: fiat_p192_u1 = 0;
    let (x78, x79) = fiat_p192_addcarryx_u32(x77, x44, x66);
    let mut x80: u32 = 0;
    let mut x81: fiat_p192_u1 = 0;
    let (x80, x81) = fiat_p192_addcarryx_u32(x79, x46, x68);
    let mut x82: u32 = 0;
    let mut x83: fiat_p192_u1 = 0;
    let (x82, x83) = fiat_p192_addcarryx_u32(x81, x48, x70);
    let mut x84: u32 = 0;
    let mut x85: fiat_p192_u1 = 0;
    let (x84, x85) =
        fiat_p192_addcarryx_u32(x83, ((x49 as u32) + (x37 as u32)), ((x71 as u32) + x51));
    let mut x86: u32 = 0;
    let mut x87: fiat_p192_u1 = 0;
    let (x86, x87) = fiat_p192_addcarryx_u32(0x0, x74, (arg1[2]));
    let mut x88: u32 = 0;
    let mut x89: fiat_p192_u1 = 0;
    let (x88, x89) = fiat_p192_addcarryx_u32(x87, x76, (0x0 as u32));
    let mut x90: u32 = 0;
    let mut x91: fiat_p192_u1 = 0;
    let (x90, x91) = fiat_p192_addcarryx_u32(x89, x78, (0x0 as u32));
    let mut x92: u32 = 0;
    let mut x93: fiat_p192_u1 = 0;
    let (x92, x93) = fiat_p192_addcarryx_u32(x91, x80, (0x0 as u32));
    let mut x94: u32 = 0;
    let mut x95: fiat_p192_u1 = 0;
    let (x94, x95) = fiat_p192_addcarryx_u32(x93, x82, (0x0 as u32));
    let mut x96: u32 = 0;
    let mut x97: fiat_p192_u1 = 0;
    let (x96, x97) = fiat_p192_addcarryx_u32(x95, x84, (0x0 as u32));
    let mut x98: u32 = 0;
    let mut x99: u32 = 0;
    let (x98, x99) = fiat_p192_mulx_u32(x86, 0xffffffff);
    let mut x100: u32 = 0;
    let mut x101: u32 = 0;
    let (x100, x101) = fiat_p192_mulx_u32(x86, 0xffffffff);
    let mut x102: u32 = 0;
    let mut x103: u32 = 0;
    let (x102, x103) = fiat_p192_mulx_u32(x86, 0xffffffff);
    let mut x104: u32 = 0;
    let mut x105: u32 = 0;
    let (x104, x105) = fiat_p192_mulx_u32(x86, 0xfffffffe);
    let mut x106: u32 = 0;
    let mut x107: u32 = 0;
    let (x106, x107) = fiat_p192_mulx_u32(x86, 0xffffffff);
    let mut x108: u32 = 0;
    let mut x109: u32 = 0;
    let (x108, x109) = fiat_p192_mulx_u32(x86, 0xffffffff);
    let mut x110: u32 = 0;
    let mut x111: fiat_p192_u1 = 0;
    let (x110, x111) = fiat_p192_addcarryx_u32(0x0, x109, x106);
    let mut x112: u32 = 0;
    let mut x113: fiat_p192_u1 = 0;
    let (x112, x113) = fiat_p192_addcarryx_u32(x111, x107, x104);
    let mut x114: u32 = 0;
    let mut x115: fiat_p192_u1 = 0;
    let (x114, x115) = fiat_p192_addcarryx_u32(x113, x105, x102);
    let mut x116: u32 = 0;
    let mut x117: fiat_p192_u1 = 0;
    let (x116, x117) = fiat_p192_addcarryx_u32(x115, x103, x100);
    let mut x118: u32 = 0;
    let mut x119: fiat_p192_u1 = 0;
    let (x118, x119) = fiat_p192_addcarryx_u32(x117, x101, x98);
    let mut x120: u32 = 0;
    let mut x121: fiat_p192_u1 = 0;
    let (x120, x121) = fiat_p192_addcarryx_u32(0x0, x86, x108);
    let mut x122: u32 = 0;
    let mut x123: fiat_p192_u1 = 0;
    let (x122, x123) = fiat_p192_addcarryx_u32(x121, x88, x110);
    let mut x124: u32 = 0;
    let mut x125: fiat_p192_u1 = 0;
    let (x124, x125) = fiat_p192_addcarryx_u32(x123, x90, x112);
    let mut x126: u32 = 0;
    let mut x127: fiat_p192_u1 = 0;
    let (x126, x127) = fiat_p192_addcarryx_u32(x125, x92, x114);
    let mut x128: u32 = 0;
    let mut x129: fiat_p192_u1 = 0;
    let (x128, x129) = fiat_p192_addcarryx_u32(x127, x94, x116);
    let mut x130: u32 = 0;
    let mut x131: fiat_p192_u1 = 0;
    let (x130, x131) = fiat_p192_addcarryx_u32(x129, x96, x118);
    let mut x132: u32 = 0;
    let mut x133: fiat_p192_u1 = 0;
    let (x132, x133) =
        fiat_p192_addcarryx_u32(x131, ((x97 as u32) + (x85 as u32)), ((x119 as u32) + x99));
    let mut x134: u32 = 0;
    let mut x135: fiat_p192_u1 = 0;
    let (x134, x135) = fiat_p192_addcarryx_u32(0x0, x122, (arg1[3]));
    let mut x136: u32 = 0;
    let mut x137: fiat_p192_u1 = 0;
    let (x136, x137) = fiat_p192_addcarryx_u32(x135, x124, (0x0 as u32));
    let mut x138: u32 = 0;
    let mut x139: fiat_p192_u1 = 0;
    let (x138, x139) = fiat_p192_addcarryx_u32(x137, x126, (0x0 as u32));
    let mut x140: u32 = 0;
    let mut x141: fiat_p192_u1 = 0;
    let (x140, x141) = fiat_p192_addcarryx_u32(x139, x128, (0x0 as u32));
    let mut x142: u32 = 0;
    let mut x143: fiat_p192_u1 = 0;
    let (x142, x143) = fiat_p192_addcarryx_u32(x141, x130, (0x0 as u32));
    let mut x144: u32 = 0;
    let mut x145: fiat_p192_u1 = 0;
    let (x144, x145) = fiat_p192_addcarryx_u32(x143, x132, (0x0 as u32));
    let mut x146: u32 = 0;
    let mut x147: u32 = 0;
    let (x146, x147) = fiat_p192_mulx_u32(x134, 0xffffffff);
    let mut x148: u32 = 0;
    let mut x149: u32 = 0;
    let (x148, x149) = fiat_p192_mulx_u32(x134, 0xffffffff);
    let mut x150: u32 = 0;
    let mut x151: u32 = 0;
    let (x150, x151) = fiat_p192_mulx_u32(x134, 0xffffffff);
    let mut x152: u32 = 0;
    let mut x153: u32 = 0;
    let (x152, x153) = fiat_p192_mulx_u32(x134, 0xfffffffe);
    let mut x154: u32 = 0;
    let mut x155: u32 = 0;
    let (x154, x155) = fiat_p192_mulx_u32(x134, 0xffffffff);
    let mut x156: u32 = 0;
    let mut x157: u32 = 0;
    let (x156, x157) = fiat_p192_mulx_u32(x134, 0xffffffff);
    let mut x158: u32 = 0;
    let mut x159: fiat_p192_u1 = 0;
    let (x158, x159) = fiat_p192_addcarryx_u32(0x0, x157, x154);
    let mut x160: u32 = 0;
    let mut x161: fiat_p192_u1 = 0;
    let (x160, x161) = fiat_p192_addcarryx_u32(x159, x155, x152);
    let mut x162: u32 = 0;
    let mut x163: fiat_p192_u1 = 0;
    let (x162, x163) = fiat_p192_addcarryx_u32(x161, x153, x150);
    let mut x164: u32 = 0;
    let mut x165: fiat_p192_u1 = 0;
    let (x164, x165) = fiat_p192_addcarryx_u32(x163, x151, x148);
    let mut x166: u32 = 0;
    let mut x167: fiat_p192_u1 = 0;
    let (x166, x167) = fiat_p192_addcarryx_u32(x165, x149, x146);
    let mut x168: u32 = 0;
    let mut x169: fiat_p192_u1 = 0;
    let (x168, x169) = fiat_p192_addcarryx_u32(0x0, x134, x156);
    let mut x170: u32 = 0;
    let mut x171: fiat_p192_u1 = 0;
    let (x170, x171) = fiat_p192_addcarryx_u32(x169, x136, x158);
    let mut x172: u32 = 0;
    let mut x173: fiat_p192_u1 = 0;
    let (x172, x173) = fiat_p192_addcarryx_u32(x171, x138, x160);
    let mut x174: u32 = 0;
    let mut x175: fiat_p192_u1 = 0;
    let (x174, x175) = fiat_p192_addcarryx_u32(x173, x140, x162);
    let mut x176: u32 = 0;
    let mut x177: fiat_p192_u1 = 0;
    let (x176, x177) = fiat_p192_addcarryx_u32(x175, x142, x164);
    let mut x178: u32 = 0;
    let mut x179: fiat_p192_u1 = 0;
    let (x178, x179) = fiat_p192_addcarryx_u32(x177, x144, x166);
    let mut x180: u32 = 0;
    let mut x181: fiat_p192_u1 = 0;
    let (x180, x181) = fiat_p192_addcarryx_u32(
        x179,
        ((x145 as u32) + (x133 as u32)),
        ((x167 as u32) + x147),
    );
    let mut x182: u32 = 0;
    let mut x183: fiat_p192_u1 = 0;
    let (x182, x183) = fiat_p192_addcarryx_u32(0x0, x170, (arg1[4]));
    let mut x184: u32 = 0;
    let mut x185: fiat_p192_u1 = 0;
    let (x184, x185) = fiat_p192_addcarryx_u32(x183, x172, (0x0 as u32));
    let mut x186: u32 = 0;
    let mut x187: fiat_p192_u1 = 0;
    let (x186, x187) = fiat_p192_addcarryx_u32(x185, x174, (0x0 as u32));
    let mut x188: u32 = 0;
    let mut x189: fiat_p192_u1 = 0;
    let (x188, x189) = fiat_p192_addcarryx_u32(x187, x176, (0x0 as u32));
    let mut x190: u32 = 0;
    let mut x191: fiat_p192_u1 = 0;
    let (x190, x191) = fiat_p192_addcarryx_u32(x189, x178, (0x0 as u32));
    let mut x192: u32 = 0;
    let mut x193: fiat_p192_u1 = 0;
    let (x192, x193) = fiat_p192_addcarryx_u32(x191, x180, (0x0 as u32));
    let mut x194: u32 = 0;
    let mut x195: u32 = 0;
    let (x194, x195) = fiat_p192_mulx_u32(x182, 0xffffffff);
    let mut x196: u32 = 0;
    let mut x197: u32 = 0;
    let (x196, x197) = fiat_p192_mulx_u32(x182, 0xffffffff);
    let mut x198: u32 = 0;
    let mut x199: u32 = 0;
    let (x198, x199) = fiat_p192_mulx_u32(x182, 0xffffffff);
    let mut x200: u32 = 0;
    let mut x201: u32 = 0;
    let (x200, x201) = fiat_p192_mulx_u32(x182, 0xfffffffe);
    let mut x202: u32 = 0;
    let mut x203: u32 = 0;
    let (x202, x203) = fiat_p192_mulx_u32(x182, 0xffffffff);
    let mut x204: u32 = 0;
    let mut x205: u32 = 0;
    let (x204, x205) = fiat_p192_mulx_u32(x182, 0xffffffff);
    let mut x206: u32 = 0;
    let mut x207: fiat_p192_u1 = 0;
    let (x206, x207) = fiat_p192_addcarryx_u32(0x0, x205, x202);
    let mut x208: u32 = 0;
    let mut x209: fiat_p192_u1 = 0;
    let (x208, x209) = fiat_p192_addcarryx_u32(x207, x203, x200);
    let mut x210: u32 = 0;
    let mut x211: fiat_p192_u1 = 0;
    let (x210, x211) = fiat_p192_addcarryx_u32(x209, x201, x198);
    let mut x212: u32 = 0;
    let mut x213: fiat_p192_u1 = 0;
    let (x212, x213) = fiat_p192_addcarryx_u32(x211, x199, x196);
    let mut x214: u32 = 0;
    let mut x215: fiat_p192_u1 = 0;
    let (x214, x215) = fiat_p192_addcarryx_u32(x213, x197, x194);
    let mut x216: u32 = 0;
    let mut x217: fiat_p192_u1 = 0;
    let (x216, x217) = fiat_p192_addcarryx_u32(0x0, x182, x204);
    let mut x218: u32 = 0;
    let mut x219: fiat_p192_u1 = 0;
    let (x218, x219) = fiat_p192_addcarryx_u32(x217, x184, x206);
    let mut x220: u32 = 0;
    let mut x221: fiat_p192_u1 = 0;
    let (x220, x221) = fiat_p192_addcarryx_u32(x219, x186, x208);
    let mut x222: u32 = 0;
    let mut x223: fiat_p192_u1 = 0;
    let (x222, x223) = fiat_p192_addcarryx_u32(x221, x188, x210);
    let mut x224: u32 = 0;
    let mut x225: fiat_p192_u1 = 0;
    let (x224, x225) = fiat_p192_addcarryx_u32(x223, x190, x212);
    let mut x226: u32 = 0;
    let mut x227: fiat_p192_u1 = 0;
    let (x226, x227) = fiat_p192_addcarryx_u32(x225, x192, x214);
    let mut x228: u32 = 0;
    let mut x229: fiat_p192_u1 = 0;
    let (x228, x229) = fiat_p192_addcarryx_u32(
        x227,
        ((x193 as u32) + (x181 as u32)),
        ((x215 as u32) + x195),
    );
    let mut x230: u32 = 0;
    let mut x231: fiat_p192_u1 = 0;
    let (x230, x231) = fiat_p192_addcarryx_u32(0x0, x218, (arg1[5]));
    let mut x232: u32 = 0;
    let mut x233: fiat_p192_u1 = 0;
    let (x232, x233) = fiat_p192_addcarryx_u32(x231, x220, (0x0 as u32));
    let mut x234: u32 = 0;
    let mut x235: fiat_p192_u1 = 0;
    let (x234, x235) = fiat_p192_addcarryx_u32(x233, x222, (0x0 as u32));
    let mut x236: u32 = 0;
    let mut x237: fiat_p192_u1 = 0;
    let (x236, x237) = fiat_p192_addcarryx_u32(x235, x224, (0x0 as u32));
    let mut x238: u32 = 0;
    let mut x239: fiat_p192_u1 = 0;
    let (x238, x239) = fiat_p192_addcarryx_u32(x237, x226, (0x0 as u32));
    let mut x240: u32 = 0;
    let mut x241: fiat_p192_u1 = 0;
    let (x240, x241) = fiat_p192_addcarryx_u32(x239, x228, (0x0 as u32));
    let mut x242: u32 = 0;
    let mut x243: u32 = 0;
    let (x242, x243) = fiat_p192_mulx_u32(x230, 0xffffffff);
    let mut x244: u32 = 0;
    let mut x245: u32 = 0;
    let (x244, x245) = fiat_p192_mulx_u32(x230, 0xffffffff);
    let mut x246: u32 = 0;
    let mut x247: u32 = 0;
    let (x246, x247) = fiat_p192_mulx_u32(x230, 0xffffffff);
    let mut x248: u32 = 0;
    let mut x249: u32 = 0;
    let (x248, x249) = fiat_p192_mulx_u32(x230, 0xfffffffe);
    let mut x250: u32 = 0;
    let mut x251: u32 = 0;
    let (x250, x251) = fiat_p192_mulx_u32(x230, 0xffffffff);
    let mut x252: u32 = 0;
    let mut x253: u32 = 0;
    let (x252, x253) = fiat_p192_mulx_u32(x230, 0xffffffff);
    let mut x254: u32 = 0;
    let mut x255: fiat_p192_u1 = 0;
    let (x254, x255) = fiat_p192_addcarryx_u32(0x0, x253, x250);
    let mut x256: u32 = 0;
    let mut x257: fiat_p192_u1 = 0;
    let (x256, x257) = fiat_p192_addcarryx_u32(x255, x251, x248);
    let mut x258: u32 = 0;
    let mut x259: fiat_p192_u1 = 0;
    let (x258, x259) = fiat_p192_addcarryx_u32(x257, x249, x246);
    let mut x260: u32 = 0;
    let mut x261: fiat_p192_u1 = 0;
    let (x260, x261) = fiat_p192_addcarryx_u32(x259, x247, x244);
    let mut x262: u32 = 0;
    let mut x263: fiat_p192_u1 = 0;
    let (x262, x263) = fiat_p192_addcarryx_u32(x261, x245, x242);
    let mut x264: u32 = 0;
    let mut x265: fiat_p192_u1 = 0;
    let (x264, x265) = fiat_p192_addcarryx_u32(0x0, x230, x252);
    let mut x266: u32 = 0;
    let mut x267: fiat_p192_u1 = 0;
    let (x266, x267) = fiat_p192_addcarryx_u32(x265, x232, x254);
    let mut x268: u32 = 0;
    let mut x269: fiat_p192_u1 = 0;
    let (x268, x269) = fiat_p192_addcarryx_u32(x267, x234, x256);
    let mut x270: u32 = 0;
    let mut x271: fiat_p192_u1 = 0;
    let (x270, x271) = fiat_p192_addcarryx_u32(x269, x236, x258);
    let mut x272: u32 = 0;
    let mut x273: fiat_p192_u1 = 0;
    let (x272, x273) = fiat_p192_addcarryx_u32(x271, x238, x260);
    let mut x274: u32 = 0;
    let mut x275: fiat_p192_u1 = 0;
    let (x274, x275) = fiat_p192_addcarryx_u32(x273, x240, x262);
    let mut x276: u32 = 0;
    let mut x277: fiat_p192_u1 = 0;
    let (x276, x277) = fiat_p192_addcarryx_u32(
        x275,
        ((x241 as u32) + (x229 as u32)),
        ((x263 as u32) + x243),
    );
    let mut x278: u32 = 0;
    let mut x279: fiat_p192_u1 = 0;
    let (x278, x279) = fiat_p192_subborrowx_u32(0x0, x266, 0xffffffff);
    let mut x280: u32 = 0;
    let mut x281: fiat_p192_u1 = 0;
    let (x280, x281) = fiat_p192_subborrowx_u32(x279, x268, 0xffffffff);
    let mut x282: u32 = 0;
    let mut x283: fiat_p192_u1 = 0;
    let (x282, x283) = fiat_p192_subborrowx_u32(x281, x270, 0xfffffffe);
    let mut x284: u32 = 0;
    let mut x285: fiat_p192_u1 = 0;
    let (x284, x285) = fiat_p192_subborrowx_u32(x283, x272, 0xffffffff);
    let mut x286: u32 = 0;
    let mut x287: fiat_p192_u1 = 0;
    let (x286, x287) = fiat_p192_subborrowx_u32(x285, x274, 0xffffffff);
    let mut x288: u32 = 0;
    let mut x289: fiat_p192_u1 = 0;
    let (x288, x289) = fiat_p192_subborrowx_u32(x287, x276, 0xffffffff);
    let mut x290: u32 = 0;
    let mut x291: fiat_p192_u1 = 0;
    let (x290, x291) = fiat_p192_subborrowx_u32(x289, (x277 as u32), (0x0 as u32));
    let mut x292: u32 = 0;
    let (x292) = fiat_p192_cmovznz_u32(x291, x278, x266);
    let mut x293: u32 = 0;
    let (x293) = fiat_p192_cmovznz_u32(x291, x280, x268);
    let mut x294: u32 = 0;
    let (x294) = fiat_p192_cmovznz_u32(x291, x282, x270);
    let mut x295: u32 = 0;
    let (x295) = fiat_p192_cmovznz_u32(x291, x284, x272);
    let mut x296: u32 = 0;
    let (x296) = fiat_p192_cmovznz_u32(x291, x286, x274);
    let mut x297: u32 = 0;
    let (x297) = fiat_p192_cmovznz_u32(x291, x288, x276);
    out1[0] = x292;
    out1[1] = x293;
    out1[2] = x294;
    out1[3] = x295;
    out1[4] = x296;
    out1[5] = x297;
    out1
}
#[doc = " The function fiat_p192_to_montgomery translates a field element into the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = eval arg1 mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_p192_to_montgomery(
    arg1: &fiat_p192_non_montgomery_domain_field_element,
) -> fiat_p192_montgomery_domain_field_element {
    let mut out1: fiat_p192_montgomery_domain_field_element = [0; 6];
    let x1: u32 = (arg1[1]);
    let x2: u32 = (arg1[2]);
    let x3: u32 = (arg1[3]);
    let x4: u32 = (arg1[4]);
    let x5: u32 = (arg1[5]);
    let x6: u32 = (arg1[0]);
    let mut x7: u32 = 0;
    let mut x8: u32 = 0;
    let (x7, x8) = fiat_p192_mulx_u32(x6, 0x2);
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    let (x9, x10) = fiat_p192_mulx_u32(x6, 0xffffffff);
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    let (x11, x12) = fiat_p192_mulx_u32(x6, 0xffffffff);
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    let (x13, x14) = fiat_p192_mulx_u32(x6, 0xffffffff);
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    let (x15, x16) = fiat_p192_mulx_u32(x6, 0xfffffffe);
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    let (x17, x18) = fiat_p192_mulx_u32(x6, 0xffffffff);
    let mut x19: u32 = 0;
    let mut x20: u32 = 0;
    let (x19, x20) = fiat_p192_mulx_u32(x6, 0xffffffff);
    let mut x21: u32 = 0;
    let mut x22: fiat_p192_u1 = 0;
    let (x21, x22) = fiat_p192_addcarryx_u32(0x0, x20, x17);
    let mut x23: u32 = 0;
    let mut x24: fiat_p192_u1 = 0;
    let (x23, x24) = fiat_p192_addcarryx_u32(x22, x18, x15);
    let mut x25: u32 = 0;
    let mut x26: fiat_p192_u1 = 0;
    let (x25, x26) = fiat_p192_addcarryx_u32(x24, x16, x13);
    let mut x27: u32 = 0;
    let mut x28: fiat_p192_u1 = 0;
    let (x27, x28) = fiat_p192_addcarryx_u32(x26, x14, x11);
    let mut x29: u32 = 0;
    let mut x30: fiat_p192_u1 = 0;
    let (x29, x30) = fiat_p192_addcarryx_u32(x28, x12, x9);
    let mut x31: u32 = 0;
    let mut x32: fiat_p192_u1 = 0;
    let (x31, x32) = fiat_p192_addcarryx_u32(0x0, x6, x19);
    let mut x33: u32 = 0;
    let mut x34: fiat_p192_u1 = 0;
    let (x33, x34) = fiat_p192_addcarryx_u32(x32, (0x0 as u32), x21);
    let mut x35: u32 = 0;
    let mut x36: fiat_p192_u1 = 0;
    let (x35, x36) = fiat_p192_addcarryx_u32(x34, x7, x23);
    let mut x37: u32 = 0;
    let mut x38: fiat_p192_u1 = 0;
    let (x37, x38) = fiat_p192_addcarryx_u32(x36, ((x8 as fiat_p192_u1) as u32), x25);
    let mut x39: u32 = 0;
    let mut x40: fiat_p192_u1 = 0;
    let (x39, x40) = fiat_p192_addcarryx_u32(x38, x6, x27);
    let mut x41: u32 = 0;
    let mut x42: fiat_p192_u1 = 0;
    let (x41, x42) = fiat_p192_addcarryx_u32(x40, (0x0 as u32), x29);
    let mut x43: u32 = 0;
    let mut x44: fiat_p192_u1 = 0;
    let (x43, x44) = fiat_p192_addcarryx_u32(x42, (0x0 as u32), ((x30 as u32) + x10));
    let mut x45: u32 = 0;
    let mut x46: u32 = 0;
    let (x45, x46) = fiat_p192_mulx_u32(x1, 0x2);
    let mut x47: u32 = 0;
    let mut x48: fiat_p192_u1 = 0;
    let (x47, x48) = fiat_p192_addcarryx_u32(0x0, x33, x1);
    let mut x49: u32 = 0;
    let mut x50: fiat_p192_u1 = 0;
    let (x49, x50) = fiat_p192_addcarryx_u32(x48, x35, (0x0 as u32));
    let mut x51: u32 = 0;
    let mut x52: fiat_p192_u1 = 0;
    let (x51, x52) = fiat_p192_addcarryx_u32(x50, x37, x45);
    let mut x53: u32 = 0;
    let mut x54: fiat_p192_u1 = 0;
    let (x53, x54) = fiat_p192_addcarryx_u32(x52, x39, ((x46 as fiat_p192_u1) as u32));
    let mut x55: u32 = 0;
    let mut x56: fiat_p192_u1 = 0;
    let (x55, x56) = fiat_p192_addcarryx_u32(x54, x41, x1);
    let mut x57: u32 = 0;
    let mut x58: fiat_p192_u1 = 0;
    let (x57, x58) = fiat_p192_addcarryx_u32(x56, x43, (0x0 as u32));
    let mut x59: u32 = 0;
    let mut x60: u32 = 0;
    let (x59, x60) = fiat_p192_mulx_u32(x47, 0xffffffff);
    let mut x61: u32 = 0;
    let mut x62: u32 = 0;
    let (x61, x62) = fiat_p192_mulx_u32(x47, 0xffffffff);
    let mut x63: u32 = 0;
    let mut x64: u32 = 0;
    let (x63, x64) = fiat_p192_mulx_u32(x47, 0xffffffff);
    let mut x65: u32 = 0;
    let mut x66: u32 = 0;
    let (x65, x66) = fiat_p192_mulx_u32(x47, 0xfffffffe);
    let mut x67: u32 = 0;
    let mut x68: u32 = 0;
    let (x67, x68) = fiat_p192_mulx_u32(x47, 0xffffffff);
    let mut x69: u32 = 0;
    let mut x70: u32 = 0;
    let (x69, x70) = fiat_p192_mulx_u32(x47, 0xffffffff);
    let mut x71: u32 = 0;
    let mut x72: fiat_p192_u1 = 0;
    let (x71, x72) = fiat_p192_addcarryx_u32(0x0, x70, x67);
    let mut x73: u32 = 0;
    let mut x74: fiat_p192_u1 = 0;
    let (x73, x74) = fiat_p192_addcarryx_u32(x72, x68, x65);
    let mut x75: u32 = 0;
    let mut x76: fiat_p192_u1 = 0;
    let (x75, x76) = fiat_p192_addcarryx_u32(x74, x66, x63);
    let mut x77: u32 = 0;
    let mut x78: fiat_p192_u1 = 0;
    let (x77, x78) = fiat_p192_addcarryx_u32(x76, x64, x61);
    let mut x79: u32 = 0;
    let mut x80: fiat_p192_u1 = 0;
    let (x79, x80) = fiat_p192_addcarryx_u32(x78, x62, x59);
    let mut x81: u32 = 0;
    let mut x82: fiat_p192_u1 = 0;
    let (x81, x82) = fiat_p192_addcarryx_u32(0x0, x47, x69);
    let mut x83: u32 = 0;
    let mut x84: fiat_p192_u1 = 0;
    let (x83, x84) = fiat_p192_addcarryx_u32(x82, x49, x71);
    let mut x85: u32 = 0;
    let mut x86: fiat_p192_u1 = 0;
    let (x85, x86) = fiat_p192_addcarryx_u32(x84, x51, x73);
    let mut x87: u32 = 0;
    let mut x88: fiat_p192_u1 = 0;
    let (x87, x88) = fiat_p192_addcarryx_u32(x86, x53, x75);
    let mut x89: u32 = 0;
    let mut x90: fiat_p192_u1 = 0;
    let (x89, x90) = fiat_p192_addcarryx_u32(x88, x55, x77);
    let mut x91: u32 = 0;
    let mut x92: fiat_p192_u1 = 0;
    let (x91, x92) = fiat_p192_addcarryx_u32(x90, x57, x79);
    let mut x93: u32 = 0;
    let mut x94: fiat_p192_u1 = 0;
    let (x93, x94) =
        fiat_p192_addcarryx_u32(x92, ((x58 as u32) + (x44 as u32)), ((x80 as u32) + x60));
    let mut x95: u32 = 0;
    let mut x96: u32 = 0;
    let (x95, x96) = fiat_p192_mulx_u32(x2, 0x2);
    let mut x97: u32 = 0;
    let mut x98: fiat_p192_u1 = 0;
    let (x97, x98) = fiat_p192_addcarryx_u32(0x0, x83, x2);
    let mut x99: u32 = 0;
    let mut x100: fiat_p192_u1 = 0;
    let (x99, x100) = fiat_p192_addcarryx_u32(x98, x85, (0x0 as u32));
    let mut x101: u32 = 0;
    let mut x102: fiat_p192_u1 = 0;
    let (x101, x102) = fiat_p192_addcarryx_u32(x100, x87, x95);
    let mut x103: u32 = 0;
    let mut x104: fiat_p192_u1 = 0;
    let (x103, x104) = fiat_p192_addcarryx_u32(x102, x89, ((x96 as fiat_p192_u1) as u32));
    let mut x105: u32 = 0;
    let mut x106: fiat_p192_u1 = 0;
    let (x105, x106) = fiat_p192_addcarryx_u32(x104, x91, x2);
    let mut x107: u32 = 0;
    let mut x108: fiat_p192_u1 = 0;
    let (x107, x108) = fiat_p192_addcarryx_u32(x106, x93, (0x0 as u32));
    let mut x109: u32 = 0;
    let mut x110: u32 = 0;
    let (x109, x110) = fiat_p192_mulx_u32(x97, 0xffffffff);
    let mut x111: u32 = 0;
    let mut x112: u32 = 0;
    let (x111, x112) = fiat_p192_mulx_u32(x97, 0xffffffff);
    let mut x113: u32 = 0;
    let mut x114: u32 = 0;
    let (x113, x114) = fiat_p192_mulx_u32(x97, 0xffffffff);
    let mut x115: u32 = 0;
    let mut x116: u32 = 0;
    let (x115, x116) = fiat_p192_mulx_u32(x97, 0xfffffffe);
    let mut x117: u32 = 0;
    let mut x118: u32 = 0;
    let (x117, x118) = fiat_p192_mulx_u32(x97, 0xffffffff);
    let mut x119: u32 = 0;
    let mut x120: u32 = 0;
    let (x119, x120) = fiat_p192_mulx_u32(x97, 0xffffffff);
    let mut x121: u32 = 0;
    let mut x122: fiat_p192_u1 = 0;
    let (x121, x122) = fiat_p192_addcarryx_u32(0x0, x120, x117);
    let mut x123: u32 = 0;
    let mut x124: fiat_p192_u1 = 0;
    let (x123, x124) = fiat_p192_addcarryx_u32(x122, x118, x115);
    let mut x125: u32 = 0;
    let mut x126: fiat_p192_u1 = 0;
    let (x125, x126) = fiat_p192_addcarryx_u32(x124, x116, x113);
    let mut x127: u32 = 0;
    let mut x128: fiat_p192_u1 = 0;
    let (x127, x128) = fiat_p192_addcarryx_u32(x126, x114, x111);
    let mut x129: u32 = 0;
    let mut x130: fiat_p192_u1 = 0;
    let (x129, x130) = fiat_p192_addcarryx_u32(x128, x112, x109);
    let mut x131: u32 = 0;
    let mut x132: fiat_p192_u1 = 0;
    let (x131, x132) = fiat_p192_addcarryx_u32(0x0, x97, x119);
    let mut x133: u32 = 0;
    let mut x134: fiat_p192_u1 = 0;
    let (x133, x134) = fiat_p192_addcarryx_u32(x132, x99, x121);
    let mut x135: u32 = 0;
    let mut x136: fiat_p192_u1 = 0;
    let (x135, x136) = fiat_p192_addcarryx_u32(x134, x101, x123);
    let mut x137: u32 = 0;
    let mut x138: fiat_p192_u1 = 0;
    let (x137, x138) = fiat_p192_addcarryx_u32(x136, x103, x125);
    let mut x139: u32 = 0;
    let mut x140: fiat_p192_u1 = 0;
    let (x139, x140) = fiat_p192_addcarryx_u32(x138, x105, x127);
    let mut x141: u32 = 0;
    let mut x142: fiat_p192_u1 = 0;
    let (x141, x142) = fiat_p192_addcarryx_u32(x140, x107, x129);
    let mut x143: u32 = 0;
    let mut x144: fiat_p192_u1 = 0;
    let (x143, x144) =
        fiat_p192_addcarryx_u32(x142, ((x108 as u32) + (x94 as u32)), ((x130 as u32) + x110));
    let mut x145: u32 = 0;
    let mut x146: u32 = 0;
    let (x145, x146) = fiat_p192_mulx_u32(x3, 0x2);
    let mut x147: u32 = 0;
    let mut x148: fiat_p192_u1 = 0;
    let (x147, x148) = fiat_p192_addcarryx_u32(0x0, x133, x3);
    let mut x149: u32 = 0;
    let mut x150: fiat_p192_u1 = 0;
    let (x149, x150) = fiat_p192_addcarryx_u32(x148, x135, (0x0 as u32));
    let mut x151: u32 = 0;
    let mut x152: fiat_p192_u1 = 0;
    let (x151, x152) = fiat_p192_addcarryx_u32(x150, x137, x145);
    let mut x153: u32 = 0;
    let mut x154: fiat_p192_u1 = 0;
    let (x153, x154) = fiat_p192_addcarryx_u32(x152, x139, ((x146 as fiat_p192_u1) as u32));
    let mut x155: u32 = 0;
    let mut x156: fiat_p192_u1 = 0;
    let (x155, x156) = fiat_p192_addcarryx_u32(x154, x141, x3);
    let mut x157: u32 = 0;
    let mut x158: fiat_p192_u1 = 0;
    let (x157, x158) = fiat_p192_addcarryx_u32(x156, x143, (0x0 as u32));
    let mut x159: u32 = 0;
    let mut x160: u32 = 0;
    let (x159, x160) = fiat_p192_mulx_u32(x147, 0xffffffff);
    let mut x161: u32 = 0;
    let mut x162: u32 = 0;
    let (x161, x162) = fiat_p192_mulx_u32(x147, 0xffffffff);
    let mut x163: u32 = 0;
    let mut x164: u32 = 0;
    let (x163, x164) = fiat_p192_mulx_u32(x147, 0xffffffff);
    let mut x165: u32 = 0;
    let mut x166: u32 = 0;
    let (x165, x166) = fiat_p192_mulx_u32(x147, 0xfffffffe);
    let mut x167: u32 = 0;
    let mut x168: u32 = 0;
    let (x167, x168) = fiat_p192_mulx_u32(x147, 0xffffffff);
    let mut x169: u32 = 0;
    let mut x170: u32 = 0;
    let (x169, x170) = fiat_p192_mulx_u32(x147, 0xffffffff);
    let mut x171: u32 = 0;
    let mut x172: fiat_p192_u1 = 0;
    let (x171, x172) = fiat_p192_addcarryx_u32(0x0, x170, x167);
    let mut x173: u32 = 0;
    let mut x174: fiat_p192_u1 = 0;
    let (x173, x174) = fiat_p192_addcarryx_u32(x172, x168, x165);
    let mut x175: u32 = 0;
    let mut x176: fiat_p192_u1 = 0;
    let (x175, x176) = fiat_p192_addcarryx_u32(x174, x166, x163);
    let mut x177: u32 = 0;
    let mut x178: fiat_p192_u1 = 0;
    let (x177, x178) = fiat_p192_addcarryx_u32(x176, x164, x161);
    let mut x179: u32 = 0;
    let mut x180: fiat_p192_u1 = 0;
    let (x179, x180) = fiat_p192_addcarryx_u32(x178, x162, x159);
    let mut x181: u32 = 0;
    let mut x182: fiat_p192_u1 = 0;
    let (x181, x182) = fiat_p192_addcarryx_u32(0x0, x147, x169);
    let mut x183: u32 = 0;
    let mut x184: fiat_p192_u1 = 0;
    let (x183, x184) = fiat_p192_addcarryx_u32(x182, x149, x171);
    let mut x185: u32 = 0;
    let mut x186: fiat_p192_u1 = 0;
    let (x185, x186) = fiat_p192_addcarryx_u32(x184, x151, x173);
    let mut x187: u32 = 0;
    let mut x188: fiat_p192_u1 = 0;
    let (x187, x188) = fiat_p192_addcarryx_u32(x186, x153, x175);
    let mut x189: u32 = 0;
    let mut x190: fiat_p192_u1 = 0;
    let (x189, x190) = fiat_p192_addcarryx_u32(x188, x155, x177);
    let mut x191: u32 = 0;
    let mut x192: fiat_p192_u1 = 0;
    let (x191, x192) = fiat_p192_addcarryx_u32(x190, x157, x179);
    let mut x193: u32 = 0;
    let mut x194: fiat_p192_u1 = 0;
    let (x193, x194) = fiat_p192_addcarryx_u32(
        x192,
        ((x158 as u32) + (x144 as u32)),
        ((x180 as u32) + x160),
    );
    let mut x195: u32 = 0;
    let mut x196: u32 = 0;
    let (x195, x196) = fiat_p192_mulx_u32(x4, 0x2);
    let mut x197: u32 = 0;
    let mut x198: fiat_p192_u1 = 0;
    let (x197, x198) = fiat_p192_addcarryx_u32(0x0, x183, x4);
    let mut x199: u32 = 0;
    let mut x200: fiat_p192_u1 = 0;
    let (x199, x200) = fiat_p192_addcarryx_u32(x198, x185, (0x0 as u32));
    let mut x201: u32 = 0;
    let mut x202: fiat_p192_u1 = 0;
    let (x201, x202) = fiat_p192_addcarryx_u32(x200, x187, x195);
    let mut x203: u32 = 0;
    let mut x204: fiat_p192_u1 = 0;
    let (x203, x204) = fiat_p192_addcarryx_u32(x202, x189, ((x196 as fiat_p192_u1) as u32));
    let mut x205: u32 = 0;
    let mut x206: fiat_p192_u1 = 0;
    let (x205, x206) = fiat_p192_addcarryx_u32(x204, x191, x4);
    let mut x207: u32 = 0;
    let mut x208: fiat_p192_u1 = 0;
    let (x207, x208) = fiat_p192_addcarryx_u32(x206, x193, (0x0 as u32));
    let mut x209: u32 = 0;
    let mut x210: u32 = 0;
    let (x209, x210) = fiat_p192_mulx_u32(x197, 0xffffffff);
    let mut x211: u32 = 0;
    let mut x212: u32 = 0;
    let (x211, x212) = fiat_p192_mulx_u32(x197, 0xffffffff);
    let mut x213: u32 = 0;
    let mut x214: u32 = 0;
    let (x213, x214) = fiat_p192_mulx_u32(x197, 0xffffffff);
    let mut x215: u32 = 0;
    let mut x216: u32 = 0;
    let (x215, x216) = fiat_p192_mulx_u32(x197, 0xfffffffe);
    let mut x217: u32 = 0;
    let mut x218: u32 = 0;
    let (x217, x218) = fiat_p192_mulx_u32(x197, 0xffffffff);
    let mut x219: u32 = 0;
    let mut x220: u32 = 0;
    let (x219, x220) = fiat_p192_mulx_u32(x197, 0xffffffff);
    let mut x221: u32 = 0;
    let mut x222: fiat_p192_u1 = 0;
    let (x221, x222) = fiat_p192_addcarryx_u32(0x0, x220, x217);
    let mut x223: u32 = 0;
    let mut x224: fiat_p192_u1 = 0;
    let (x223, x224) = fiat_p192_addcarryx_u32(x222, x218, x215);
    let mut x225: u32 = 0;
    let mut x226: fiat_p192_u1 = 0;
    let (x225, x226) = fiat_p192_addcarryx_u32(x224, x216, x213);
    let mut x227: u32 = 0;
    let mut x228: fiat_p192_u1 = 0;
    let (x227, x228) = fiat_p192_addcarryx_u32(x226, x214, x211);
    let mut x229: u32 = 0;
    let mut x230: fiat_p192_u1 = 0;
    let (x229, x230) = fiat_p192_addcarryx_u32(x228, x212, x209);
    let mut x231: u32 = 0;
    let mut x232: fiat_p192_u1 = 0;
    let (x231, x232) = fiat_p192_addcarryx_u32(0x0, x197, x219);
    let mut x233: u32 = 0;
    let mut x234: fiat_p192_u1 = 0;
    let (x233, x234) = fiat_p192_addcarryx_u32(x232, x199, x221);
    let mut x235: u32 = 0;
    let mut x236: fiat_p192_u1 = 0;
    let (x235, x236) = fiat_p192_addcarryx_u32(x234, x201, x223);
    let mut x237: u32 = 0;
    let mut x238: fiat_p192_u1 = 0;
    let (x237, x238) = fiat_p192_addcarryx_u32(x236, x203, x225);
    let mut x239: u32 = 0;
    let mut x240: fiat_p192_u1 = 0;
    let (x239, x240) = fiat_p192_addcarryx_u32(x238, x205, x227);
    let mut x241: u32 = 0;
    let mut x242: fiat_p192_u1 = 0;
    let (x241, x242) = fiat_p192_addcarryx_u32(x240, x207, x229);
    let mut x243: u32 = 0;
    let mut x244: fiat_p192_u1 = 0;
    let (x243, x244) = fiat_p192_addcarryx_u32(
        x242,
        ((x208 as u32) + (x194 as u32)),
        ((x230 as u32) + x210),
    );
    let mut x245: u32 = 0;
    let mut x246: u32 = 0;
    let (x245, x246) = fiat_p192_mulx_u32(x5, 0x2);
    let mut x247: u32 = 0;
    let mut x248: fiat_p192_u1 = 0;
    let (x247, x248) = fiat_p192_addcarryx_u32(0x0, x233, x5);
    let mut x249: u32 = 0;
    let mut x250: fiat_p192_u1 = 0;
    let (x249, x250) = fiat_p192_addcarryx_u32(x248, x235, (0x0 as u32));
    let mut x251: u32 = 0;
    let mut x252: fiat_p192_u1 = 0;
    let (x251, x252) = fiat_p192_addcarryx_u32(x250, x237, x245);
    let mut x253: u32 = 0;
    let mut x254: fiat_p192_u1 = 0;
    let (x253, x254) = fiat_p192_addcarryx_u32(x252, x239, ((x246 as fiat_p192_u1) as u32));
    let mut x255: u32 = 0;
    let mut x256: fiat_p192_u1 = 0;
    let (x255, x256) = fiat_p192_addcarryx_u32(x254, x241, x5);
    let mut x257: u32 = 0;
    let mut x258: fiat_p192_u1 = 0;
    let (x257, x258) = fiat_p192_addcarryx_u32(x256, x243, (0x0 as u32));
    let mut x259: u32 = 0;
    let mut x260: u32 = 0;
    let (x259, x260) = fiat_p192_mulx_u32(x247, 0xffffffff);
    let mut x261: u32 = 0;
    let mut x262: u32 = 0;
    let (x261, x262) = fiat_p192_mulx_u32(x247, 0xffffffff);
    let mut x263: u32 = 0;
    let mut x264: u32 = 0;
    let (x263, x264) = fiat_p192_mulx_u32(x247, 0xffffffff);
    let mut x265: u32 = 0;
    let mut x266: u32 = 0;
    let (x265, x266) = fiat_p192_mulx_u32(x247, 0xfffffffe);
    let mut x267: u32 = 0;
    let mut x268: u32 = 0;
    let (x267, x268) = fiat_p192_mulx_u32(x247, 0xffffffff);
    let mut x269: u32 = 0;
    let mut x270: u32 = 0;
    let (x269, x270) = fiat_p192_mulx_u32(x247, 0xffffffff);
    let mut x271: u32 = 0;
    let mut x272: fiat_p192_u1 = 0;
    let (x271, x272) = fiat_p192_addcarryx_u32(0x0, x270, x267);
    let mut x273: u32 = 0;
    let mut x274: fiat_p192_u1 = 0;
    let (x273, x274) = fiat_p192_addcarryx_u32(x272, x268, x265);
    let mut x275: u32 = 0;
    let mut x276: fiat_p192_u1 = 0;
    let (x275, x276) = fiat_p192_addcarryx_u32(x274, x266, x263);
    let mut x277: u32 = 0;
    let mut x278: fiat_p192_u1 = 0;
    let (x277, x278) = fiat_p192_addcarryx_u32(x276, x264, x261);
    let mut x279: u32 = 0;
    let mut x280: fiat_p192_u1 = 0;
    let (x279, x280) = fiat_p192_addcarryx_u32(x278, x262, x259);
    let mut x281: u32 = 0;
    let mut x282: fiat_p192_u1 = 0;
    let (x281, x282) = fiat_p192_addcarryx_u32(0x0, x247, x269);
    let mut x283: u32 = 0;
    let mut x284: fiat_p192_u1 = 0;
    let (x283, x284) = fiat_p192_addcarryx_u32(x282, x249, x271);
    let mut x285: u32 = 0;
    let mut x286: fiat_p192_u1 = 0;
    let (x285, x286) = fiat_p192_addcarryx_u32(x284, x251, x273);
    let mut x287: u32 = 0;
    let mut x288: fiat_p192_u1 = 0;
    let (x287, x288) = fiat_p192_addcarryx_u32(x286, x253, x275);
    let mut x289: u32 = 0;
    let mut x290: fiat_p192_u1 = 0;
    let (x289, x290) = fiat_p192_addcarryx_u32(x288, x255, x277);
    let mut x291: u32 = 0;
    let mut x292: fiat_p192_u1 = 0;
    let (x291, x292) = fiat_p192_addcarryx_u32(x290, x257, x279);
    let mut x293: u32 = 0;
    let mut x294: fiat_p192_u1 = 0;
    let (x293, x294) = fiat_p192_addcarryx_u32(
        x292,
        ((x258 as u32) + (x244 as u32)),
        ((x280 as u32) + x260),
    );
    let mut x295: u32 = 0;
    let mut x296: fiat_p192_u1 = 0;
    let (x295, x296) = fiat_p192_subborrowx_u32(0x0, x283, 0xffffffff);
    let mut x297: u32 = 0;
    let mut x298: fiat_p192_u1 = 0;
    let (x297, x298) = fiat_p192_subborrowx_u32(x296, x285, 0xffffffff);
    let mut x299: u32 = 0;
    let mut x300: fiat_p192_u1 = 0;
    let (x299, x300) = fiat_p192_subborrowx_u32(x298, x287, 0xfffffffe);
    let mut x301: u32 = 0;
    let mut x302: fiat_p192_u1 = 0;
    let (x301, x302) = fiat_p192_subborrowx_u32(x300, x289, 0xffffffff);
    let mut x303: u32 = 0;
    let mut x304: fiat_p192_u1 = 0;
    let (x303, x304) = fiat_p192_subborrowx_u32(x302, x291, 0xffffffff);
    let mut x305: u32 = 0;
    let mut x306: fiat_p192_u1 = 0;
    let (x305, x306) = fiat_p192_subborrowx_u32(x304, x293, 0xffffffff);
    let mut x307: u32 = 0;
    let mut x308: fiat_p192_u1 = 0;
    let (x307, x308) = fiat_p192_subborrowx_u32(x306, (x294 as u32), (0x0 as u32));
    let mut x309: u32 = 0;
    let (x309) = fiat_p192_cmovznz_u32(x308, x295, x283);
    let mut x310: u32 = 0;
    let (x310) = fiat_p192_cmovznz_u32(x308, x297, x285);
    let mut x311: u32 = 0;
    let (x311) = fiat_p192_cmovznz_u32(x308, x299, x287);
    let mut x312: u32 = 0;
    let (x312) = fiat_p192_cmovznz_u32(x308, x301, x289);
    let mut x313: u32 = 0;
    let (x313) = fiat_p192_cmovznz_u32(x308, x303, x291);
    let mut x314: u32 = 0;
    let (x314) = fiat_p192_cmovznz_u32(x308, x305, x293);
    out1[0] = x309;
    out1[1] = x310;
    out1[2] = x311;
    out1[3] = x312;
    out1[4] = x313;
    out1[5] = x314;
    out1
}
#[doc = " The function fiat_p192_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[inline]
pub const fn fiat_p192_nonzero(arg1: &[u32; 6]) -> u32 {
    let mut out1: u32 = 0;
    let x1: u32 = ((arg1[0]) | ((arg1[1]) | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | (arg1[5]))))));
    out1 = x1;
    out1
}
#[doc = " The function fiat_p192_selectznz is a multi-limb conditional select."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (if arg1 = 0 then arg2 else arg3)"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[inline]
pub const fn fiat_p192_selectznz(arg1: fiat_p192_u1, arg2: &[u32; 6], arg3: &[u32; 6]) -> [u32; 6] {
    let mut out1: [u32; 6] = [0; 6];
    let mut x1: u32 = 0;
    let (x1) = fiat_p192_cmovznz_u32(arg1, (arg2[0]), (arg3[0]));
    let mut x2: u32 = 0;
    let (x2) = fiat_p192_cmovznz_u32(arg1, (arg2[1]), (arg3[1]));
    let mut x3: u32 = 0;
    let (x3) = fiat_p192_cmovznz_u32(arg1, (arg2[2]), (arg3[2]));
    let mut x4: u32 = 0;
    let (x4) = fiat_p192_cmovznz_u32(arg1, (arg2[3]), (arg3[3]));
    let mut x5: u32 = 0;
    let (x5) = fiat_p192_cmovznz_u32(arg1, (arg2[4]), (arg3[4]));
    let mut x6: u32 = 0;
    let (x6) = fiat_p192_cmovznz_u32(arg1, (arg2[5]), (arg3[5]));
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1
}
#[doc = " The function fiat_p192_to_bytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..23]"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]"]
#[inline]
pub const fn fiat_p192_to_bytes(arg1: &[u32; 6]) -> [u8; 24] {
    let mut out1: [u8; 24] = [0; 24];
    let x1: u32 = (arg1[5]);
    let x2: u32 = (arg1[4]);
    let x3: u32 = (arg1[3]);
    let x4: u32 = (arg1[2]);
    let x5: u32 = (arg1[1]);
    let x6: u32 = (arg1[0]);
    let x7: u8 = ((x6 & (0xff as u32)) as u8);
    let x8: u32 = (x6 >> 8);
    let x9: u8 = ((x8 & (0xff as u32)) as u8);
    let x10: u32 = (x8 >> 8);
    let x11: u8 = ((x10 & (0xff as u32)) as u8);
    let x12: u8 = ((x10 >> 8) as u8);
    let x13: u8 = ((x5 & (0xff as u32)) as u8);
    let x14: u32 = (x5 >> 8);
    let x15: u8 = ((x14 & (0xff as u32)) as u8);
    let x16: u32 = (x14 >> 8);
    let x17: u8 = ((x16 & (0xff as u32)) as u8);
    let x18: u8 = ((x16 >> 8) as u8);
    let x19: u8 = ((x4 & (0xff as u32)) as u8);
    let x20: u32 = (x4 >> 8);
    let x21: u8 = ((x20 & (0xff as u32)) as u8);
    let x22: u32 = (x20 >> 8);
    let x23: u8 = ((x22 & (0xff as u32)) as u8);
    let x24: u8 = ((x22 >> 8) as u8);
    let x25: u8 = ((x3 & (0xff as u32)) as u8);
    let x26: u32 = (x3 >> 8);
    let x27: u8 = ((x26 & (0xff as u32)) as u8);
    let x28: u32 = (x26 >> 8);
    let x29: u8 = ((x28 & (0xff as u32)) as u8);
    let x30: u8 = ((x28 >> 8) as u8);
    let x31: u8 = ((x2 & (0xff as u32)) as u8);
    let x32: u32 = (x2 >> 8);
    let x33: u8 = ((x32 & (0xff as u32)) as u8);
    let x34: u32 = (x32 >> 8);
    let x35: u8 = ((x34 & (0xff as u32)) as u8);
    let x36: u8 = ((x34 >> 8) as u8);
    let x37: u8 = ((x1 & (0xff as u32)) as u8);
    let x38: u32 = (x1 >> 8);
    let x39: u8 = ((x38 & (0xff as u32)) as u8);
    let x40: u32 = (x38 >> 8);
    let x41: u8 = ((x40 & (0xff as u32)) as u8);
    let x42: u8 = ((x40 >> 8) as u8);
    out1[0] = x7;
    out1[1] = x9;
    out1[2] = x11;
    out1[3] = x12;
    out1[4] = x13;
    out1[5] = x15;
    out1[6] = x17;
    out1[7] = x18;
    out1[8] = x19;
    out1[9] = x21;
    out1[10] = x23;
    out1[11] = x24;
    out1[12] = x25;
    out1[13] = x27;
    out1[14] = x29;
    out1[15] = x30;
    out1[16] = x31;
    out1[17] = x33;
    out1[18] = x35;
    out1[19] = x36;
    out1[20] = x37;
    out1[21] = x39;
    out1[22] = x41;
    out1[23] = x42;
    out1
}
#[doc = " The function fiat_p192_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ bytes_eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval out1 mod m = bytes_eval arg1 mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[inline]
pub const fn fiat_p192_from_bytes(arg1: &[u8; 24]) -> [u32; 6] {
    let mut out1: [u32; 6] = [0; 6];
    let x1: u32 = (((arg1[23]) as u32) << 24);
    let x2: u32 = (((arg1[22]) as u32) << 16);
    let x3: u32 = (((arg1[21]) as u32) << 8);
    let x4: u8 = (arg1[20]);
    let x5: u32 = (((arg1[19]) as u32) << 24);
    let x6: u32 = (((arg1[18]) as u32) << 16);
    let x7: u32 = (((arg1[17]) as u32) << 8);
    let x8: u8 = (arg1[16]);
    let x9: u32 = (((arg1[15]) as u32) << 24);
    let x10: u32 = (((arg1[14]) as u32) << 16);
    let x11: u32 = (((arg1[13]) as u32) << 8);
    let x12: u8 = (arg1[12]);
    let x13: u32 = (((arg1[11]) as u32) << 24);
    let x14: u32 = (((arg1[10]) as u32) << 16);
    let x15: u32 = (((arg1[9]) as u32) << 8);
    let x16: u8 = (arg1[8]);
    let x17: u32 = (((arg1[7]) as u32) << 24);
    let x18: u32 = (((arg1[6]) as u32) << 16);
    let x19: u32 = (((arg1[5]) as u32) << 8);
    let x20: u8 = (arg1[4]);
    let x21: u32 = (((arg1[3]) as u32) << 24);
    let x22: u32 = (((arg1[2]) as u32) << 16);
    let x23: u32 = (((arg1[1]) as u32) << 8);
    let x24: u8 = (arg1[0]);
    let x25: u32 = (x23 + (x24 as u32));
    let x26: u32 = (x22 + x25);
    let x27: u32 = (x21 + x26);
    let x28: u32 = (x19 + (x20 as u32));
    let x29: u32 = (x18 + x28);
    let x30: u32 = (x17 + x29);
    let x31: u32 = (x15 + (x16 as u32));
    let x32: u32 = (x14 + x31);
    let x33: u32 = (x13 + x32);
    let x34: u32 = (x11 + (x12 as u32));
    let x35: u32 = (x10 + x34);
    let x36: u32 = (x9 + x35);
    let x37: u32 = (x7 + (x8 as u32));
    let x38: u32 = (x6 + x37);
    let x39: u32 = (x5 + x38);
    let x40: u32 = (x3 + (x4 as u32));
    let x41: u32 = (x2 + x40);
    let x42: u32 = (x1 + x41);
    out1[0] = x27;
    out1[1] = x30;
    out1[2] = x33;
    out1[3] = x36;
    out1[4] = x39;
    out1[5] = x42;
    out1
}
#[doc = " The function fiat_p192_set_one returns the field element one in the Montgomery domain."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = 1 mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_p192_set_one() -> fiat_p192_montgomery_domain_field_element {
    let mut out1: fiat_p192_montgomery_domain_field_element = [0; 6];
    out1[0] = 0x1;
    out1[1] = 0x0;
    out1[2] = 0x1;
    out1[3] = 0x0;
    out1[4] = 0x0;
    out1[5] = 0x0;
    out1
}
#[doc = " The function fiat_p192_msat returns the saturated representation of the prime modulus."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   twos_complement_eval out1 = m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[inline]
pub const fn fiat_p192_msat() -> [u32; 7] {
    let mut out1: [u32; 7] = [0; 7];
    out1[0] = 0xffffffff;
    out1[1] = 0xffffffff;
    out1[2] = 0xfffffffe;
    out1[3] = 0xffffffff;
    out1[4] = 0xffffffff;
    out1[5] = 0xffffffff;
    out1[6] = (0x0 as u32);
    out1
}
#[doc = " The function fiat_p192_divstep computes a divstep."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg4 < m"]
#[doc = "   0 ≤ eval arg5 < m"]
#[doc = " Postconditions:"]
#[doc = "   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)"]
#[doc = "   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)"]
#[doc = "   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)"]
#[doc = "   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)"]
#[doc = "   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)"]
#[doc = "   0 ≤ eval out5 < m"]
#[doc = "   0 ≤ eval out5 < m"]
#[doc = "   0 ≤ eval out2 < m"]
#[doc = "   0 ≤ eval out3 < m"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0xffffffff]"]
#[doc = "   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[doc = "   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[inline]
pub const fn fiat_p192_divstep(
    arg1: u32,
    arg2: &[u32; 7],
    arg3: &[u32; 7],
    arg4: &[u32; 6],
    arg5: &[u32; 6],
) -> (u32, [u32; 7], [u32; 7], [u32; 6], [u32; 6]) {
    let mut out1: u32 = 0;
    let mut out2: [u32; 7] = [0; 7];
    let mut out3: [u32; 7] = [0; 7];
    let mut out4: [u32; 6] = [0; 6];
    let mut out5: [u32; 6] = [0; 6];
    let mut x1: u32 = 0;
    let mut x2: fiat_p192_u1 = 0;
    let (x1, x2) = fiat_p192_addcarryx_u32(0x0, (!arg1), (0x1 as u32));
    let x3: fiat_p192_u1 =
        (((x1 >> 31) as fiat_p192_u1) & (((arg3[0]) & (0x1 as u32)) as fiat_p192_u1));
    let mut x4: u32 = 0;
    let mut x5: fiat_p192_u1 = 0;
    let (x4, x5) = fiat_p192_addcarryx_u32(0x0, (!arg1), (0x1 as u32));
    let mut x6: u32 = 0;
    let (x6) = fiat_p192_cmovznz_u32(x3, arg1, x4);
    let mut x7: u32 = 0;
    let (x7) = fiat_p192_cmovznz_u32(x3, (arg2[0]), (arg3[0]));
    let mut x8: u32 = 0;
    let (x8) = fiat_p192_cmovznz_u32(x3, (arg2[1]), (arg3[1]));
    let mut x9: u32 = 0;
    let (x9) = fiat_p192_cmovznz_u32(x3, (arg2[2]), (arg3[2]));
    let mut x10: u32 = 0;
    let (x10) = fiat_p192_cmovznz_u32(x3, (arg2[3]), (arg3[3]));
    let mut x11: u32 = 0;
    let (x11) = fiat_p192_cmovznz_u32(x3, (arg2[4]), (arg3[4]));
    let mut x12: u32 = 0;
    let (x12) = fiat_p192_cmovznz_u32(x3, (arg2[5]), (arg3[5]));
    let mut x13: u32 = 0;
    let (x13) = fiat_p192_cmovznz_u32(x3, (arg2[6]), (arg3[6]));
    let mut x14: u32 = 0;
    let mut x15: fiat_p192_u1 = 0;
    let (x14, x15) = fiat_p192_addcarryx_u32(0x0, (0x1 as u32), (!(arg2[0])));
    let mut x16: u32 = 0;
    let mut x17: fiat_p192_u1 = 0;
    let (x16, x17) = fiat_p192_addcarryx_u32(x15, (0x0 as u32), (!(arg2[1])));
    let mut x18: u32 = 0;
    let mut x19: fiat_p192_u1 = 0;
    let (x18, x19) = fiat_p192_addcarryx_u32(x17, (0x0 as u32), (!(arg2[2])));
    let mut x20: u32 = 0;
    let mut x21: fiat_p192_u1 = 0;
    let (x20, x21) = fiat_p192_addcarryx_u32(x19, (0x0 as u32), (!(arg2[3])));
    let mut x22: u32 = 0;
    let mut x23: fiat_p192_u1 = 0;
    let (x22, x23) = fiat_p192_addcarryx_u32(x21, (0x0 as u32), (!(arg2[4])));
    let mut x24: u32 = 0;
    let mut x25: fiat_p192_u1 = 0;
    let (x24, x25) = fiat_p192_addcarryx_u32(x23, (0x0 as u32), (!(arg2[5])));
    let mut x26: u32 = 0;
    let mut x27: fiat_p192_u1 = 0;
    let (x26, x27) = fiat_p192_addcarryx_u32(x25, (0x0 as u32), (!(arg2[6])));
    let mut x28: u32 = 0;
    let (x28) = fiat_p192_cmovznz_u32(x3, (arg3[0]), x14);
    let mut x29: u32 = 0;
    let (x29) = fiat_p192_cmovznz_u32(x3, (arg3[1]), x16);
    let mut x30: u32 = 0;
    let (x30) = fiat_p192_cmovznz_u32(x3, (arg3[2]), x18);
    let mut x31: u32 = 0;
    let (x31) = fiat_p192_cmovznz_u32(x3, (arg3[3]), x20);
    let mut x32: u32 = 0;
    let (x32) = fiat_p192_cmovznz_u32(x3, (arg3[4]), x22);
    let mut x33: u32 = 0;
    let (x33) = fiat_p192_cmovznz_u32(x3, (arg3[5]), x24);
    let mut x34: u32 = 0;
    let (x34) = fiat_p192_cmovznz_u32(x3, (arg3[6]), x26);
    let mut x35: u32 = 0;
    let (x35) = fiat_p192_cmovznz_u32(x3, (arg4[0]), (arg5[0]));
    let mut x36: u32 = 0;
    let (x36) = fiat_p192_cmovznz_u32(x3, (arg4[1]), (arg5[1]));
    let mut x37: u32 = 0;
    let (x37) = fiat_p192_cmovznz_u32(x3, (arg4[2]), (arg5[2]));
    let mut x38: u32 = 0;
    let (x38) = fiat_p192_cmovznz_u32(x3, (arg4[3]), (arg5[3]));
    let mut x39: u32 = 0;
    let (x39) = fiat_p192_cmovznz_u32(x3, (arg4[4]), (arg5[4]));
    let mut x40: u32 = 0;
    let (x40) = fiat_p192_cmovznz_u32(x3, (arg4[5]), (arg5[5]));
    let mut x41: u32 = 0;
    let mut x42: fiat_p192_u1 = 0;
    let (x41, x42) = fiat_p192_addcarryx_u32(0x0, x35, x35);
    let mut x43: u32 = 0;
    let mut x44: fiat_p192_u1 = 0;
    let (x43, x44) = fiat_p192_addcarryx_u32(x42, x36, x36);
    let mut x45: u32 = 0;
    let mut x46: fiat_p192_u1 = 0;
    let (x45, x46) = fiat_p192_addcarryx_u32(x44, x37, x37);
    let mut x47: u32 = 0;
    let mut x48: fiat_p192_u1 = 0;
    let (x47, x48) = fiat_p192_addcarryx_u32(x46, x38, x38);
    let mut x49: u32 = 0;
    let mut x50: fiat_p192_u1 = 0;
    let (x49, x50) = fiat_p192_addcarryx_u32(x48, x39, x39);
    let mut x51: u32 = 0;
    let mut x52: fiat_p192_u1 = 0;
    let (x51, x52) = fiat_p192_addcarryx_u32(x50, x40, x40);
    let mut x53: u32 = 0;
    let mut x54: fiat_p192_u1 = 0;
    let (x53, x54) = fiat_p192_subborrowx_u32(0x0, x41, 0xffffffff);
    let mut x55: u32 = 0;
    let mut x56: fiat_p192_u1 = 0;
    let (x55, x56) = fiat_p192_subborrowx_u32(x54, x43, 0xffffffff);
    let mut x57: u32 = 0;
    let mut x58: fiat_p192_u1 = 0;
    let (x57, x58) = fiat_p192_subborrowx_u32(x56, x45, 0xfffffffe);
    let mut x59: u32 = 0;
    let mut x60: fiat_p192_u1 = 0;
    let (x59, x60) = fiat_p192_subborrowx_u32(x58, x47, 0xffffffff);
    let mut x61: u32 = 0;
    let mut x62: fiat_p192_u1 = 0;
    let (x61, x62) = fiat_p192_subborrowx_u32(x60, x49, 0xffffffff);
    let mut x63: u32 = 0;
    let mut x64: fiat_p192_u1 = 0;
    let (x63, x64) = fiat_p192_subborrowx_u32(x62, x51, 0xffffffff);
    let mut x65: u32 = 0;
    let mut x66: fiat_p192_u1 = 0;
    let (x65, x66) = fiat_p192_subborrowx_u32(x64, (x52 as u32), (0x0 as u32));
    let x67: u32 = (arg4[5]);
    let x68: u32 = (arg4[4]);
    let x69: u32 = (arg4[3]);
    let x70: u32 = (arg4[2]);
    let x71: u32 = (arg4[1]);
    let x72: u32 = (arg4[0]);
    let mut x73: u32 = 0;
    let mut x74: fiat_p192_u1 = 0;
    let (x73, x74) = fiat_p192_subborrowx_u32(0x0, (0x0 as u32), x72);
    let mut x75: u32 = 0;
    let mut x76: fiat_p192_u1 = 0;
    let (x75, x76) = fiat_p192_subborrowx_u32(x74, (0x0 as u32), x71);
    let mut x77: u32 = 0;
    let mut x78: fiat_p192_u1 = 0;
    let (x77, x78) = fiat_p192_subborrowx_u32(x76, (0x0 as u32), x70);
    let mut x79: u32 = 0;
    let mut x80: fiat_p192_u1 = 0;
    let (x79, x80) = fiat_p192_subborrowx_u32(x78, (0x0 as u32), x69);
    let mut x81: u32 = 0;
    let mut x82: fiat_p192_u1 = 0;
    let (x81, x82) = fiat_p192_subborrowx_u32(x80, (0x0 as u32), x68);
    let mut x83: u32 = 0;
    let mut x84: fiat_p192_u1 = 0;
    let (x83, x84) = fiat_p192_subborrowx_u32(x82, (0x0 as u32), x67);
    let mut x85: u32 = 0;
    let (x85) = fiat_p192_cmovznz_u32(x84, (0x0 as u32), 0xffffffff);
    let mut x86: u32 = 0;
    let mut x87: fiat_p192_u1 = 0;
    let (x86, x87) = fiat_p192_addcarryx_u32(0x0, x73, x85);
    let mut x88: u32 = 0;
    let mut x89: fiat_p192_u1 = 0;
    let (x88, x89) = fiat_p192_addcarryx_u32(x87, x75, x85);
    let mut x90: u32 = 0;
    let mut x91: fiat_p192_u1 = 0;
    let (x90, x91) = fiat_p192_addcarryx_u32(x89, x77, (x85 & 0xfffffffe));
    let mut x92: u32 = 0;
    let mut x93: fiat_p192_u1 = 0;
    let (x92, x93) = fiat_p192_addcarryx_u32(x91, x79, x85);
    let mut x94: u32 = 0;
    let mut x95: fiat_p192_u1 = 0;
    let (x94, x95) = fiat_p192_addcarryx_u32(x93, x81, x85);
    let mut x96: u32 = 0;
    let mut x97: fiat_p192_u1 = 0;
    let (x96, x97) = fiat_p192_addcarryx_u32(x95, x83, x85);
    let mut x98: u32 = 0;
    let (x98) = fiat_p192_cmovznz_u32(x3, (arg5[0]), x86);
    let mut x99: u32 = 0;
    let (x99) = fiat_p192_cmovznz_u32(x3, (arg5[1]), x88);
    let mut x100: u32 = 0;
    let (x100) = fiat_p192_cmovznz_u32(x3, (arg5[2]), x90);
    let mut x101: u32 = 0;
    let (x101) = fiat_p192_cmovznz_u32(x3, (arg5[3]), x92);
    let mut x102: u32 = 0;
    let (x102) = fiat_p192_cmovznz_u32(x3, (arg5[4]), x94);
    let mut x103: u32 = 0;
    let (x103) = fiat_p192_cmovznz_u32(x3, (arg5[5]), x96);
    let x104: fiat_p192_u1 = ((x28 & (0x1 as u32)) as fiat_p192_u1);
    let mut x105: u32 = 0;
    let (x105) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x7);
    let mut x106: u32 = 0;
    let (x106) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x8);
    let mut x107: u32 = 0;
    let (x107) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x9);
    let mut x108: u32 = 0;
    let (x108) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x10);
    let mut x109: u32 = 0;
    let (x109) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x11);
    let mut x110: u32 = 0;
    let (x110) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x12);
    let mut x111: u32 = 0;
    let (x111) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x13);
    let mut x112: u32 = 0;
    let mut x113: fiat_p192_u1 = 0;
    let (x112, x113) = fiat_p192_addcarryx_u32(0x0, x28, x105);
    let mut x114: u32 = 0;
    let mut x115: fiat_p192_u1 = 0;
    let (x114, x115) = fiat_p192_addcarryx_u32(x113, x29, x106);
    let mut x116: u32 = 0;
    let mut x117: fiat_p192_u1 = 0;
    let (x116, x117) = fiat_p192_addcarryx_u32(x115, x30, x107);
    let mut x118: u32 = 0;
    let mut x119: fiat_p192_u1 = 0;
    let (x118, x119) = fiat_p192_addcarryx_u32(x117, x31, x108);
    let mut x120: u32 = 0;
    let mut x121: fiat_p192_u1 = 0;
    let (x120, x121) = fiat_p192_addcarryx_u32(x119, x32, x109);
    let mut x122: u32 = 0;
    let mut x123: fiat_p192_u1 = 0;
    let (x122, x123) = fiat_p192_addcarryx_u32(x121, x33, x110);
    let mut x124: u32 = 0;
    let mut x125: fiat_p192_u1 = 0;
    let (x124, x125) = fiat_p192_addcarryx_u32(x123, x34, x111);
    let mut x126: u32 = 0;
    let (x126) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x35);
    let mut x127: u32 = 0;
    let (x127) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x36);
    let mut x128: u32 = 0;
    let (x128) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x37);
    let mut x129: u32 = 0;
    let (x129) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x38);
    let mut x130: u32 = 0;
    let (x130) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x39);
    let mut x131: u32 = 0;
    let (x131) = fiat_p192_cmovznz_u32(x104, (0x0 as u32), x40);
    let mut x132: u32 = 0;
    let mut x133: fiat_p192_u1 = 0;
    let (x132, x133) = fiat_p192_addcarryx_u32(0x0, x98, x126);
    let mut x134: u32 = 0;
    let mut x135: fiat_p192_u1 = 0;
    let (x134, x135) = fiat_p192_addcarryx_u32(x133, x99, x127);
    let mut x136: u32 = 0;
    let mut x137: fiat_p192_u1 = 0;
    let (x136, x137) = fiat_p192_addcarryx_u32(x135, x100, x128);
    let mut x138: u32 = 0;
    let mut x139: fiat_p192_u1 = 0;
    let (x138, x139) = fiat_p192_addcarryx_u32(x137, x101, x129);
    let mut x140: u32 = 0;
    let mut x141: fiat_p192_u1 = 0;
    let (x140, x141) = fiat_p192_addcarryx_u32(x139, x102, x130);
    let mut x142: u32 = 0;
    let mut x143: fiat_p192_u1 = 0;
    let (x142, x143) = fiat_p192_addcarryx_u32(x141, x103, x131);
    let mut x144: u32 = 0;
    let mut x145: fiat_p192_u1 = 0;
    let (x144, x145) = fiat_p192_subborrowx_u32(0x0, x132, 0xffffffff);
    let mut x146: u32 = 0;
    let mut x147: fiat_p192_u1 = 0;
    let (x146, x147) = fiat_p192_subborrowx_u32(x145, x134, 0xffffffff);
    let mut x148: u32 = 0;
    let mut x149: fiat_p192_u1 = 0;
    let (x148, x149) = fiat_p192_subborrowx_u32(x147, x136, 0xfffffffe);
    let mut x150: u32 = 0;
    let mut x151: fiat_p192_u1 = 0;
    let (x150, x151) = fiat_p192_subborrowx_u32(x149, x138, 0xffffffff);
    let mut x152: u32 = 0;
    let mut x153: fiat_p192_u1 = 0;
    let (x152, x153) = fiat_p192_subborrowx_u32(x151, x140, 0xffffffff);
    let mut x154: u32 = 0;
    let mut x155: fiat_p192_u1 = 0;
    let (x154, x155) = fiat_p192_subborrowx_u32(x153, x142, 0xffffffff);
    let mut x156: u32 = 0;
    let mut x157: fiat_p192_u1 = 0;
    let (x156, x157) = fiat_p192_subborrowx_u32(x155, (x143 as u32), (0x0 as u32));
    let mut x158: u32 = 0;
    let mut x159: fiat_p192_u1 = 0;
    let (x158, x159) = fiat_p192_addcarryx_u32(0x0, x6, (0x1 as u32));
    let x160: u32 = ((x112 >> 1) | ((x114 << 31) & 0xffffffff));
    let x161: u32 = ((x114 >> 1) | ((x116 << 31) & 0xffffffff));
    let x162: u32 = ((x116 >> 1) | ((x118 << 31) & 0xffffffff));
    let x163: u32 = ((x118 >> 1) | ((x120 << 31) & 0xffffffff));
    let x164: u32 = ((x120 >> 1) | ((x122 << 31) & 0xffffffff));
    let x165: u32 = ((x122 >> 1) | ((x124 << 31) & 0xffffffff));
    let x166: u32 = ((x124 & 0x80000000) | (x124 >> 1));
    let mut x167: u32 = 0;
    let (x167) = fiat_p192_cmovznz_u32(x66, x53, x41);
    let mut x168: u32 = 0;
    let (x168) = fiat_p192_cmovznz_u32(x66, x55, x43);
    let mut x169: u32 = 0;
    let (x169) = fiat_p192_cmovznz_u32(x66, x57, x45);
    let mut x170: u32 = 0;
    let (x170) = fiat_p192_cmovznz_u32(x66, x59, x47);
    let mut x171: u32 = 0;
    let (x171) = fiat_p192_cmovznz_u32(x66, x61, x49);
    let mut x172: u32 = 0;
    let (x172) = fiat_p192_cmovznz_u32(x66, x63, x51);
    let mut x173: u32 = 0;
    let (x173) = fiat_p192_cmovznz_u32(x157, x144, x132);
    let mut x174: u32 = 0;
    let (x174) = fiat_p192_cmovznz_u32(x157, x146, x134);
    let mut x175: u32 = 0;
    let (x175) = fiat_p192_cmovznz_u32(x157, x148, x136);
    let mut x176: u32 = 0;
    let (x176) = fiat_p192_cmovznz_u32(x157, x150, x138);
    let mut x177: u32 = 0;
    let (x177) = fiat_p192_cmovznz_u32(x157, x152, x140);
    let mut x178: u32 = 0;
    let (x178) = fiat_p192_cmovznz_u32(x157, x154, x142);
    out1 = x158;
    out2[0] = x7;
    out2[1] = x8;
    out2[2] = x9;
    out2[3] = x10;
    out2[4] = x11;
    out2[5] = x12;
    out2[6] = x13;
    out3[0] = x160;
    out3[1] = x161;
    out3[2] = x162;
    out3[3] = x163;
    out3[4] = x164;
    out3[5] = x165;
    out3[6] = x166;
    out4[0] = x167;
    out4[1] = x168;
    out4[2] = x169;
    out4[3] = x170;
    out4[4] = x171;
    out4[5] = x172;
    out5[0] = x173;
    out5[1] = x174;
    out5[2] = x175;
    out5[3] = x176;
    out5[4] = x177;
    out5[5] = x178;
    (out1, out2, out3, out4, out5)
}
#[doc = " The function fiat_p192_divstep_precomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form)."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[inline]
pub const fn fiat_p192_divstep_precomp() -> [u32; 6] {
    let mut out1: [u32; 6] = [0; 6];
    out1[0] = 0xffe00000;
    out1[1] = 0xffffffff;
    out1[2] = 0xffefffff;
    out1[3] = 0xffffffff;
    out1[4] = 0x1fffff;
    out1[5] = (0x0 as u32);
    out1
}
