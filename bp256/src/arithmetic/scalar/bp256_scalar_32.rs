#![doc = " fiat-crypto output postprocessed by fiat-constify: <https://github.com/rustcrypto/utils>"]
#![doc = " Autogenerated: './word_by_word_montgomery' --lang Rust --inline bp256_scalar 32 0xa9fb57dba1eea9bc3e660a909d838d718c397aa3b561a6f7901e0e82974856a7 mul square add sub opp from_montgomery to_montgomery nonzero selectznz to_bytes from_bytes one msat divstep divstep_precomp"]
#![doc = " curve description: bp256_scalar"]
#![doc = " machine_wordsize = 32 (from \"32\")"]
#![doc = " requested operations: mul, square, add, sub, opp, from_montgomery, to_montgomery, nonzero, selectznz, to_bytes, from_bytes, one, msat, divstep, divstep_precomp"]
#![doc = " m = 0xa9fb57dba1eea9bc3e660a909d838d718c397aa3b561a6f7901e0e82974856a7 (from \"0xa9fb57dba1eea9bc3e660a909d838d718c397aa3b561a6f7901e0e82974856a7\")"]
#![doc = ""]
#![doc = " NOTE: In addition to the bounds specified above each function, all"]
#![doc = "   functions synthesized for this Montgomery arithmetic require the"]
#![doc = "   input to be strictly less than the prime modulus (m), and also"]
#![doc = "   require the input to be in the unique saturated representation."]
#![doc = "   All functions also ensure that these two properties are true of"]
#![doc = "   return values."]
#![doc = ""]
#![doc = " Computed values:"]
#![doc = "   eval z = z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224)"]
#![doc = "   bytes_eval z = z[0] + (z[1] << 8) + (z[2] << 16) + (z[3] << 24) + (z[4] << 32) + (z[5] << 40) + (z[6] << 48) + (z[7] << 56) + (z[8] << 64) + (z[9] << 72) + (z[10] << 80) + (z[11] << 88) + (z[12] << 96) + (z[13] << 104) + (z[14] << 112) + (z[15] << 120) + (z[16] << 128) + (z[17] << 136) + (z[18] << 144) + (z[19] << 152) + (z[20] << 160) + (z[21] << 168) + (z[22] << 176) + (z[23] << 184) + (z[24] << 192) + (z[25] << 200) + (z[26] << 208) + (z[27] << 216) + (z[28] << 224) + (z[29] << 232) + (z[30] << 240) + (z[31] << 248)"]
#![doc = "   twos_complement_eval z = let x1 := z[0] + (z[1] << 32) + (z[2] << 64) + (z[3] << 96) + (z[4] << 128) + (z[5] << 160) + (z[6] << 192) + (z[7] << 224) in"]
#![doc = "                            if x1 & (2^256-1) < 2^255 then x1 & (2^256-1) else (x1 & (2^256-1)) - 2^256"]
#![allow(unused_parens)]
#![allow(non_camel_case_types)]
#![allow(
    clippy::identity_op,
    clippy::unnecessary_cast,
    dead_code,
    rustdoc::broken_intra_doc_links,
    unused_assignments,
    unused_mut,
    unused_variables
)]
pub type fiat_bp256_scalar_u1 = u8;
pub type fiat_bp256_scalar_i1 = i8;
pub type fiat_bp256_scalar_u2 = u8;
pub type fiat_bp256_scalar_i2 = i8;
pub type fiat_bp256_scalar_montgomery_domain_field_element = [u32; 8];
pub type fiat_bp256_scalar_non_montgomery_domain_field_element = [u32; 8];
#[doc = " The function fiat_bp256_scalar_addcarryx_u32 is an addition with carry."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (arg1 + arg2 + arg3) mod 2^32"]
#[doc = "   out2 = ⌊(arg1 + arg2 + arg3) / 2^32⌋"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [0x0 ~> 0xffffffff]"]
#[doc = "   arg3: [0x0 ~> 0xffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[doc = "   out2: [0x0 ~> 0x1]"]
#[inline]
pub const fn fiat_bp256_scalar_addcarryx_u32(
    arg1: fiat_bp256_scalar_u1,
    arg2: u32,
    arg3: u32,
) -> (u32, fiat_bp256_scalar_u1) {
    let mut out1: u32 = 0;
    let mut out2: fiat_bp256_scalar_u1 = 0;
    let x1: u64 = (((arg1 as u64) + (arg2 as u64)) + (arg3 as u64));
    let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
    let x3: fiat_bp256_scalar_u1 = ((x1 >> 32) as fiat_bp256_scalar_u1);
    out1 = x2;
    out2 = x3;
    (out1, out2)
}
#[doc = " The function fiat_bp256_scalar_subborrowx_u32 is a subtraction with borrow."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (-arg1 + arg2 + -arg3) mod 2^32"]
#[doc = "   out2 = -⌊(-arg1 + arg2 + -arg3) / 2^32⌋"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [0x0 ~> 0xffffffff]"]
#[doc = "   arg3: [0x0 ~> 0xffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[doc = "   out2: [0x0 ~> 0x1]"]
#[inline]
pub const fn fiat_bp256_scalar_subborrowx_u32(
    arg1: fiat_bp256_scalar_u1,
    arg2: u32,
    arg3: u32,
) -> (u32, fiat_bp256_scalar_u1) {
    let mut out1: u32 = 0;
    let mut out2: fiat_bp256_scalar_u1 = 0;
    let x1: i64 = (((arg2 as i64) - (arg1 as i64)) - (arg3 as i64));
    let x2: fiat_bp256_scalar_i1 = ((x1 >> 32) as fiat_bp256_scalar_i1);
    let x3: u32 = ((x1 & (0xffffffff as i64)) as u32);
    out1 = x3;
    out2 = (((0x0 as fiat_bp256_scalar_i2) - (x2 as fiat_bp256_scalar_i2)) as fiat_bp256_scalar_u1);
    (out1, out2)
}
#[doc = " The function fiat_bp256_scalar_mulx_u32 is a multiplication, returning the full double-width result."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (arg1 * arg2) mod 2^32"]
#[doc = "   out2 = ⌊arg1 * arg2 / 2^32⌋"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0xffffffff]"]
#[doc = "   arg2: [0x0 ~> 0xffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[doc = "   out2: [0x0 ~> 0xffffffff]"]
#[inline]
pub const fn fiat_bp256_scalar_mulx_u32(arg1: u32, arg2: u32) -> (u32, u32) {
    let mut out1: u32 = 0;
    let mut out2: u32 = 0;
    let x1: u64 = ((arg1 as u64) * (arg2 as u64));
    let x2: u32 = ((x1 & (0xffffffff as u64)) as u32);
    let x3: u32 = ((x1 >> 32) as u32);
    out1 = x2;
    out2 = x3;
    (out1, out2)
}
#[doc = " The function fiat_bp256_scalar_cmovznz_u32 is a single-word conditional move."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (if arg1 = 0 then arg2 else arg3)"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [0x0 ~> 0xffffffff]"]
#[doc = "   arg3: [0x0 ~> 0xffffffff]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[inline]
pub const fn fiat_bp256_scalar_cmovznz_u32(
    arg1: fiat_bp256_scalar_u1,
    arg2: u32,
    arg3: u32,
) -> u32 {
    let mut out1: u32 = 0;
    let x1: fiat_bp256_scalar_u1 = (!(!arg1));
    let x2: u32 = ((((((0x0 as fiat_bp256_scalar_i2) - (x1 as fiat_bp256_scalar_i2))
        as fiat_bp256_scalar_i1) as i64)
        & (0xffffffff as i64)) as u32);
    let x3: u32 = ((x2 & arg3) | ((!x2) & arg2));
    out1 = x3;
    out1
}
#[doc = " The function fiat_bp256_scalar_mul multiplies two field elements in the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = "   0 ≤ eval arg2 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg2)) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_bp256_scalar_mul(
    arg1: &fiat_bp256_scalar_montgomery_domain_field_element,
    arg2: &fiat_bp256_scalar_montgomery_domain_field_element,
) -> fiat_bp256_scalar_montgomery_domain_field_element {
    let mut out1: fiat_bp256_scalar_montgomery_domain_field_element = [0; 8];
    let x1: u32 = (arg1[1]);
    let x2: u32 = (arg1[2]);
    let x3: u32 = (arg1[3]);
    let x4: u32 = (arg1[4]);
    let x5: u32 = (arg1[5]);
    let x6: u32 = (arg1[6]);
    let x7: u32 = (arg1[7]);
    let x8: u32 = (arg1[0]);
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    let (x9, x10) = fiat_bp256_scalar_mulx_u32(x8, (arg2[7]));
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    let (x11, x12) = fiat_bp256_scalar_mulx_u32(x8, (arg2[6]));
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    let (x13, x14) = fiat_bp256_scalar_mulx_u32(x8, (arg2[5]));
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    let (x15, x16) = fiat_bp256_scalar_mulx_u32(x8, (arg2[4]));
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    let (x17, x18) = fiat_bp256_scalar_mulx_u32(x8, (arg2[3]));
    let mut x19: u32 = 0;
    let mut x20: u32 = 0;
    let (x19, x20) = fiat_bp256_scalar_mulx_u32(x8, (arg2[2]));
    let mut x21: u32 = 0;
    let mut x22: u32 = 0;
    let (x21, x22) = fiat_bp256_scalar_mulx_u32(x8, (arg2[1]));
    let mut x23: u32 = 0;
    let mut x24: u32 = 0;
    let (x23, x24) = fiat_bp256_scalar_mulx_u32(x8, (arg2[0]));
    let mut x25: u32 = 0;
    let mut x26: fiat_bp256_scalar_u1 = 0;
    let (x25, x26) = fiat_bp256_scalar_addcarryx_u32(0x0, x24, x21);
    let mut x27: u32 = 0;
    let mut x28: fiat_bp256_scalar_u1 = 0;
    let (x27, x28) = fiat_bp256_scalar_addcarryx_u32(x26, x22, x19);
    let mut x29: u32 = 0;
    let mut x30: fiat_bp256_scalar_u1 = 0;
    let (x29, x30) = fiat_bp256_scalar_addcarryx_u32(x28, x20, x17);
    let mut x31: u32 = 0;
    let mut x32: fiat_bp256_scalar_u1 = 0;
    let (x31, x32) = fiat_bp256_scalar_addcarryx_u32(x30, x18, x15);
    let mut x33: u32 = 0;
    let mut x34: fiat_bp256_scalar_u1 = 0;
    let (x33, x34) = fiat_bp256_scalar_addcarryx_u32(x32, x16, x13);
    let mut x35: u32 = 0;
    let mut x36: fiat_bp256_scalar_u1 = 0;
    let (x35, x36) = fiat_bp256_scalar_addcarryx_u32(x34, x14, x11);
    let mut x37: u32 = 0;
    let mut x38: fiat_bp256_scalar_u1 = 0;
    let (x37, x38) = fiat_bp256_scalar_addcarryx_u32(x36, x12, x9);
    let x39: u32 = ((x38 as u32) + x10);
    let mut x40: u32 = 0;
    let mut x41: u32 = 0;
    let (x40, x41) = fiat_bp256_scalar_mulx_u32(x23, 0xcbb40ee9);
    let mut x42: u32 = 0;
    let mut x43: u32 = 0;
    let (x42, x43) = fiat_bp256_scalar_mulx_u32(x40, 0xa9fb57db);
    let mut x44: u32 = 0;
    let mut x45: u32 = 0;
    let (x44, x45) = fiat_bp256_scalar_mulx_u32(x40, 0xa1eea9bc);
    let mut x46: u32 = 0;
    let mut x47: u32 = 0;
    let (x46, x47) = fiat_bp256_scalar_mulx_u32(x40, 0x3e660a90);
    let mut x48: u32 = 0;
    let mut x49: u32 = 0;
    let (x48, x49) = fiat_bp256_scalar_mulx_u32(x40, 0x9d838d71);
    let mut x50: u32 = 0;
    let mut x51: u32 = 0;
    let (x50, x51) = fiat_bp256_scalar_mulx_u32(x40, 0x8c397aa3);
    let mut x52: u32 = 0;
    let mut x53: u32 = 0;
    let (x52, x53) = fiat_bp256_scalar_mulx_u32(x40, 0xb561a6f7);
    let mut x54: u32 = 0;
    let mut x55: u32 = 0;
    let (x54, x55) = fiat_bp256_scalar_mulx_u32(x40, 0x901e0e82);
    let mut x56: u32 = 0;
    let mut x57: u32 = 0;
    let (x56, x57) = fiat_bp256_scalar_mulx_u32(x40, 0x974856a7);
    let mut x58: u32 = 0;
    let mut x59: fiat_bp256_scalar_u1 = 0;
    let (x58, x59) = fiat_bp256_scalar_addcarryx_u32(0x0, x57, x54);
    let mut x60: u32 = 0;
    let mut x61: fiat_bp256_scalar_u1 = 0;
    let (x60, x61) = fiat_bp256_scalar_addcarryx_u32(x59, x55, x52);
    let mut x62: u32 = 0;
    let mut x63: fiat_bp256_scalar_u1 = 0;
    let (x62, x63) = fiat_bp256_scalar_addcarryx_u32(x61, x53, x50);
    let mut x64: u32 = 0;
    let mut x65: fiat_bp256_scalar_u1 = 0;
    let (x64, x65) = fiat_bp256_scalar_addcarryx_u32(x63, x51, x48);
    let mut x66: u32 = 0;
    let mut x67: fiat_bp256_scalar_u1 = 0;
    let (x66, x67) = fiat_bp256_scalar_addcarryx_u32(x65, x49, x46);
    let mut x68: u32 = 0;
    let mut x69: fiat_bp256_scalar_u1 = 0;
    let (x68, x69) = fiat_bp256_scalar_addcarryx_u32(x67, x47, x44);
    let mut x70: u32 = 0;
    let mut x71: fiat_bp256_scalar_u1 = 0;
    let (x70, x71) = fiat_bp256_scalar_addcarryx_u32(x69, x45, x42);
    let x72: u32 = ((x71 as u32) + x43);
    let mut x73: u32 = 0;
    let mut x74: fiat_bp256_scalar_u1 = 0;
    let (x73, x74) = fiat_bp256_scalar_addcarryx_u32(0x0, x23, x56);
    let mut x75: u32 = 0;
    let mut x76: fiat_bp256_scalar_u1 = 0;
    let (x75, x76) = fiat_bp256_scalar_addcarryx_u32(x74, x25, x58);
    let mut x77: u32 = 0;
    let mut x78: fiat_bp256_scalar_u1 = 0;
    let (x77, x78) = fiat_bp256_scalar_addcarryx_u32(x76, x27, x60);
    let mut x79: u32 = 0;
    let mut x80: fiat_bp256_scalar_u1 = 0;
    let (x79, x80) = fiat_bp256_scalar_addcarryx_u32(x78, x29, x62);
    let mut x81: u32 = 0;
    let mut x82: fiat_bp256_scalar_u1 = 0;
    let (x81, x82) = fiat_bp256_scalar_addcarryx_u32(x80, x31, x64);
    let mut x83: u32 = 0;
    let mut x84: fiat_bp256_scalar_u1 = 0;
    let (x83, x84) = fiat_bp256_scalar_addcarryx_u32(x82, x33, x66);
    let mut x85: u32 = 0;
    let mut x86: fiat_bp256_scalar_u1 = 0;
    let (x85, x86) = fiat_bp256_scalar_addcarryx_u32(x84, x35, x68);
    let mut x87: u32 = 0;
    let mut x88: fiat_bp256_scalar_u1 = 0;
    let (x87, x88) = fiat_bp256_scalar_addcarryx_u32(x86, x37, x70);
    let mut x89: u32 = 0;
    let mut x90: fiat_bp256_scalar_u1 = 0;
    let (x89, x90) = fiat_bp256_scalar_addcarryx_u32(x88, x39, x72);
    let mut x91: u32 = 0;
    let mut x92: u32 = 0;
    let (x91, x92) = fiat_bp256_scalar_mulx_u32(x1, (arg2[7]));
    let mut x93: u32 = 0;
    let mut x94: u32 = 0;
    let (x93, x94) = fiat_bp256_scalar_mulx_u32(x1, (arg2[6]));
    let mut x95: u32 = 0;
    let mut x96: u32 = 0;
    let (x95, x96) = fiat_bp256_scalar_mulx_u32(x1, (arg2[5]));
    let mut x97: u32 = 0;
    let mut x98: u32 = 0;
    let (x97, x98) = fiat_bp256_scalar_mulx_u32(x1, (arg2[4]));
    let mut x99: u32 = 0;
    let mut x100: u32 = 0;
    let (x99, x100) = fiat_bp256_scalar_mulx_u32(x1, (arg2[3]));
    let mut x101: u32 = 0;
    let mut x102: u32 = 0;
    let (x101, x102) = fiat_bp256_scalar_mulx_u32(x1, (arg2[2]));
    let mut x103: u32 = 0;
    let mut x104: u32 = 0;
    let (x103, x104) = fiat_bp256_scalar_mulx_u32(x1, (arg2[1]));
    let mut x105: u32 = 0;
    let mut x106: u32 = 0;
    let (x105, x106) = fiat_bp256_scalar_mulx_u32(x1, (arg2[0]));
    let mut x107: u32 = 0;
    let mut x108: fiat_bp256_scalar_u1 = 0;
    let (x107, x108) = fiat_bp256_scalar_addcarryx_u32(0x0, x106, x103);
    let mut x109: u32 = 0;
    let mut x110: fiat_bp256_scalar_u1 = 0;
    let (x109, x110) = fiat_bp256_scalar_addcarryx_u32(x108, x104, x101);
    let mut x111: u32 = 0;
    let mut x112: fiat_bp256_scalar_u1 = 0;
    let (x111, x112) = fiat_bp256_scalar_addcarryx_u32(x110, x102, x99);
    let mut x113: u32 = 0;
    let mut x114: fiat_bp256_scalar_u1 = 0;
    let (x113, x114) = fiat_bp256_scalar_addcarryx_u32(x112, x100, x97);
    let mut x115: u32 = 0;
    let mut x116: fiat_bp256_scalar_u1 = 0;
    let (x115, x116) = fiat_bp256_scalar_addcarryx_u32(x114, x98, x95);
    let mut x117: u32 = 0;
    let mut x118: fiat_bp256_scalar_u1 = 0;
    let (x117, x118) = fiat_bp256_scalar_addcarryx_u32(x116, x96, x93);
    let mut x119: u32 = 0;
    let mut x120: fiat_bp256_scalar_u1 = 0;
    let (x119, x120) = fiat_bp256_scalar_addcarryx_u32(x118, x94, x91);
    let x121: u32 = ((x120 as u32) + x92);
    let mut x122: u32 = 0;
    let mut x123: fiat_bp256_scalar_u1 = 0;
    let (x122, x123) = fiat_bp256_scalar_addcarryx_u32(0x0, x75, x105);
    let mut x124: u32 = 0;
    let mut x125: fiat_bp256_scalar_u1 = 0;
    let (x124, x125) = fiat_bp256_scalar_addcarryx_u32(x123, x77, x107);
    let mut x126: u32 = 0;
    let mut x127: fiat_bp256_scalar_u1 = 0;
    let (x126, x127) = fiat_bp256_scalar_addcarryx_u32(x125, x79, x109);
    let mut x128: u32 = 0;
    let mut x129: fiat_bp256_scalar_u1 = 0;
    let (x128, x129) = fiat_bp256_scalar_addcarryx_u32(x127, x81, x111);
    let mut x130: u32 = 0;
    let mut x131: fiat_bp256_scalar_u1 = 0;
    let (x130, x131) = fiat_bp256_scalar_addcarryx_u32(x129, x83, x113);
    let mut x132: u32 = 0;
    let mut x133: fiat_bp256_scalar_u1 = 0;
    let (x132, x133) = fiat_bp256_scalar_addcarryx_u32(x131, x85, x115);
    let mut x134: u32 = 0;
    let mut x135: fiat_bp256_scalar_u1 = 0;
    let (x134, x135) = fiat_bp256_scalar_addcarryx_u32(x133, x87, x117);
    let mut x136: u32 = 0;
    let mut x137: fiat_bp256_scalar_u1 = 0;
    let (x136, x137) = fiat_bp256_scalar_addcarryx_u32(x135, x89, x119);
    let mut x138: u32 = 0;
    let mut x139: fiat_bp256_scalar_u1 = 0;
    let (x138, x139) = fiat_bp256_scalar_addcarryx_u32(x137, (x90 as u32), x121);
    let mut x140: u32 = 0;
    let mut x141: u32 = 0;
    let (x140, x141) = fiat_bp256_scalar_mulx_u32(x122, 0xcbb40ee9);
    let mut x142: u32 = 0;
    let mut x143: u32 = 0;
    let (x142, x143) = fiat_bp256_scalar_mulx_u32(x140, 0xa9fb57db);
    let mut x144: u32 = 0;
    let mut x145: u32 = 0;
    let (x144, x145) = fiat_bp256_scalar_mulx_u32(x140, 0xa1eea9bc);
    let mut x146: u32 = 0;
    let mut x147: u32 = 0;
    let (x146, x147) = fiat_bp256_scalar_mulx_u32(x140, 0x3e660a90);
    let mut x148: u32 = 0;
    let mut x149: u32 = 0;
    let (x148, x149) = fiat_bp256_scalar_mulx_u32(x140, 0x9d838d71);
    let mut x150: u32 = 0;
    let mut x151: u32 = 0;
    let (x150, x151) = fiat_bp256_scalar_mulx_u32(x140, 0x8c397aa3);
    let mut x152: u32 = 0;
    let mut x153: u32 = 0;
    let (x152, x153) = fiat_bp256_scalar_mulx_u32(x140, 0xb561a6f7);
    let mut x154: u32 = 0;
    let mut x155: u32 = 0;
    let (x154, x155) = fiat_bp256_scalar_mulx_u32(x140, 0x901e0e82);
    let mut x156: u32 = 0;
    let mut x157: u32 = 0;
    let (x156, x157) = fiat_bp256_scalar_mulx_u32(x140, 0x974856a7);
    let mut x158: u32 = 0;
    let mut x159: fiat_bp256_scalar_u1 = 0;
    let (x158, x159) = fiat_bp256_scalar_addcarryx_u32(0x0, x157, x154);
    let mut x160: u32 = 0;
    let mut x161: fiat_bp256_scalar_u1 = 0;
    let (x160, x161) = fiat_bp256_scalar_addcarryx_u32(x159, x155, x152);
    let mut x162: u32 = 0;
    let mut x163: fiat_bp256_scalar_u1 = 0;
    let (x162, x163) = fiat_bp256_scalar_addcarryx_u32(x161, x153, x150);
    let mut x164: u32 = 0;
    let mut x165: fiat_bp256_scalar_u1 = 0;
    let (x164, x165) = fiat_bp256_scalar_addcarryx_u32(x163, x151, x148);
    let mut x166: u32 = 0;
    let mut x167: fiat_bp256_scalar_u1 = 0;
    let (x166, x167) = fiat_bp256_scalar_addcarryx_u32(x165, x149, x146);
    let mut x168: u32 = 0;
    let mut x169: fiat_bp256_scalar_u1 = 0;
    let (x168, x169) = fiat_bp256_scalar_addcarryx_u32(x167, x147, x144);
    let mut x170: u32 = 0;
    let mut x171: fiat_bp256_scalar_u1 = 0;
    let (x170, x171) = fiat_bp256_scalar_addcarryx_u32(x169, x145, x142);
    let x172: u32 = ((x171 as u32) + x143);
    let mut x173: u32 = 0;
    let mut x174: fiat_bp256_scalar_u1 = 0;
    let (x173, x174) = fiat_bp256_scalar_addcarryx_u32(0x0, x122, x156);
    let mut x175: u32 = 0;
    let mut x176: fiat_bp256_scalar_u1 = 0;
    let (x175, x176) = fiat_bp256_scalar_addcarryx_u32(x174, x124, x158);
    let mut x177: u32 = 0;
    let mut x178: fiat_bp256_scalar_u1 = 0;
    let (x177, x178) = fiat_bp256_scalar_addcarryx_u32(x176, x126, x160);
    let mut x179: u32 = 0;
    let mut x180: fiat_bp256_scalar_u1 = 0;
    let (x179, x180) = fiat_bp256_scalar_addcarryx_u32(x178, x128, x162);
    let mut x181: u32 = 0;
    let mut x182: fiat_bp256_scalar_u1 = 0;
    let (x181, x182) = fiat_bp256_scalar_addcarryx_u32(x180, x130, x164);
    let mut x183: u32 = 0;
    let mut x184: fiat_bp256_scalar_u1 = 0;
    let (x183, x184) = fiat_bp256_scalar_addcarryx_u32(x182, x132, x166);
    let mut x185: u32 = 0;
    let mut x186: fiat_bp256_scalar_u1 = 0;
    let (x185, x186) = fiat_bp256_scalar_addcarryx_u32(x184, x134, x168);
    let mut x187: u32 = 0;
    let mut x188: fiat_bp256_scalar_u1 = 0;
    let (x187, x188) = fiat_bp256_scalar_addcarryx_u32(x186, x136, x170);
    let mut x189: u32 = 0;
    let mut x190: fiat_bp256_scalar_u1 = 0;
    let (x189, x190) = fiat_bp256_scalar_addcarryx_u32(x188, x138, x172);
    let x191: u32 = ((x190 as u32) + (x139 as u32));
    let mut x192: u32 = 0;
    let mut x193: u32 = 0;
    let (x192, x193) = fiat_bp256_scalar_mulx_u32(x2, (arg2[7]));
    let mut x194: u32 = 0;
    let mut x195: u32 = 0;
    let (x194, x195) = fiat_bp256_scalar_mulx_u32(x2, (arg2[6]));
    let mut x196: u32 = 0;
    let mut x197: u32 = 0;
    let (x196, x197) = fiat_bp256_scalar_mulx_u32(x2, (arg2[5]));
    let mut x198: u32 = 0;
    let mut x199: u32 = 0;
    let (x198, x199) = fiat_bp256_scalar_mulx_u32(x2, (arg2[4]));
    let mut x200: u32 = 0;
    let mut x201: u32 = 0;
    let (x200, x201) = fiat_bp256_scalar_mulx_u32(x2, (arg2[3]));
    let mut x202: u32 = 0;
    let mut x203: u32 = 0;
    let (x202, x203) = fiat_bp256_scalar_mulx_u32(x2, (arg2[2]));
    let mut x204: u32 = 0;
    let mut x205: u32 = 0;
    let (x204, x205) = fiat_bp256_scalar_mulx_u32(x2, (arg2[1]));
    let mut x206: u32 = 0;
    let mut x207: u32 = 0;
    let (x206, x207) = fiat_bp256_scalar_mulx_u32(x2, (arg2[0]));
    let mut x208: u32 = 0;
    let mut x209: fiat_bp256_scalar_u1 = 0;
    let (x208, x209) = fiat_bp256_scalar_addcarryx_u32(0x0, x207, x204);
    let mut x210: u32 = 0;
    let mut x211: fiat_bp256_scalar_u1 = 0;
    let (x210, x211) = fiat_bp256_scalar_addcarryx_u32(x209, x205, x202);
    let mut x212: u32 = 0;
    let mut x213: fiat_bp256_scalar_u1 = 0;
    let (x212, x213) = fiat_bp256_scalar_addcarryx_u32(x211, x203, x200);
    let mut x214: u32 = 0;
    let mut x215: fiat_bp256_scalar_u1 = 0;
    let (x214, x215) = fiat_bp256_scalar_addcarryx_u32(x213, x201, x198);
    let mut x216: u32 = 0;
    let mut x217: fiat_bp256_scalar_u1 = 0;
    let (x216, x217) = fiat_bp256_scalar_addcarryx_u32(x215, x199, x196);
    let mut x218: u32 = 0;
    let mut x219: fiat_bp256_scalar_u1 = 0;
    let (x218, x219) = fiat_bp256_scalar_addcarryx_u32(x217, x197, x194);
    let mut x220: u32 = 0;
    let mut x221: fiat_bp256_scalar_u1 = 0;
    let (x220, x221) = fiat_bp256_scalar_addcarryx_u32(x219, x195, x192);
    let x222: u32 = ((x221 as u32) + x193);
    let mut x223: u32 = 0;
    let mut x224: fiat_bp256_scalar_u1 = 0;
    let (x223, x224) = fiat_bp256_scalar_addcarryx_u32(0x0, x175, x206);
    let mut x225: u32 = 0;
    let mut x226: fiat_bp256_scalar_u1 = 0;
    let (x225, x226) = fiat_bp256_scalar_addcarryx_u32(x224, x177, x208);
    let mut x227: u32 = 0;
    let mut x228: fiat_bp256_scalar_u1 = 0;
    let (x227, x228) = fiat_bp256_scalar_addcarryx_u32(x226, x179, x210);
    let mut x229: u32 = 0;
    let mut x230: fiat_bp256_scalar_u1 = 0;
    let (x229, x230) = fiat_bp256_scalar_addcarryx_u32(x228, x181, x212);
    let mut x231: u32 = 0;
    let mut x232: fiat_bp256_scalar_u1 = 0;
    let (x231, x232) = fiat_bp256_scalar_addcarryx_u32(x230, x183, x214);
    let mut x233: u32 = 0;
    let mut x234: fiat_bp256_scalar_u1 = 0;
    let (x233, x234) = fiat_bp256_scalar_addcarryx_u32(x232, x185, x216);
    let mut x235: u32 = 0;
    let mut x236: fiat_bp256_scalar_u1 = 0;
    let (x235, x236) = fiat_bp256_scalar_addcarryx_u32(x234, x187, x218);
    let mut x237: u32 = 0;
    let mut x238: fiat_bp256_scalar_u1 = 0;
    let (x237, x238) = fiat_bp256_scalar_addcarryx_u32(x236, x189, x220);
    let mut x239: u32 = 0;
    let mut x240: fiat_bp256_scalar_u1 = 0;
    let (x239, x240) = fiat_bp256_scalar_addcarryx_u32(x238, x191, x222);
    let mut x241: u32 = 0;
    let mut x242: u32 = 0;
    let (x241, x242) = fiat_bp256_scalar_mulx_u32(x223, 0xcbb40ee9);
    let mut x243: u32 = 0;
    let mut x244: u32 = 0;
    let (x243, x244) = fiat_bp256_scalar_mulx_u32(x241, 0xa9fb57db);
    let mut x245: u32 = 0;
    let mut x246: u32 = 0;
    let (x245, x246) = fiat_bp256_scalar_mulx_u32(x241, 0xa1eea9bc);
    let mut x247: u32 = 0;
    let mut x248: u32 = 0;
    let (x247, x248) = fiat_bp256_scalar_mulx_u32(x241, 0x3e660a90);
    let mut x249: u32 = 0;
    let mut x250: u32 = 0;
    let (x249, x250) = fiat_bp256_scalar_mulx_u32(x241, 0x9d838d71);
    let mut x251: u32 = 0;
    let mut x252: u32 = 0;
    let (x251, x252) = fiat_bp256_scalar_mulx_u32(x241, 0x8c397aa3);
    let mut x253: u32 = 0;
    let mut x254: u32 = 0;
    let (x253, x254) = fiat_bp256_scalar_mulx_u32(x241, 0xb561a6f7);
    let mut x255: u32 = 0;
    let mut x256: u32 = 0;
    let (x255, x256) = fiat_bp256_scalar_mulx_u32(x241, 0x901e0e82);
    let mut x257: u32 = 0;
    let mut x258: u32 = 0;
    let (x257, x258) = fiat_bp256_scalar_mulx_u32(x241, 0x974856a7);
    let mut x259: u32 = 0;
    let mut x260: fiat_bp256_scalar_u1 = 0;
    let (x259, x260) = fiat_bp256_scalar_addcarryx_u32(0x0, x258, x255);
    let mut x261: u32 = 0;
    let mut x262: fiat_bp256_scalar_u1 = 0;
    let (x261, x262) = fiat_bp256_scalar_addcarryx_u32(x260, x256, x253);
    let mut x263: u32 = 0;
    let mut x264: fiat_bp256_scalar_u1 = 0;
    let (x263, x264) = fiat_bp256_scalar_addcarryx_u32(x262, x254, x251);
    let mut x265: u32 = 0;
    let mut x266: fiat_bp256_scalar_u1 = 0;
    let (x265, x266) = fiat_bp256_scalar_addcarryx_u32(x264, x252, x249);
    let mut x267: u32 = 0;
    let mut x268: fiat_bp256_scalar_u1 = 0;
    let (x267, x268) = fiat_bp256_scalar_addcarryx_u32(x266, x250, x247);
    let mut x269: u32 = 0;
    let mut x270: fiat_bp256_scalar_u1 = 0;
    let (x269, x270) = fiat_bp256_scalar_addcarryx_u32(x268, x248, x245);
    let mut x271: u32 = 0;
    let mut x272: fiat_bp256_scalar_u1 = 0;
    let (x271, x272) = fiat_bp256_scalar_addcarryx_u32(x270, x246, x243);
    let x273: u32 = ((x272 as u32) + x244);
    let mut x274: u32 = 0;
    let mut x275: fiat_bp256_scalar_u1 = 0;
    let (x274, x275) = fiat_bp256_scalar_addcarryx_u32(0x0, x223, x257);
    let mut x276: u32 = 0;
    let mut x277: fiat_bp256_scalar_u1 = 0;
    let (x276, x277) = fiat_bp256_scalar_addcarryx_u32(x275, x225, x259);
    let mut x278: u32 = 0;
    let mut x279: fiat_bp256_scalar_u1 = 0;
    let (x278, x279) = fiat_bp256_scalar_addcarryx_u32(x277, x227, x261);
    let mut x280: u32 = 0;
    let mut x281: fiat_bp256_scalar_u1 = 0;
    let (x280, x281) = fiat_bp256_scalar_addcarryx_u32(x279, x229, x263);
    let mut x282: u32 = 0;
    let mut x283: fiat_bp256_scalar_u1 = 0;
    let (x282, x283) = fiat_bp256_scalar_addcarryx_u32(x281, x231, x265);
    let mut x284: u32 = 0;
    let mut x285: fiat_bp256_scalar_u1 = 0;
    let (x284, x285) = fiat_bp256_scalar_addcarryx_u32(x283, x233, x267);
    let mut x286: u32 = 0;
    let mut x287: fiat_bp256_scalar_u1 = 0;
    let (x286, x287) = fiat_bp256_scalar_addcarryx_u32(x285, x235, x269);
    let mut x288: u32 = 0;
    let mut x289: fiat_bp256_scalar_u1 = 0;
    let (x288, x289) = fiat_bp256_scalar_addcarryx_u32(x287, x237, x271);
    let mut x290: u32 = 0;
    let mut x291: fiat_bp256_scalar_u1 = 0;
    let (x290, x291) = fiat_bp256_scalar_addcarryx_u32(x289, x239, x273);
    let x292: u32 = ((x291 as u32) + (x240 as u32));
    let mut x293: u32 = 0;
    let mut x294: u32 = 0;
    let (x293, x294) = fiat_bp256_scalar_mulx_u32(x3, (arg2[7]));
    let mut x295: u32 = 0;
    let mut x296: u32 = 0;
    let (x295, x296) = fiat_bp256_scalar_mulx_u32(x3, (arg2[6]));
    let mut x297: u32 = 0;
    let mut x298: u32 = 0;
    let (x297, x298) = fiat_bp256_scalar_mulx_u32(x3, (arg2[5]));
    let mut x299: u32 = 0;
    let mut x300: u32 = 0;
    let (x299, x300) = fiat_bp256_scalar_mulx_u32(x3, (arg2[4]));
    let mut x301: u32 = 0;
    let mut x302: u32 = 0;
    let (x301, x302) = fiat_bp256_scalar_mulx_u32(x3, (arg2[3]));
    let mut x303: u32 = 0;
    let mut x304: u32 = 0;
    let (x303, x304) = fiat_bp256_scalar_mulx_u32(x3, (arg2[2]));
    let mut x305: u32 = 0;
    let mut x306: u32 = 0;
    let (x305, x306) = fiat_bp256_scalar_mulx_u32(x3, (arg2[1]));
    let mut x307: u32 = 0;
    let mut x308: u32 = 0;
    let (x307, x308) = fiat_bp256_scalar_mulx_u32(x3, (arg2[0]));
    let mut x309: u32 = 0;
    let mut x310: fiat_bp256_scalar_u1 = 0;
    let (x309, x310) = fiat_bp256_scalar_addcarryx_u32(0x0, x308, x305);
    let mut x311: u32 = 0;
    let mut x312: fiat_bp256_scalar_u1 = 0;
    let (x311, x312) = fiat_bp256_scalar_addcarryx_u32(x310, x306, x303);
    let mut x313: u32 = 0;
    let mut x314: fiat_bp256_scalar_u1 = 0;
    let (x313, x314) = fiat_bp256_scalar_addcarryx_u32(x312, x304, x301);
    let mut x315: u32 = 0;
    let mut x316: fiat_bp256_scalar_u1 = 0;
    let (x315, x316) = fiat_bp256_scalar_addcarryx_u32(x314, x302, x299);
    let mut x317: u32 = 0;
    let mut x318: fiat_bp256_scalar_u1 = 0;
    let (x317, x318) = fiat_bp256_scalar_addcarryx_u32(x316, x300, x297);
    let mut x319: u32 = 0;
    let mut x320: fiat_bp256_scalar_u1 = 0;
    let (x319, x320) = fiat_bp256_scalar_addcarryx_u32(x318, x298, x295);
    let mut x321: u32 = 0;
    let mut x322: fiat_bp256_scalar_u1 = 0;
    let (x321, x322) = fiat_bp256_scalar_addcarryx_u32(x320, x296, x293);
    let x323: u32 = ((x322 as u32) + x294);
    let mut x324: u32 = 0;
    let mut x325: fiat_bp256_scalar_u1 = 0;
    let (x324, x325) = fiat_bp256_scalar_addcarryx_u32(0x0, x276, x307);
    let mut x326: u32 = 0;
    let mut x327: fiat_bp256_scalar_u1 = 0;
    let (x326, x327) = fiat_bp256_scalar_addcarryx_u32(x325, x278, x309);
    let mut x328: u32 = 0;
    let mut x329: fiat_bp256_scalar_u1 = 0;
    let (x328, x329) = fiat_bp256_scalar_addcarryx_u32(x327, x280, x311);
    let mut x330: u32 = 0;
    let mut x331: fiat_bp256_scalar_u1 = 0;
    let (x330, x331) = fiat_bp256_scalar_addcarryx_u32(x329, x282, x313);
    let mut x332: u32 = 0;
    let mut x333: fiat_bp256_scalar_u1 = 0;
    let (x332, x333) = fiat_bp256_scalar_addcarryx_u32(x331, x284, x315);
    let mut x334: u32 = 0;
    let mut x335: fiat_bp256_scalar_u1 = 0;
    let (x334, x335) = fiat_bp256_scalar_addcarryx_u32(x333, x286, x317);
    let mut x336: u32 = 0;
    let mut x337: fiat_bp256_scalar_u1 = 0;
    let (x336, x337) = fiat_bp256_scalar_addcarryx_u32(x335, x288, x319);
    let mut x338: u32 = 0;
    let mut x339: fiat_bp256_scalar_u1 = 0;
    let (x338, x339) = fiat_bp256_scalar_addcarryx_u32(x337, x290, x321);
    let mut x340: u32 = 0;
    let mut x341: fiat_bp256_scalar_u1 = 0;
    let (x340, x341) = fiat_bp256_scalar_addcarryx_u32(x339, x292, x323);
    let mut x342: u32 = 0;
    let mut x343: u32 = 0;
    let (x342, x343) = fiat_bp256_scalar_mulx_u32(x324, 0xcbb40ee9);
    let mut x344: u32 = 0;
    let mut x345: u32 = 0;
    let (x344, x345) = fiat_bp256_scalar_mulx_u32(x342, 0xa9fb57db);
    let mut x346: u32 = 0;
    let mut x347: u32 = 0;
    let (x346, x347) = fiat_bp256_scalar_mulx_u32(x342, 0xa1eea9bc);
    let mut x348: u32 = 0;
    let mut x349: u32 = 0;
    let (x348, x349) = fiat_bp256_scalar_mulx_u32(x342, 0x3e660a90);
    let mut x350: u32 = 0;
    let mut x351: u32 = 0;
    let (x350, x351) = fiat_bp256_scalar_mulx_u32(x342, 0x9d838d71);
    let mut x352: u32 = 0;
    let mut x353: u32 = 0;
    let (x352, x353) = fiat_bp256_scalar_mulx_u32(x342, 0x8c397aa3);
    let mut x354: u32 = 0;
    let mut x355: u32 = 0;
    let (x354, x355) = fiat_bp256_scalar_mulx_u32(x342, 0xb561a6f7);
    let mut x356: u32 = 0;
    let mut x357: u32 = 0;
    let (x356, x357) = fiat_bp256_scalar_mulx_u32(x342, 0x901e0e82);
    let mut x358: u32 = 0;
    let mut x359: u32 = 0;
    let (x358, x359) = fiat_bp256_scalar_mulx_u32(x342, 0x974856a7);
    let mut x360: u32 = 0;
    let mut x361: fiat_bp256_scalar_u1 = 0;
    let (x360, x361) = fiat_bp256_scalar_addcarryx_u32(0x0, x359, x356);
    let mut x362: u32 = 0;
    let mut x363: fiat_bp256_scalar_u1 = 0;
    let (x362, x363) = fiat_bp256_scalar_addcarryx_u32(x361, x357, x354);
    let mut x364: u32 = 0;
    let mut x365: fiat_bp256_scalar_u1 = 0;
    let (x364, x365) = fiat_bp256_scalar_addcarryx_u32(x363, x355, x352);
    let mut x366: u32 = 0;
    let mut x367: fiat_bp256_scalar_u1 = 0;
    let (x366, x367) = fiat_bp256_scalar_addcarryx_u32(x365, x353, x350);
    let mut x368: u32 = 0;
    let mut x369: fiat_bp256_scalar_u1 = 0;
    let (x368, x369) = fiat_bp256_scalar_addcarryx_u32(x367, x351, x348);
    let mut x370: u32 = 0;
    let mut x371: fiat_bp256_scalar_u1 = 0;
    let (x370, x371) = fiat_bp256_scalar_addcarryx_u32(x369, x349, x346);
    let mut x372: u32 = 0;
    let mut x373: fiat_bp256_scalar_u1 = 0;
    let (x372, x373) = fiat_bp256_scalar_addcarryx_u32(x371, x347, x344);
    let x374: u32 = ((x373 as u32) + x345);
    let mut x375: u32 = 0;
    let mut x376: fiat_bp256_scalar_u1 = 0;
    let (x375, x376) = fiat_bp256_scalar_addcarryx_u32(0x0, x324, x358);
    let mut x377: u32 = 0;
    let mut x378: fiat_bp256_scalar_u1 = 0;
    let (x377, x378) = fiat_bp256_scalar_addcarryx_u32(x376, x326, x360);
    let mut x379: u32 = 0;
    let mut x380: fiat_bp256_scalar_u1 = 0;
    let (x379, x380) = fiat_bp256_scalar_addcarryx_u32(x378, x328, x362);
    let mut x381: u32 = 0;
    let mut x382: fiat_bp256_scalar_u1 = 0;
    let (x381, x382) = fiat_bp256_scalar_addcarryx_u32(x380, x330, x364);
    let mut x383: u32 = 0;
    let mut x384: fiat_bp256_scalar_u1 = 0;
    let (x383, x384) = fiat_bp256_scalar_addcarryx_u32(x382, x332, x366);
    let mut x385: u32 = 0;
    let mut x386: fiat_bp256_scalar_u1 = 0;
    let (x385, x386) = fiat_bp256_scalar_addcarryx_u32(x384, x334, x368);
    let mut x387: u32 = 0;
    let mut x388: fiat_bp256_scalar_u1 = 0;
    let (x387, x388) = fiat_bp256_scalar_addcarryx_u32(x386, x336, x370);
    let mut x389: u32 = 0;
    let mut x390: fiat_bp256_scalar_u1 = 0;
    let (x389, x390) = fiat_bp256_scalar_addcarryx_u32(x388, x338, x372);
    let mut x391: u32 = 0;
    let mut x392: fiat_bp256_scalar_u1 = 0;
    let (x391, x392) = fiat_bp256_scalar_addcarryx_u32(x390, x340, x374);
    let x393: u32 = ((x392 as u32) + (x341 as u32));
    let mut x394: u32 = 0;
    let mut x395: u32 = 0;
    let (x394, x395) = fiat_bp256_scalar_mulx_u32(x4, (arg2[7]));
    let mut x396: u32 = 0;
    let mut x397: u32 = 0;
    let (x396, x397) = fiat_bp256_scalar_mulx_u32(x4, (arg2[6]));
    let mut x398: u32 = 0;
    let mut x399: u32 = 0;
    let (x398, x399) = fiat_bp256_scalar_mulx_u32(x4, (arg2[5]));
    let mut x400: u32 = 0;
    let mut x401: u32 = 0;
    let (x400, x401) = fiat_bp256_scalar_mulx_u32(x4, (arg2[4]));
    let mut x402: u32 = 0;
    let mut x403: u32 = 0;
    let (x402, x403) = fiat_bp256_scalar_mulx_u32(x4, (arg2[3]));
    let mut x404: u32 = 0;
    let mut x405: u32 = 0;
    let (x404, x405) = fiat_bp256_scalar_mulx_u32(x4, (arg2[2]));
    let mut x406: u32 = 0;
    let mut x407: u32 = 0;
    let (x406, x407) = fiat_bp256_scalar_mulx_u32(x4, (arg2[1]));
    let mut x408: u32 = 0;
    let mut x409: u32 = 0;
    let (x408, x409) = fiat_bp256_scalar_mulx_u32(x4, (arg2[0]));
    let mut x410: u32 = 0;
    let mut x411: fiat_bp256_scalar_u1 = 0;
    let (x410, x411) = fiat_bp256_scalar_addcarryx_u32(0x0, x409, x406);
    let mut x412: u32 = 0;
    let mut x413: fiat_bp256_scalar_u1 = 0;
    let (x412, x413) = fiat_bp256_scalar_addcarryx_u32(x411, x407, x404);
    let mut x414: u32 = 0;
    let mut x415: fiat_bp256_scalar_u1 = 0;
    let (x414, x415) = fiat_bp256_scalar_addcarryx_u32(x413, x405, x402);
    let mut x416: u32 = 0;
    let mut x417: fiat_bp256_scalar_u1 = 0;
    let (x416, x417) = fiat_bp256_scalar_addcarryx_u32(x415, x403, x400);
    let mut x418: u32 = 0;
    let mut x419: fiat_bp256_scalar_u1 = 0;
    let (x418, x419) = fiat_bp256_scalar_addcarryx_u32(x417, x401, x398);
    let mut x420: u32 = 0;
    let mut x421: fiat_bp256_scalar_u1 = 0;
    let (x420, x421) = fiat_bp256_scalar_addcarryx_u32(x419, x399, x396);
    let mut x422: u32 = 0;
    let mut x423: fiat_bp256_scalar_u1 = 0;
    let (x422, x423) = fiat_bp256_scalar_addcarryx_u32(x421, x397, x394);
    let x424: u32 = ((x423 as u32) + x395);
    let mut x425: u32 = 0;
    let mut x426: fiat_bp256_scalar_u1 = 0;
    let (x425, x426) = fiat_bp256_scalar_addcarryx_u32(0x0, x377, x408);
    let mut x427: u32 = 0;
    let mut x428: fiat_bp256_scalar_u1 = 0;
    let (x427, x428) = fiat_bp256_scalar_addcarryx_u32(x426, x379, x410);
    let mut x429: u32 = 0;
    let mut x430: fiat_bp256_scalar_u1 = 0;
    let (x429, x430) = fiat_bp256_scalar_addcarryx_u32(x428, x381, x412);
    let mut x431: u32 = 0;
    let mut x432: fiat_bp256_scalar_u1 = 0;
    let (x431, x432) = fiat_bp256_scalar_addcarryx_u32(x430, x383, x414);
    let mut x433: u32 = 0;
    let mut x434: fiat_bp256_scalar_u1 = 0;
    let (x433, x434) = fiat_bp256_scalar_addcarryx_u32(x432, x385, x416);
    let mut x435: u32 = 0;
    let mut x436: fiat_bp256_scalar_u1 = 0;
    let (x435, x436) = fiat_bp256_scalar_addcarryx_u32(x434, x387, x418);
    let mut x437: u32 = 0;
    let mut x438: fiat_bp256_scalar_u1 = 0;
    let (x437, x438) = fiat_bp256_scalar_addcarryx_u32(x436, x389, x420);
    let mut x439: u32 = 0;
    let mut x440: fiat_bp256_scalar_u1 = 0;
    let (x439, x440) = fiat_bp256_scalar_addcarryx_u32(x438, x391, x422);
    let mut x441: u32 = 0;
    let mut x442: fiat_bp256_scalar_u1 = 0;
    let (x441, x442) = fiat_bp256_scalar_addcarryx_u32(x440, x393, x424);
    let mut x443: u32 = 0;
    let mut x444: u32 = 0;
    let (x443, x444) = fiat_bp256_scalar_mulx_u32(x425, 0xcbb40ee9);
    let mut x445: u32 = 0;
    let mut x446: u32 = 0;
    let (x445, x446) = fiat_bp256_scalar_mulx_u32(x443, 0xa9fb57db);
    let mut x447: u32 = 0;
    let mut x448: u32 = 0;
    let (x447, x448) = fiat_bp256_scalar_mulx_u32(x443, 0xa1eea9bc);
    let mut x449: u32 = 0;
    let mut x450: u32 = 0;
    let (x449, x450) = fiat_bp256_scalar_mulx_u32(x443, 0x3e660a90);
    let mut x451: u32 = 0;
    let mut x452: u32 = 0;
    let (x451, x452) = fiat_bp256_scalar_mulx_u32(x443, 0x9d838d71);
    let mut x453: u32 = 0;
    let mut x454: u32 = 0;
    let (x453, x454) = fiat_bp256_scalar_mulx_u32(x443, 0x8c397aa3);
    let mut x455: u32 = 0;
    let mut x456: u32 = 0;
    let (x455, x456) = fiat_bp256_scalar_mulx_u32(x443, 0xb561a6f7);
    let mut x457: u32 = 0;
    let mut x458: u32 = 0;
    let (x457, x458) = fiat_bp256_scalar_mulx_u32(x443, 0x901e0e82);
    let mut x459: u32 = 0;
    let mut x460: u32 = 0;
    let (x459, x460) = fiat_bp256_scalar_mulx_u32(x443, 0x974856a7);
    let mut x461: u32 = 0;
    let mut x462: fiat_bp256_scalar_u1 = 0;
    let (x461, x462) = fiat_bp256_scalar_addcarryx_u32(0x0, x460, x457);
    let mut x463: u32 = 0;
    let mut x464: fiat_bp256_scalar_u1 = 0;
    let (x463, x464) = fiat_bp256_scalar_addcarryx_u32(x462, x458, x455);
    let mut x465: u32 = 0;
    let mut x466: fiat_bp256_scalar_u1 = 0;
    let (x465, x466) = fiat_bp256_scalar_addcarryx_u32(x464, x456, x453);
    let mut x467: u32 = 0;
    let mut x468: fiat_bp256_scalar_u1 = 0;
    let (x467, x468) = fiat_bp256_scalar_addcarryx_u32(x466, x454, x451);
    let mut x469: u32 = 0;
    let mut x470: fiat_bp256_scalar_u1 = 0;
    let (x469, x470) = fiat_bp256_scalar_addcarryx_u32(x468, x452, x449);
    let mut x471: u32 = 0;
    let mut x472: fiat_bp256_scalar_u1 = 0;
    let (x471, x472) = fiat_bp256_scalar_addcarryx_u32(x470, x450, x447);
    let mut x473: u32 = 0;
    let mut x474: fiat_bp256_scalar_u1 = 0;
    let (x473, x474) = fiat_bp256_scalar_addcarryx_u32(x472, x448, x445);
    let x475: u32 = ((x474 as u32) + x446);
    let mut x476: u32 = 0;
    let mut x477: fiat_bp256_scalar_u1 = 0;
    let (x476, x477) = fiat_bp256_scalar_addcarryx_u32(0x0, x425, x459);
    let mut x478: u32 = 0;
    let mut x479: fiat_bp256_scalar_u1 = 0;
    let (x478, x479) = fiat_bp256_scalar_addcarryx_u32(x477, x427, x461);
    let mut x480: u32 = 0;
    let mut x481: fiat_bp256_scalar_u1 = 0;
    let (x480, x481) = fiat_bp256_scalar_addcarryx_u32(x479, x429, x463);
    let mut x482: u32 = 0;
    let mut x483: fiat_bp256_scalar_u1 = 0;
    let (x482, x483) = fiat_bp256_scalar_addcarryx_u32(x481, x431, x465);
    let mut x484: u32 = 0;
    let mut x485: fiat_bp256_scalar_u1 = 0;
    let (x484, x485) = fiat_bp256_scalar_addcarryx_u32(x483, x433, x467);
    let mut x486: u32 = 0;
    let mut x487: fiat_bp256_scalar_u1 = 0;
    let (x486, x487) = fiat_bp256_scalar_addcarryx_u32(x485, x435, x469);
    let mut x488: u32 = 0;
    let mut x489: fiat_bp256_scalar_u1 = 0;
    let (x488, x489) = fiat_bp256_scalar_addcarryx_u32(x487, x437, x471);
    let mut x490: u32 = 0;
    let mut x491: fiat_bp256_scalar_u1 = 0;
    let (x490, x491) = fiat_bp256_scalar_addcarryx_u32(x489, x439, x473);
    let mut x492: u32 = 0;
    let mut x493: fiat_bp256_scalar_u1 = 0;
    let (x492, x493) = fiat_bp256_scalar_addcarryx_u32(x491, x441, x475);
    let x494: u32 = ((x493 as u32) + (x442 as u32));
    let mut x495: u32 = 0;
    let mut x496: u32 = 0;
    let (x495, x496) = fiat_bp256_scalar_mulx_u32(x5, (arg2[7]));
    let mut x497: u32 = 0;
    let mut x498: u32 = 0;
    let (x497, x498) = fiat_bp256_scalar_mulx_u32(x5, (arg2[6]));
    let mut x499: u32 = 0;
    let mut x500: u32 = 0;
    let (x499, x500) = fiat_bp256_scalar_mulx_u32(x5, (arg2[5]));
    let mut x501: u32 = 0;
    let mut x502: u32 = 0;
    let (x501, x502) = fiat_bp256_scalar_mulx_u32(x5, (arg2[4]));
    let mut x503: u32 = 0;
    let mut x504: u32 = 0;
    let (x503, x504) = fiat_bp256_scalar_mulx_u32(x5, (arg2[3]));
    let mut x505: u32 = 0;
    let mut x506: u32 = 0;
    let (x505, x506) = fiat_bp256_scalar_mulx_u32(x5, (arg2[2]));
    let mut x507: u32 = 0;
    let mut x508: u32 = 0;
    let (x507, x508) = fiat_bp256_scalar_mulx_u32(x5, (arg2[1]));
    let mut x509: u32 = 0;
    let mut x510: u32 = 0;
    let (x509, x510) = fiat_bp256_scalar_mulx_u32(x5, (arg2[0]));
    let mut x511: u32 = 0;
    let mut x512: fiat_bp256_scalar_u1 = 0;
    let (x511, x512) = fiat_bp256_scalar_addcarryx_u32(0x0, x510, x507);
    let mut x513: u32 = 0;
    let mut x514: fiat_bp256_scalar_u1 = 0;
    let (x513, x514) = fiat_bp256_scalar_addcarryx_u32(x512, x508, x505);
    let mut x515: u32 = 0;
    let mut x516: fiat_bp256_scalar_u1 = 0;
    let (x515, x516) = fiat_bp256_scalar_addcarryx_u32(x514, x506, x503);
    let mut x517: u32 = 0;
    let mut x518: fiat_bp256_scalar_u1 = 0;
    let (x517, x518) = fiat_bp256_scalar_addcarryx_u32(x516, x504, x501);
    let mut x519: u32 = 0;
    let mut x520: fiat_bp256_scalar_u1 = 0;
    let (x519, x520) = fiat_bp256_scalar_addcarryx_u32(x518, x502, x499);
    let mut x521: u32 = 0;
    let mut x522: fiat_bp256_scalar_u1 = 0;
    let (x521, x522) = fiat_bp256_scalar_addcarryx_u32(x520, x500, x497);
    let mut x523: u32 = 0;
    let mut x524: fiat_bp256_scalar_u1 = 0;
    let (x523, x524) = fiat_bp256_scalar_addcarryx_u32(x522, x498, x495);
    let x525: u32 = ((x524 as u32) + x496);
    let mut x526: u32 = 0;
    let mut x527: fiat_bp256_scalar_u1 = 0;
    let (x526, x527) = fiat_bp256_scalar_addcarryx_u32(0x0, x478, x509);
    let mut x528: u32 = 0;
    let mut x529: fiat_bp256_scalar_u1 = 0;
    let (x528, x529) = fiat_bp256_scalar_addcarryx_u32(x527, x480, x511);
    let mut x530: u32 = 0;
    let mut x531: fiat_bp256_scalar_u1 = 0;
    let (x530, x531) = fiat_bp256_scalar_addcarryx_u32(x529, x482, x513);
    let mut x532: u32 = 0;
    let mut x533: fiat_bp256_scalar_u1 = 0;
    let (x532, x533) = fiat_bp256_scalar_addcarryx_u32(x531, x484, x515);
    let mut x534: u32 = 0;
    let mut x535: fiat_bp256_scalar_u1 = 0;
    let (x534, x535) = fiat_bp256_scalar_addcarryx_u32(x533, x486, x517);
    let mut x536: u32 = 0;
    let mut x537: fiat_bp256_scalar_u1 = 0;
    let (x536, x537) = fiat_bp256_scalar_addcarryx_u32(x535, x488, x519);
    let mut x538: u32 = 0;
    let mut x539: fiat_bp256_scalar_u1 = 0;
    let (x538, x539) = fiat_bp256_scalar_addcarryx_u32(x537, x490, x521);
    let mut x540: u32 = 0;
    let mut x541: fiat_bp256_scalar_u1 = 0;
    let (x540, x541) = fiat_bp256_scalar_addcarryx_u32(x539, x492, x523);
    let mut x542: u32 = 0;
    let mut x543: fiat_bp256_scalar_u1 = 0;
    let (x542, x543) = fiat_bp256_scalar_addcarryx_u32(x541, x494, x525);
    let mut x544: u32 = 0;
    let mut x545: u32 = 0;
    let (x544, x545) = fiat_bp256_scalar_mulx_u32(x526, 0xcbb40ee9);
    let mut x546: u32 = 0;
    let mut x547: u32 = 0;
    let (x546, x547) = fiat_bp256_scalar_mulx_u32(x544, 0xa9fb57db);
    let mut x548: u32 = 0;
    let mut x549: u32 = 0;
    let (x548, x549) = fiat_bp256_scalar_mulx_u32(x544, 0xa1eea9bc);
    let mut x550: u32 = 0;
    let mut x551: u32 = 0;
    let (x550, x551) = fiat_bp256_scalar_mulx_u32(x544, 0x3e660a90);
    let mut x552: u32 = 0;
    let mut x553: u32 = 0;
    let (x552, x553) = fiat_bp256_scalar_mulx_u32(x544, 0x9d838d71);
    let mut x554: u32 = 0;
    let mut x555: u32 = 0;
    let (x554, x555) = fiat_bp256_scalar_mulx_u32(x544, 0x8c397aa3);
    let mut x556: u32 = 0;
    let mut x557: u32 = 0;
    let (x556, x557) = fiat_bp256_scalar_mulx_u32(x544, 0xb561a6f7);
    let mut x558: u32 = 0;
    let mut x559: u32 = 0;
    let (x558, x559) = fiat_bp256_scalar_mulx_u32(x544, 0x901e0e82);
    let mut x560: u32 = 0;
    let mut x561: u32 = 0;
    let (x560, x561) = fiat_bp256_scalar_mulx_u32(x544, 0x974856a7);
    let mut x562: u32 = 0;
    let mut x563: fiat_bp256_scalar_u1 = 0;
    let (x562, x563) = fiat_bp256_scalar_addcarryx_u32(0x0, x561, x558);
    let mut x564: u32 = 0;
    let mut x565: fiat_bp256_scalar_u1 = 0;
    let (x564, x565) = fiat_bp256_scalar_addcarryx_u32(x563, x559, x556);
    let mut x566: u32 = 0;
    let mut x567: fiat_bp256_scalar_u1 = 0;
    let (x566, x567) = fiat_bp256_scalar_addcarryx_u32(x565, x557, x554);
    let mut x568: u32 = 0;
    let mut x569: fiat_bp256_scalar_u1 = 0;
    let (x568, x569) = fiat_bp256_scalar_addcarryx_u32(x567, x555, x552);
    let mut x570: u32 = 0;
    let mut x571: fiat_bp256_scalar_u1 = 0;
    let (x570, x571) = fiat_bp256_scalar_addcarryx_u32(x569, x553, x550);
    let mut x572: u32 = 0;
    let mut x573: fiat_bp256_scalar_u1 = 0;
    let (x572, x573) = fiat_bp256_scalar_addcarryx_u32(x571, x551, x548);
    let mut x574: u32 = 0;
    let mut x575: fiat_bp256_scalar_u1 = 0;
    let (x574, x575) = fiat_bp256_scalar_addcarryx_u32(x573, x549, x546);
    let x576: u32 = ((x575 as u32) + x547);
    let mut x577: u32 = 0;
    let mut x578: fiat_bp256_scalar_u1 = 0;
    let (x577, x578) = fiat_bp256_scalar_addcarryx_u32(0x0, x526, x560);
    let mut x579: u32 = 0;
    let mut x580: fiat_bp256_scalar_u1 = 0;
    let (x579, x580) = fiat_bp256_scalar_addcarryx_u32(x578, x528, x562);
    let mut x581: u32 = 0;
    let mut x582: fiat_bp256_scalar_u1 = 0;
    let (x581, x582) = fiat_bp256_scalar_addcarryx_u32(x580, x530, x564);
    let mut x583: u32 = 0;
    let mut x584: fiat_bp256_scalar_u1 = 0;
    let (x583, x584) = fiat_bp256_scalar_addcarryx_u32(x582, x532, x566);
    let mut x585: u32 = 0;
    let mut x586: fiat_bp256_scalar_u1 = 0;
    let (x585, x586) = fiat_bp256_scalar_addcarryx_u32(x584, x534, x568);
    let mut x587: u32 = 0;
    let mut x588: fiat_bp256_scalar_u1 = 0;
    let (x587, x588) = fiat_bp256_scalar_addcarryx_u32(x586, x536, x570);
    let mut x589: u32 = 0;
    let mut x590: fiat_bp256_scalar_u1 = 0;
    let (x589, x590) = fiat_bp256_scalar_addcarryx_u32(x588, x538, x572);
    let mut x591: u32 = 0;
    let mut x592: fiat_bp256_scalar_u1 = 0;
    let (x591, x592) = fiat_bp256_scalar_addcarryx_u32(x590, x540, x574);
    let mut x593: u32 = 0;
    let mut x594: fiat_bp256_scalar_u1 = 0;
    let (x593, x594) = fiat_bp256_scalar_addcarryx_u32(x592, x542, x576);
    let x595: u32 = ((x594 as u32) + (x543 as u32));
    let mut x596: u32 = 0;
    let mut x597: u32 = 0;
    let (x596, x597) = fiat_bp256_scalar_mulx_u32(x6, (arg2[7]));
    let mut x598: u32 = 0;
    let mut x599: u32 = 0;
    let (x598, x599) = fiat_bp256_scalar_mulx_u32(x6, (arg2[6]));
    let mut x600: u32 = 0;
    let mut x601: u32 = 0;
    let (x600, x601) = fiat_bp256_scalar_mulx_u32(x6, (arg2[5]));
    let mut x602: u32 = 0;
    let mut x603: u32 = 0;
    let (x602, x603) = fiat_bp256_scalar_mulx_u32(x6, (arg2[4]));
    let mut x604: u32 = 0;
    let mut x605: u32 = 0;
    let (x604, x605) = fiat_bp256_scalar_mulx_u32(x6, (arg2[3]));
    let mut x606: u32 = 0;
    let mut x607: u32 = 0;
    let (x606, x607) = fiat_bp256_scalar_mulx_u32(x6, (arg2[2]));
    let mut x608: u32 = 0;
    let mut x609: u32 = 0;
    let (x608, x609) = fiat_bp256_scalar_mulx_u32(x6, (arg2[1]));
    let mut x610: u32 = 0;
    let mut x611: u32 = 0;
    let (x610, x611) = fiat_bp256_scalar_mulx_u32(x6, (arg2[0]));
    let mut x612: u32 = 0;
    let mut x613: fiat_bp256_scalar_u1 = 0;
    let (x612, x613) = fiat_bp256_scalar_addcarryx_u32(0x0, x611, x608);
    let mut x614: u32 = 0;
    let mut x615: fiat_bp256_scalar_u1 = 0;
    let (x614, x615) = fiat_bp256_scalar_addcarryx_u32(x613, x609, x606);
    let mut x616: u32 = 0;
    let mut x617: fiat_bp256_scalar_u1 = 0;
    let (x616, x617) = fiat_bp256_scalar_addcarryx_u32(x615, x607, x604);
    let mut x618: u32 = 0;
    let mut x619: fiat_bp256_scalar_u1 = 0;
    let (x618, x619) = fiat_bp256_scalar_addcarryx_u32(x617, x605, x602);
    let mut x620: u32 = 0;
    let mut x621: fiat_bp256_scalar_u1 = 0;
    let (x620, x621) = fiat_bp256_scalar_addcarryx_u32(x619, x603, x600);
    let mut x622: u32 = 0;
    let mut x623: fiat_bp256_scalar_u1 = 0;
    let (x622, x623) = fiat_bp256_scalar_addcarryx_u32(x621, x601, x598);
    let mut x624: u32 = 0;
    let mut x625: fiat_bp256_scalar_u1 = 0;
    let (x624, x625) = fiat_bp256_scalar_addcarryx_u32(x623, x599, x596);
    let x626: u32 = ((x625 as u32) + x597);
    let mut x627: u32 = 0;
    let mut x628: fiat_bp256_scalar_u1 = 0;
    let (x627, x628) = fiat_bp256_scalar_addcarryx_u32(0x0, x579, x610);
    let mut x629: u32 = 0;
    let mut x630: fiat_bp256_scalar_u1 = 0;
    let (x629, x630) = fiat_bp256_scalar_addcarryx_u32(x628, x581, x612);
    let mut x631: u32 = 0;
    let mut x632: fiat_bp256_scalar_u1 = 0;
    let (x631, x632) = fiat_bp256_scalar_addcarryx_u32(x630, x583, x614);
    let mut x633: u32 = 0;
    let mut x634: fiat_bp256_scalar_u1 = 0;
    let (x633, x634) = fiat_bp256_scalar_addcarryx_u32(x632, x585, x616);
    let mut x635: u32 = 0;
    let mut x636: fiat_bp256_scalar_u1 = 0;
    let (x635, x636) = fiat_bp256_scalar_addcarryx_u32(x634, x587, x618);
    let mut x637: u32 = 0;
    let mut x638: fiat_bp256_scalar_u1 = 0;
    let (x637, x638) = fiat_bp256_scalar_addcarryx_u32(x636, x589, x620);
    let mut x639: u32 = 0;
    let mut x640: fiat_bp256_scalar_u1 = 0;
    let (x639, x640) = fiat_bp256_scalar_addcarryx_u32(x638, x591, x622);
    let mut x641: u32 = 0;
    let mut x642: fiat_bp256_scalar_u1 = 0;
    let (x641, x642) = fiat_bp256_scalar_addcarryx_u32(x640, x593, x624);
    let mut x643: u32 = 0;
    let mut x644: fiat_bp256_scalar_u1 = 0;
    let (x643, x644) = fiat_bp256_scalar_addcarryx_u32(x642, x595, x626);
    let mut x645: u32 = 0;
    let mut x646: u32 = 0;
    let (x645, x646) = fiat_bp256_scalar_mulx_u32(x627, 0xcbb40ee9);
    let mut x647: u32 = 0;
    let mut x648: u32 = 0;
    let (x647, x648) = fiat_bp256_scalar_mulx_u32(x645, 0xa9fb57db);
    let mut x649: u32 = 0;
    let mut x650: u32 = 0;
    let (x649, x650) = fiat_bp256_scalar_mulx_u32(x645, 0xa1eea9bc);
    let mut x651: u32 = 0;
    let mut x652: u32 = 0;
    let (x651, x652) = fiat_bp256_scalar_mulx_u32(x645, 0x3e660a90);
    let mut x653: u32 = 0;
    let mut x654: u32 = 0;
    let (x653, x654) = fiat_bp256_scalar_mulx_u32(x645, 0x9d838d71);
    let mut x655: u32 = 0;
    let mut x656: u32 = 0;
    let (x655, x656) = fiat_bp256_scalar_mulx_u32(x645, 0x8c397aa3);
    let mut x657: u32 = 0;
    let mut x658: u32 = 0;
    let (x657, x658) = fiat_bp256_scalar_mulx_u32(x645, 0xb561a6f7);
    let mut x659: u32 = 0;
    let mut x660: u32 = 0;
    let (x659, x660) = fiat_bp256_scalar_mulx_u32(x645, 0x901e0e82);
    let mut x661: u32 = 0;
    let mut x662: u32 = 0;
    let (x661, x662) = fiat_bp256_scalar_mulx_u32(x645, 0x974856a7);
    let mut x663: u32 = 0;
    let mut x664: fiat_bp256_scalar_u1 = 0;
    let (x663, x664) = fiat_bp256_scalar_addcarryx_u32(0x0, x662, x659);
    let mut x665: u32 = 0;
    let mut x666: fiat_bp256_scalar_u1 = 0;
    let (x665, x666) = fiat_bp256_scalar_addcarryx_u32(x664, x660, x657);
    let mut x667: u32 = 0;
    let mut x668: fiat_bp256_scalar_u1 = 0;
    let (x667, x668) = fiat_bp256_scalar_addcarryx_u32(x666, x658, x655);
    let mut x669: u32 = 0;
    let mut x670: fiat_bp256_scalar_u1 = 0;
    let (x669, x670) = fiat_bp256_scalar_addcarryx_u32(x668, x656, x653);
    let mut x671: u32 = 0;
    let mut x672: fiat_bp256_scalar_u1 = 0;
    let (x671, x672) = fiat_bp256_scalar_addcarryx_u32(x670, x654, x651);
    let mut x673: u32 = 0;
    let mut x674: fiat_bp256_scalar_u1 = 0;
    let (x673, x674) = fiat_bp256_scalar_addcarryx_u32(x672, x652, x649);
    let mut x675: u32 = 0;
    let mut x676: fiat_bp256_scalar_u1 = 0;
    let (x675, x676) = fiat_bp256_scalar_addcarryx_u32(x674, x650, x647);
    let x677: u32 = ((x676 as u32) + x648);
    let mut x678: u32 = 0;
    let mut x679: fiat_bp256_scalar_u1 = 0;
    let (x678, x679) = fiat_bp256_scalar_addcarryx_u32(0x0, x627, x661);
    let mut x680: u32 = 0;
    let mut x681: fiat_bp256_scalar_u1 = 0;
    let (x680, x681) = fiat_bp256_scalar_addcarryx_u32(x679, x629, x663);
    let mut x682: u32 = 0;
    let mut x683: fiat_bp256_scalar_u1 = 0;
    let (x682, x683) = fiat_bp256_scalar_addcarryx_u32(x681, x631, x665);
    let mut x684: u32 = 0;
    let mut x685: fiat_bp256_scalar_u1 = 0;
    let (x684, x685) = fiat_bp256_scalar_addcarryx_u32(x683, x633, x667);
    let mut x686: u32 = 0;
    let mut x687: fiat_bp256_scalar_u1 = 0;
    let (x686, x687) = fiat_bp256_scalar_addcarryx_u32(x685, x635, x669);
    let mut x688: u32 = 0;
    let mut x689: fiat_bp256_scalar_u1 = 0;
    let (x688, x689) = fiat_bp256_scalar_addcarryx_u32(x687, x637, x671);
    let mut x690: u32 = 0;
    let mut x691: fiat_bp256_scalar_u1 = 0;
    let (x690, x691) = fiat_bp256_scalar_addcarryx_u32(x689, x639, x673);
    let mut x692: u32 = 0;
    let mut x693: fiat_bp256_scalar_u1 = 0;
    let (x692, x693) = fiat_bp256_scalar_addcarryx_u32(x691, x641, x675);
    let mut x694: u32 = 0;
    let mut x695: fiat_bp256_scalar_u1 = 0;
    let (x694, x695) = fiat_bp256_scalar_addcarryx_u32(x693, x643, x677);
    let x696: u32 = ((x695 as u32) + (x644 as u32));
    let mut x697: u32 = 0;
    let mut x698: u32 = 0;
    let (x697, x698) = fiat_bp256_scalar_mulx_u32(x7, (arg2[7]));
    let mut x699: u32 = 0;
    let mut x700: u32 = 0;
    let (x699, x700) = fiat_bp256_scalar_mulx_u32(x7, (arg2[6]));
    let mut x701: u32 = 0;
    let mut x702: u32 = 0;
    let (x701, x702) = fiat_bp256_scalar_mulx_u32(x7, (arg2[5]));
    let mut x703: u32 = 0;
    let mut x704: u32 = 0;
    let (x703, x704) = fiat_bp256_scalar_mulx_u32(x7, (arg2[4]));
    let mut x705: u32 = 0;
    let mut x706: u32 = 0;
    let (x705, x706) = fiat_bp256_scalar_mulx_u32(x7, (arg2[3]));
    let mut x707: u32 = 0;
    let mut x708: u32 = 0;
    let (x707, x708) = fiat_bp256_scalar_mulx_u32(x7, (arg2[2]));
    let mut x709: u32 = 0;
    let mut x710: u32 = 0;
    let (x709, x710) = fiat_bp256_scalar_mulx_u32(x7, (arg2[1]));
    let mut x711: u32 = 0;
    let mut x712: u32 = 0;
    let (x711, x712) = fiat_bp256_scalar_mulx_u32(x7, (arg2[0]));
    let mut x713: u32 = 0;
    let mut x714: fiat_bp256_scalar_u1 = 0;
    let (x713, x714) = fiat_bp256_scalar_addcarryx_u32(0x0, x712, x709);
    let mut x715: u32 = 0;
    let mut x716: fiat_bp256_scalar_u1 = 0;
    let (x715, x716) = fiat_bp256_scalar_addcarryx_u32(x714, x710, x707);
    let mut x717: u32 = 0;
    let mut x718: fiat_bp256_scalar_u1 = 0;
    let (x717, x718) = fiat_bp256_scalar_addcarryx_u32(x716, x708, x705);
    let mut x719: u32 = 0;
    let mut x720: fiat_bp256_scalar_u1 = 0;
    let (x719, x720) = fiat_bp256_scalar_addcarryx_u32(x718, x706, x703);
    let mut x721: u32 = 0;
    let mut x722: fiat_bp256_scalar_u1 = 0;
    let (x721, x722) = fiat_bp256_scalar_addcarryx_u32(x720, x704, x701);
    let mut x723: u32 = 0;
    let mut x724: fiat_bp256_scalar_u1 = 0;
    let (x723, x724) = fiat_bp256_scalar_addcarryx_u32(x722, x702, x699);
    let mut x725: u32 = 0;
    let mut x726: fiat_bp256_scalar_u1 = 0;
    let (x725, x726) = fiat_bp256_scalar_addcarryx_u32(x724, x700, x697);
    let x727: u32 = ((x726 as u32) + x698);
    let mut x728: u32 = 0;
    let mut x729: fiat_bp256_scalar_u1 = 0;
    let (x728, x729) = fiat_bp256_scalar_addcarryx_u32(0x0, x680, x711);
    let mut x730: u32 = 0;
    let mut x731: fiat_bp256_scalar_u1 = 0;
    let (x730, x731) = fiat_bp256_scalar_addcarryx_u32(x729, x682, x713);
    let mut x732: u32 = 0;
    let mut x733: fiat_bp256_scalar_u1 = 0;
    let (x732, x733) = fiat_bp256_scalar_addcarryx_u32(x731, x684, x715);
    let mut x734: u32 = 0;
    let mut x735: fiat_bp256_scalar_u1 = 0;
    let (x734, x735) = fiat_bp256_scalar_addcarryx_u32(x733, x686, x717);
    let mut x736: u32 = 0;
    let mut x737: fiat_bp256_scalar_u1 = 0;
    let (x736, x737) = fiat_bp256_scalar_addcarryx_u32(x735, x688, x719);
    let mut x738: u32 = 0;
    let mut x739: fiat_bp256_scalar_u1 = 0;
    let (x738, x739) = fiat_bp256_scalar_addcarryx_u32(x737, x690, x721);
    let mut x740: u32 = 0;
    let mut x741: fiat_bp256_scalar_u1 = 0;
    let (x740, x741) = fiat_bp256_scalar_addcarryx_u32(x739, x692, x723);
    let mut x742: u32 = 0;
    let mut x743: fiat_bp256_scalar_u1 = 0;
    let (x742, x743) = fiat_bp256_scalar_addcarryx_u32(x741, x694, x725);
    let mut x744: u32 = 0;
    let mut x745: fiat_bp256_scalar_u1 = 0;
    let (x744, x745) = fiat_bp256_scalar_addcarryx_u32(x743, x696, x727);
    let mut x746: u32 = 0;
    let mut x747: u32 = 0;
    let (x746, x747) = fiat_bp256_scalar_mulx_u32(x728, 0xcbb40ee9);
    let mut x748: u32 = 0;
    let mut x749: u32 = 0;
    let (x748, x749) = fiat_bp256_scalar_mulx_u32(x746, 0xa9fb57db);
    let mut x750: u32 = 0;
    let mut x751: u32 = 0;
    let (x750, x751) = fiat_bp256_scalar_mulx_u32(x746, 0xa1eea9bc);
    let mut x752: u32 = 0;
    let mut x753: u32 = 0;
    let (x752, x753) = fiat_bp256_scalar_mulx_u32(x746, 0x3e660a90);
    let mut x754: u32 = 0;
    let mut x755: u32 = 0;
    let (x754, x755) = fiat_bp256_scalar_mulx_u32(x746, 0x9d838d71);
    let mut x756: u32 = 0;
    let mut x757: u32 = 0;
    let (x756, x757) = fiat_bp256_scalar_mulx_u32(x746, 0x8c397aa3);
    let mut x758: u32 = 0;
    let mut x759: u32 = 0;
    let (x758, x759) = fiat_bp256_scalar_mulx_u32(x746, 0xb561a6f7);
    let mut x760: u32 = 0;
    let mut x761: u32 = 0;
    let (x760, x761) = fiat_bp256_scalar_mulx_u32(x746, 0x901e0e82);
    let mut x762: u32 = 0;
    let mut x763: u32 = 0;
    let (x762, x763) = fiat_bp256_scalar_mulx_u32(x746, 0x974856a7);
    let mut x764: u32 = 0;
    let mut x765: fiat_bp256_scalar_u1 = 0;
    let (x764, x765) = fiat_bp256_scalar_addcarryx_u32(0x0, x763, x760);
    let mut x766: u32 = 0;
    let mut x767: fiat_bp256_scalar_u1 = 0;
    let (x766, x767) = fiat_bp256_scalar_addcarryx_u32(x765, x761, x758);
    let mut x768: u32 = 0;
    let mut x769: fiat_bp256_scalar_u1 = 0;
    let (x768, x769) = fiat_bp256_scalar_addcarryx_u32(x767, x759, x756);
    let mut x770: u32 = 0;
    let mut x771: fiat_bp256_scalar_u1 = 0;
    let (x770, x771) = fiat_bp256_scalar_addcarryx_u32(x769, x757, x754);
    let mut x772: u32 = 0;
    let mut x773: fiat_bp256_scalar_u1 = 0;
    let (x772, x773) = fiat_bp256_scalar_addcarryx_u32(x771, x755, x752);
    let mut x774: u32 = 0;
    let mut x775: fiat_bp256_scalar_u1 = 0;
    let (x774, x775) = fiat_bp256_scalar_addcarryx_u32(x773, x753, x750);
    let mut x776: u32 = 0;
    let mut x777: fiat_bp256_scalar_u1 = 0;
    let (x776, x777) = fiat_bp256_scalar_addcarryx_u32(x775, x751, x748);
    let x778: u32 = ((x777 as u32) + x749);
    let mut x779: u32 = 0;
    let mut x780: fiat_bp256_scalar_u1 = 0;
    let (x779, x780) = fiat_bp256_scalar_addcarryx_u32(0x0, x728, x762);
    let mut x781: u32 = 0;
    let mut x782: fiat_bp256_scalar_u1 = 0;
    let (x781, x782) = fiat_bp256_scalar_addcarryx_u32(x780, x730, x764);
    let mut x783: u32 = 0;
    let mut x784: fiat_bp256_scalar_u1 = 0;
    let (x783, x784) = fiat_bp256_scalar_addcarryx_u32(x782, x732, x766);
    let mut x785: u32 = 0;
    let mut x786: fiat_bp256_scalar_u1 = 0;
    let (x785, x786) = fiat_bp256_scalar_addcarryx_u32(x784, x734, x768);
    let mut x787: u32 = 0;
    let mut x788: fiat_bp256_scalar_u1 = 0;
    let (x787, x788) = fiat_bp256_scalar_addcarryx_u32(x786, x736, x770);
    let mut x789: u32 = 0;
    let mut x790: fiat_bp256_scalar_u1 = 0;
    let (x789, x790) = fiat_bp256_scalar_addcarryx_u32(x788, x738, x772);
    let mut x791: u32 = 0;
    let mut x792: fiat_bp256_scalar_u1 = 0;
    let (x791, x792) = fiat_bp256_scalar_addcarryx_u32(x790, x740, x774);
    let mut x793: u32 = 0;
    let mut x794: fiat_bp256_scalar_u1 = 0;
    let (x793, x794) = fiat_bp256_scalar_addcarryx_u32(x792, x742, x776);
    let mut x795: u32 = 0;
    let mut x796: fiat_bp256_scalar_u1 = 0;
    let (x795, x796) = fiat_bp256_scalar_addcarryx_u32(x794, x744, x778);
    let x797: u32 = ((x796 as u32) + (x745 as u32));
    let mut x798: u32 = 0;
    let mut x799: fiat_bp256_scalar_u1 = 0;
    let (x798, x799) = fiat_bp256_scalar_subborrowx_u32(0x0, x781, 0x974856a7);
    let mut x800: u32 = 0;
    let mut x801: fiat_bp256_scalar_u1 = 0;
    let (x800, x801) = fiat_bp256_scalar_subborrowx_u32(x799, x783, 0x901e0e82);
    let mut x802: u32 = 0;
    let mut x803: fiat_bp256_scalar_u1 = 0;
    let (x802, x803) = fiat_bp256_scalar_subborrowx_u32(x801, x785, 0xb561a6f7);
    let mut x804: u32 = 0;
    let mut x805: fiat_bp256_scalar_u1 = 0;
    let (x804, x805) = fiat_bp256_scalar_subborrowx_u32(x803, x787, 0x8c397aa3);
    let mut x806: u32 = 0;
    let mut x807: fiat_bp256_scalar_u1 = 0;
    let (x806, x807) = fiat_bp256_scalar_subborrowx_u32(x805, x789, 0x9d838d71);
    let mut x808: u32 = 0;
    let mut x809: fiat_bp256_scalar_u1 = 0;
    let (x808, x809) = fiat_bp256_scalar_subborrowx_u32(x807, x791, 0x3e660a90);
    let mut x810: u32 = 0;
    let mut x811: fiat_bp256_scalar_u1 = 0;
    let (x810, x811) = fiat_bp256_scalar_subborrowx_u32(x809, x793, 0xa1eea9bc);
    let mut x812: u32 = 0;
    let mut x813: fiat_bp256_scalar_u1 = 0;
    let (x812, x813) = fiat_bp256_scalar_subborrowx_u32(x811, x795, 0xa9fb57db);
    let mut x814: u32 = 0;
    let mut x815: fiat_bp256_scalar_u1 = 0;
    let (x814, x815) = fiat_bp256_scalar_subborrowx_u32(x813, x797, (0x0 as u32));
    let mut x816: u32 = 0;
    let (x816) = fiat_bp256_scalar_cmovznz_u32(x815, x798, x781);
    let mut x817: u32 = 0;
    let (x817) = fiat_bp256_scalar_cmovznz_u32(x815, x800, x783);
    let mut x818: u32 = 0;
    let (x818) = fiat_bp256_scalar_cmovznz_u32(x815, x802, x785);
    let mut x819: u32 = 0;
    let (x819) = fiat_bp256_scalar_cmovznz_u32(x815, x804, x787);
    let mut x820: u32 = 0;
    let (x820) = fiat_bp256_scalar_cmovznz_u32(x815, x806, x789);
    let mut x821: u32 = 0;
    let (x821) = fiat_bp256_scalar_cmovznz_u32(x815, x808, x791);
    let mut x822: u32 = 0;
    let (x822) = fiat_bp256_scalar_cmovznz_u32(x815, x810, x793);
    let mut x823: u32 = 0;
    let (x823) = fiat_bp256_scalar_cmovznz_u32(x815, x812, x795);
    out1[0] = x816;
    out1[1] = x817;
    out1[2] = x818;
    out1[3] = x819;
    out1[4] = x820;
    out1[5] = x821;
    out1[6] = x822;
    out1[7] = x823;
    out1
}
#[doc = " The function fiat_bp256_scalar_square squares a field element in the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) * eval (from_montgomery arg1)) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_bp256_scalar_square(
    arg1: &fiat_bp256_scalar_montgomery_domain_field_element,
) -> fiat_bp256_scalar_montgomery_domain_field_element {
    let mut out1: fiat_bp256_scalar_montgomery_domain_field_element = [0; 8];
    let x1: u32 = (arg1[1]);
    let x2: u32 = (arg1[2]);
    let x3: u32 = (arg1[3]);
    let x4: u32 = (arg1[4]);
    let x5: u32 = (arg1[5]);
    let x6: u32 = (arg1[6]);
    let x7: u32 = (arg1[7]);
    let x8: u32 = (arg1[0]);
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    let (x9, x10) = fiat_bp256_scalar_mulx_u32(x8, (arg1[7]));
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    let (x11, x12) = fiat_bp256_scalar_mulx_u32(x8, (arg1[6]));
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    let (x13, x14) = fiat_bp256_scalar_mulx_u32(x8, (arg1[5]));
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    let (x15, x16) = fiat_bp256_scalar_mulx_u32(x8, (arg1[4]));
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    let (x17, x18) = fiat_bp256_scalar_mulx_u32(x8, (arg1[3]));
    let mut x19: u32 = 0;
    let mut x20: u32 = 0;
    let (x19, x20) = fiat_bp256_scalar_mulx_u32(x8, (arg1[2]));
    let mut x21: u32 = 0;
    let mut x22: u32 = 0;
    let (x21, x22) = fiat_bp256_scalar_mulx_u32(x8, (arg1[1]));
    let mut x23: u32 = 0;
    let mut x24: u32 = 0;
    let (x23, x24) = fiat_bp256_scalar_mulx_u32(x8, (arg1[0]));
    let mut x25: u32 = 0;
    let mut x26: fiat_bp256_scalar_u1 = 0;
    let (x25, x26) = fiat_bp256_scalar_addcarryx_u32(0x0, x24, x21);
    let mut x27: u32 = 0;
    let mut x28: fiat_bp256_scalar_u1 = 0;
    let (x27, x28) = fiat_bp256_scalar_addcarryx_u32(x26, x22, x19);
    let mut x29: u32 = 0;
    let mut x30: fiat_bp256_scalar_u1 = 0;
    let (x29, x30) = fiat_bp256_scalar_addcarryx_u32(x28, x20, x17);
    let mut x31: u32 = 0;
    let mut x32: fiat_bp256_scalar_u1 = 0;
    let (x31, x32) = fiat_bp256_scalar_addcarryx_u32(x30, x18, x15);
    let mut x33: u32 = 0;
    let mut x34: fiat_bp256_scalar_u1 = 0;
    let (x33, x34) = fiat_bp256_scalar_addcarryx_u32(x32, x16, x13);
    let mut x35: u32 = 0;
    let mut x36: fiat_bp256_scalar_u1 = 0;
    let (x35, x36) = fiat_bp256_scalar_addcarryx_u32(x34, x14, x11);
    let mut x37: u32 = 0;
    let mut x38: fiat_bp256_scalar_u1 = 0;
    let (x37, x38) = fiat_bp256_scalar_addcarryx_u32(x36, x12, x9);
    let x39: u32 = ((x38 as u32) + x10);
    let mut x40: u32 = 0;
    let mut x41: u32 = 0;
    let (x40, x41) = fiat_bp256_scalar_mulx_u32(x23, 0xcbb40ee9);
    let mut x42: u32 = 0;
    let mut x43: u32 = 0;
    let (x42, x43) = fiat_bp256_scalar_mulx_u32(x40, 0xa9fb57db);
    let mut x44: u32 = 0;
    let mut x45: u32 = 0;
    let (x44, x45) = fiat_bp256_scalar_mulx_u32(x40, 0xa1eea9bc);
    let mut x46: u32 = 0;
    let mut x47: u32 = 0;
    let (x46, x47) = fiat_bp256_scalar_mulx_u32(x40, 0x3e660a90);
    let mut x48: u32 = 0;
    let mut x49: u32 = 0;
    let (x48, x49) = fiat_bp256_scalar_mulx_u32(x40, 0x9d838d71);
    let mut x50: u32 = 0;
    let mut x51: u32 = 0;
    let (x50, x51) = fiat_bp256_scalar_mulx_u32(x40, 0x8c397aa3);
    let mut x52: u32 = 0;
    let mut x53: u32 = 0;
    let (x52, x53) = fiat_bp256_scalar_mulx_u32(x40, 0xb561a6f7);
    let mut x54: u32 = 0;
    let mut x55: u32 = 0;
    let (x54, x55) = fiat_bp256_scalar_mulx_u32(x40, 0x901e0e82);
    let mut x56: u32 = 0;
    let mut x57: u32 = 0;
    let (x56, x57) = fiat_bp256_scalar_mulx_u32(x40, 0x974856a7);
    let mut x58: u32 = 0;
    let mut x59: fiat_bp256_scalar_u1 = 0;
    let (x58, x59) = fiat_bp256_scalar_addcarryx_u32(0x0, x57, x54);
    let mut x60: u32 = 0;
    let mut x61: fiat_bp256_scalar_u1 = 0;
    let (x60, x61) = fiat_bp256_scalar_addcarryx_u32(x59, x55, x52);
    let mut x62: u32 = 0;
    let mut x63: fiat_bp256_scalar_u1 = 0;
    let (x62, x63) = fiat_bp256_scalar_addcarryx_u32(x61, x53, x50);
    let mut x64: u32 = 0;
    let mut x65: fiat_bp256_scalar_u1 = 0;
    let (x64, x65) = fiat_bp256_scalar_addcarryx_u32(x63, x51, x48);
    let mut x66: u32 = 0;
    let mut x67: fiat_bp256_scalar_u1 = 0;
    let (x66, x67) = fiat_bp256_scalar_addcarryx_u32(x65, x49, x46);
    let mut x68: u32 = 0;
    let mut x69: fiat_bp256_scalar_u1 = 0;
    let (x68, x69) = fiat_bp256_scalar_addcarryx_u32(x67, x47, x44);
    let mut x70: u32 = 0;
    let mut x71: fiat_bp256_scalar_u1 = 0;
    let (x70, x71) = fiat_bp256_scalar_addcarryx_u32(x69, x45, x42);
    let x72: u32 = ((x71 as u32) + x43);
    let mut x73: u32 = 0;
    let mut x74: fiat_bp256_scalar_u1 = 0;
    let (x73, x74) = fiat_bp256_scalar_addcarryx_u32(0x0, x23, x56);
    let mut x75: u32 = 0;
    let mut x76: fiat_bp256_scalar_u1 = 0;
    let (x75, x76) = fiat_bp256_scalar_addcarryx_u32(x74, x25, x58);
    let mut x77: u32 = 0;
    let mut x78: fiat_bp256_scalar_u1 = 0;
    let (x77, x78) = fiat_bp256_scalar_addcarryx_u32(x76, x27, x60);
    let mut x79: u32 = 0;
    let mut x80: fiat_bp256_scalar_u1 = 0;
    let (x79, x80) = fiat_bp256_scalar_addcarryx_u32(x78, x29, x62);
    let mut x81: u32 = 0;
    let mut x82: fiat_bp256_scalar_u1 = 0;
    let (x81, x82) = fiat_bp256_scalar_addcarryx_u32(x80, x31, x64);
    let mut x83: u32 = 0;
    let mut x84: fiat_bp256_scalar_u1 = 0;
    let (x83, x84) = fiat_bp256_scalar_addcarryx_u32(x82, x33, x66);
    let mut x85: u32 = 0;
    let mut x86: fiat_bp256_scalar_u1 = 0;
    let (x85, x86) = fiat_bp256_scalar_addcarryx_u32(x84, x35, x68);
    let mut x87: u32 = 0;
    let mut x88: fiat_bp256_scalar_u1 = 0;
    let (x87, x88) = fiat_bp256_scalar_addcarryx_u32(x86, x37, x70);
    let mut x89: u32 = 0;
    let mut x90: fiat_bp256_scalar_u1 = 0;
    let (x89, x90) = fiat_bp256_scalar_addcarryx_u32(x88, x39, x72);
    let mut x91: u32 = 0;
    let mut x92: u32 = 0;
    let (x91, x92) = fiat_bp256_scalar_mulx_u32(x1, (arg1[7]));
    let mut x93: u32 = 0;
    let mut x94: u32 = 0;
    let (x93, x94) = fiat_bp256_scalar_mulx_u32(x1, (arg1[6]));
    let mut x95: u32 = 0;
    let mut x96: u32 = 0;
    let (x95, x96) = fiat_bp256_scalar_mulx_u32(x1, (arg1[5]));
    let mut x97: u32 = 0;
    let mut x98: u32 = 0;
    let (x97, x98) = fiat_bp256_scalar_mulx_u32(x1, (arg1[4]));
    let mut x99: u32 = 0;
    let mut x100: u32 = 0;
    let (x99, x100) = fiat_bp256_scalar_mulx_u32(x1, (arg1[3]));
    let mut x101: u32 = 0;
    let mut x102: u32 = 0;
    let (x101, x102) = fiat_bp256_scalar_mulx_u32(x1, (arg1[2]));
    let mut x103: u32 = 0;
    let mut x104: u32 = 0;
    let (x103, x104) = fiat_bp256_scalar_mulx_u32(x1, (arg1[1]));
    let mut x105: u32 = 0;
    let mut x106: u32 = 0;
    let (x105, x106) = fiat_bp256_scalar_mulx_u32(x1, (arg1[0]));
    let mut x107: u32 = 0;
    let mut x108: fiat_bp256_scalar_u1 = 0;
    let (x107, x108) = fiat_bp256_scalar_addcarryx_u32(0x0, x106, x103);
    let mut x109: u32 = 0;
    let mut x110: fiat_bp256_scalar_u1 = 0;
    let (x109, x110) = fiat_bp256_scalar_addcarryx_u32(x108, x104, x101);
    let mut x111: u32 = 0;
    let mut x112: fiat_bp256_scalar_u1 = 0;
    let (x111, x112) = fiat_bp256_scalar_addcarryx_u32(x110, x102, x99);
    let mut x113: u32 = 0;
    let mut x114: fiat_bp256_scalar_u1 = 0;
    let (x113, x114) = fiat_bp256_scalar_addcarryx_u32(x112, x100, x97);
    let mut x115: u32 = 0;
    let mut x116: fiat_bp256_scalar_u1 = 0;
    let (x115, x116) = fiat_bp256_scalar_addcarryx_u32(x114, x98, x95);
    let mut x117: u32 = 0;
    let mut x118: fiat_bp256_scalar_u1 = 0;
    let (x117, x118) = fiat_bp256_scalar_addcarryx_u32(x116, x96, x93);
    let mut x119: u32 = 0;
    let mut x120: fiat_bp256_scalar_u1 = 0;
    let (x119, x120) = fiat_bp256_scalar_addcarryx_u32(x118, x94, x91);
    let x121: u32 = ((x120 as u32) + x92);
    let mut x122: u32 = 0;
    let mut x123: fiat_bp256_scalar_u1 = 0;
    let (x122, x123) = fiat_bp256_scalar_addcarryx_u32(0x0, x75, x105);
    let mut x124: u32 = 0;
    let mut x125: fiat_bp256_scalar_u1 = 0;
    let (x124, x125) = fiat_bp256_scalar_addcarryx_u32(x123, x77, x107);
    let mut x126: u32 = 0;
    let mut x127: fiat_bp256_scalar_u1 = 0;
    let (x126, x127) = fiat_bp256_scalar_addcarryx_u32(x125, x79, x109);
    let mut x128: u32 = 0;
    let mut x129: fiat_bp256_scalar_u1 = 0;
    let (x128, x129) = fiat_bp256_scalar_addcarryx_u32(x127, x81, x111);
    let mut x130: u32 = 0;
    let mut x131: fiat_bp256_scalar_u1 = 0;
    let (x130, x131) = fiat_bp256_scalar_addcarryx_u32(x129, x83, x113);
    let mut x132: u32 = 0;
    let mut x133: fiat_bp256_scalar_u1 = 0;
    let (x132, x133) = fiat_bp256_scalar_addcarryx_u32(x131, x85, x115);
    let mut x134: u32 = 0;
    let mut x135: fiat_bp256_scalar_u1 = 0;
    let (x134, x135) = fiat_bp256_scalar_addcarryx_u32(x133, x87, x117);
    let mut x136: u32 = 0;
    let mut x137: fiat_bp256_scalar_u1 = 0;
    let (x136, x137) = fiat_bp256_scalar_addcarryx_u32(x135, x89, x119);
    let mut x138: u32 = 0;
    let mut x139: fiat_bp256_scalar_u1 = 0;
    let (x138, x139) = fiat_bp256_scalar_addcarryx_u32(x137, (x90 as u32), x121);
    let mut x140: u32 = 0;
    let mut x141: u32 = 0;
    let (x140, x141) = fiat_bp256_scalar_mulx_u32(x122, 0xcbb40ee9);
    let mut x142: u32 = 0;
    let mut x143: u32 = 0;
    let (x142, x143) = fiat_bp256_scalar_mulx_u32(x140, 0xa9fb57db);
    let mut x144: u32 = 0;
    let mut x145: u32 = 0;
    let (x144, x145) = fiat_bp256_scalar_mulx_u32(x140, 0xa1eea9bc);
    let mut x146: u32 = 0;
    let mut x147: u32 = 0;
    let (x146, x147) = fiat_bp256_scalar_mulx_u32(x140, 0x3e660a90);
    let mut x148: u32 = 0;
    let mut x149: u32 = 0;
    let (x148, x149) = fiat_bp256_scalar_mulx_u32(x140, 0x9d838d71);
    let mut x150: u32 = 0;
    let mut x151: u32 = 0;
    let (x150, x151) = fiat_bp256_scalar_mulx_u32(x140, 0x8c397aa3);
    let mut x152: u32 = 0;
    let mut x153: u32 = 0;
    let (x152, x153) = fiat_bp256_scalar_mulx_u32(x140, 0xb561a6f7);
    let mut x154: u32 = 0;
    let mut x155: u32 = 0;
    let (x154, x155) = fiat_bp256_scalar_mulx_u32(x140, 0x901e0e82);
    let mut x156: u32 = 0;
    let mut x157: u32 = 0;
    let (x156, x157) = fiat_bp256_scalar_mulx_u32(x140, 0x974856a7);
    let mut x158: u32 = 0;
    let mut x159: fiat_bp256_scalar_u1 = 0;
    let (x158, x159) = fiat_bp256_scalar_addcarryx_u32(0x0, x157, x154);
    let mut x160: u32 = 0;
    let mut x161: fiat_bp256_scalar_u1 = 0;
    let (x160, x161) = fiat_bp256_scalar_addcarryx_u32(x159, x155, x152);
    let mut x162: u32 = 0;
    let mut x163: fiat_bp256_scalar_u1 = 0;
    let (x162, x163) = fiat_bp256_scalar_addcarryx_u32(x161, x153, x150);
    let mut x164: u32 = 0;
    let mut x165: fiat_bp256_scalar_u1 = 0;
    let (x164, x165) = fiat_bp256_scalar_addcarryx_u32(x163, x151, x148);
    let mut x166: u32 = 0;
    let mut x167: fiat_bp256_scalar_u1 = 0;
    let (x166, x167) = fiat_bp256_scalar_addcarryx_u32(x165, x149, x146);
    let mut x168: u32 = 0;
    let mut x169: fiat_bp256_scalar_u1 = 0;
    let (x168, x169) = fiat_bp256_scalar_addcarryx_u32(x167, x147, x144);
    let mut x170: u32 = 0;
    let mut x171: fiat_bp256_scalar_u1 = 0;
    let (x170, x171) = fiat_bp256_scalar_addcarryx_u32(x169, x145, x142);
    let x172: u32 = ((x171 as u32) + x143);
    let mut x173: u32 = 0;
    let mut x174: fiat_bp256_scalar_u1 = 0;
    let (x173, x174) = fiat_bp256_scalar_addcarryx_u32(0x0, x122, x156);
    let mut x175: u32 = 0;
    let mut x176: fiat_bp256_scalar_u1 = 0;
    let (x175, x176) = fiat_bp256_scalar_addcarryx_u32(x174, x124, x158);
    let mut x177: u32 = 0;
    let mut x178: fiat_bp256_scalar_u1 = 0;
    let (x177, x178) = fiat_bp256_scalar_addcarryx_u32(x176, x126, x160);
    let mut x179: u32 = 0;
    let mut x180: fiat_bp256_scalar_u1 = 0;
    let (x179, x180) = fiat_bp256_scalar_addcarryx_u32(x178, x128, x162);
    let mut x181: u32 = 0;
    let mut x182: fiat_bp256_scalar_u1 = 0;
    let (x181, x182) = fiat_bp256_scalar_addcarryx_u32(x180, x130, x164);
    let mut x183: u32 = 0;
    let mut x184: fiat_bp256_scalar_u1 = 0;
    let (x183, x184) = fiat_bp256_scalar_addcarryx_u32(x182, x132, x166);
    let mut x185: u32 = 0;
    let mut x186: fiat_bp256_scalar_u1 = 0;
    let (x185, x186) = fiat_bp256_scalar_addcarryx_u32(x184, x134, x168);
    let mut x187: u32 = 0;
    let mut x188: fiat_bp256_scalar_u1 = 0;
    let (x187, x188) = fiat_bp256_scalar_addcarryx_u32(x186, x136, x170);
    let mut x189: u32 = 0;
    let mut x190: fiat_bp256_scalar_u1 = 0;
    let (x189, x190) = fiat_bp256_scalar_addcarryx_u32(x188, x138, x172);
    let x191: u32 = ((x190 as u32) + (x139 as u32));
    let mut x192: u32 = 0;
    let mut x193: u32 = 0;
    let (x192, x193) = fiat_bp256_scalar_mulx_u32(x2, (arg1[7]));
    let mut x194: u32 = 0;
    let mut x195: u32 = 0;
    let (x194, x195) = fiat_bp256_scalar_mulx_u32(x2, (arg1[6]));
    let mut x196: u32 = 0;
    let mut x197: u32 = 0;
    let (x196, x197) = fiat_bp256_scalar_mulx_u32(x2, (arg1[5]));
    let mut x198: u32 = 0;
    let mut x199: u32 = 0;
    let (x198, x199) = fiat_bp256_scalar_mulx_u32(x2, (arg1[4]));
    let mut x200: u32 = 0;
    let mut x201: u32 = 0;
    let (x200, x201) = fiat_bp256_scalar_mulx_u32(x2, (arg1[3]));
    let mut x202: u32 = 0;
    let mut x203: u32 = 0;
    let (x202, x203) = fiat_bp256_scalar_mulx_u32(x2, (arg1[2]));
    let mut x204: u32 = 0;
    let mut x205: u32 = 0;
    let (x204, x205) = fiat_bp256_scalar_mulx_u32(x2, (arg1[1]));
    let mut x206: u32 = 0;
    let mut x207: u32 = 0;
    let (x206, x207) = fiat_bp256_scalar_mulx_u32(x2, (arg1[0]));
    let mut x208: u32 = 0;
    let mut x209: fiat_bp256_scalar_u1 = 0;
    let (x208, x209) = fiat_bp256_scalar_addcarryx_u32(0x0, x207, x204);
    let mut x210: u32 = 0;
    let mut x211: fiat_bp256_scalar_u1 = 0;
    let (x210, x211) = fiat_bp256_scalar_addcarryx_u32(x209, x205, x202);
    let mut x212: u32 = 0;
    let mut x213: fiat_bp256_scalar_u1 = 0;
    let (x212, x213) = fiat_bp256_scalar_addcarryx_u32(x211, x203, x200);
    let mut x214: u32 = 0;
    let mut x215: fiat_bp256_scalar_u1 = 0;
    let (x214, x215) = fiat_bp256_scalar_addcarryx_u32(x213, x201, x198);
    let mut x216: u32 = 0;
    let mut x217: fiat_bp256_scalar_u1 = 0;
    let (x216, x217) = fiat_bp256_scalar_addcarryx_u32(x215, x199, x196);
    let mut x218: u32 = 0;
    let mut x219: fiat_bp256_scalar_u1 = 0;
    let (x218, x219) = fiat_bp256_scalar_addcarryx_u32(x217, x197, x194);
    let mut x220: u32 = 0;
    let mut x221: fiat_bp256_scalar_u1 = 0;
    let (x220, x221) = fiat_bp256_scalar_addcarryx_u32(x219, x195, x192);
    let x222: u32 = ((x221 as u32) + x193);
    let mut x223: u32 = 0;
    let mut x224: fiat_bp256_scalar_u1 = 0;
    let (x223, x224) = fiat_bp256_scalar_addcarryx_u32(0x0, x175, x206);
    let mut x225: u32 = 0;
    let mut x226: fiat_bp256_scalar_u1 = 0;
    let (x225, x226) = fiat_bp256_scalar_addcarryx_u32(x224, x177, x208);
    let mut x227: u32 = 0;
    let mut x228: fiat_bp256_scalar_u1 = 0;
    let (x227, x228) = fiat_bp256_scalar_addcarryx_u32(x226, x179, x210);
    let mut x229: u32 = 0;
    let mut x230: fiat_bp256_scalar_u1 = 0;
    let (x229, x230) = fiat_bp256_scalar_addcarryx_u32(x228, x181, x212);
    let mut x231: u32 = 0;
    let mut x232: fiat_bp256_scalar_u1 = 0;
    let (x231, x232) = fiat_bp256_scalar_addcarryx_u32(x230, x183, x214);
    let mut x233: u32 = 0;
    let mut x234: fiat_bp256_scalar_u1 = 0;
    let (x233, x234) = fiat_bp256_scalar_addcarryx_u32(x232, x185, x216);
    let mut x235: u32 = 0;
    let mut x236: fiat_bp256_scalar_u1 = 0;
    let (x235, x236) = fiat_bp256_scalar_addcarryx_u32(x234, x187, x218);
    let mut x237: u32 = 0;
    let mut x238: fiat_bp256_scalar_u1 = 0;
    let (x237, x238) = fiat_bp256_scalar_addcarryx_u32(x236, x189, x220);
    let mut x239: u32 = 0;
    let mut x240: fiat_bp256_scalar_u1 = 0;
    let (x239, x240) = fiat_bp256_scalar_addcarryx_u32(x238, x191, x222);
    let mut x241: u32 = 0;
    let mut x242: u32 = 0;
    let (x241, x242) = fiat_bp256_scalar_mulx_u32(x223, 0xcbb40ee9);
    let mut x243: u32 = 0;
    let mut x244: u32 = 0;
    let (x243, x244) = fiat_bp256_scalar_mulx_u32(x241, 0xa9fb57db);
    let mut x245: u32 = 0;
    let mut x246: u32 = 0;
    let (x245, x246) = fiat_bp256_scalar_mulx_u32(x241, 0xa1eea9bc);
    let mut x247: u32 = 0;
    let mut x248: u32 = 0;
    let (x247, x248) = fiat_bp256_scalar_mulx_u32(x241, 0x3e660a90);
    let mut x249: u32 = 0;
    let mut x250: u32 = 0;
    let (x249, x250) = fiat_bp256_scalar_mulx_u32(x241, 0x9d838d71);
    let mut x251: u32 = 0;
    let mut x252: u32 = 0;
    let (x251, x252) = fiat_bp256_scalar_mulx_u32(x241, 0x8c397aa3);
    let mut x253: u32 = 0;
    let mut x254: u32 = 0;
    let (x253, x254) = fiat_bp256_scalar_mulx_u32(x241, 0xb561a6f7);
    let mut x255: u32 = 0;
    let mut x256: u32 = 0;
    let (x255, x256) = fiat_bp256_scalar_mulx_u32(x241, 0x901e0e82);
    let mut x257: u32 = 0;
    let mut x258: u32 = 0;
    let (x257, x258) = fiat_bp256_scalar_mulx_u32(x241, 0x974856a7);
    let mut x259: u32 = 0;
    let mut x260: fiat_bp256_scalar_u1 = 0;
    let (x259, x260) = fiat_bp256_scalar_addcarryx_u32(0x0, x258, x255);
    let mut x261: u32 = 0;
    let mut x262: fiat_bp256_scalar_u1 = 0;
    let (x261, x262) = fiat_bp256_scalar_addcarryx_u32(x260, x256, x253);
    let mut x263: u32 = 0;
    let mut x264: fiat_bp256_scalar_u1 = 0;
    let (x263, x264) = fiat_bp256_scalar_addcarryx_u32(x262, x254, x251);
    let mut x265: u32 = 0;
    let mut x266: fiat_bp256_scalar_u1 = 0;
    let (x265, x266) = fiat_bp256_scalar_addcarryx_u32(x264, x252, x249);
    let mut x267: u32 = 0;
    let mut x268: fiat_bp256_scalar_u1 = 0;
    let (x267, x268) = fiat_bp256_scalar_addcarryx_u32(x266, x250, x247);
    let mut x269: u32 = 0;
    let mut x270: fiat_bp256_scalar_u1 = 0;
    let (x269, x270) = fiat_bp256_scalar_addcarryx_u32(x268, x248, x245);
    let mut x271: u32 = 0;
    let mut x272: fiat_bp256_scalar_u1 = 0;
    let (x271, x272) = fiat_bp256_scalar_addcarryx_u32(x270, x246, x243);
    let x273: u32 = ((x272 as u32) + x244);
    let mut x274: u32 = 0;
    let mut x275: fiat_bp256_scalar_u1 = 0;
    let (x274, x275) = fiat_bp256_scalar_addcarryx_u32(0x0, x223, x257);
    let mut x276: u32 = 0;
    let mut x277: fiat_bp256_scalar_u1 = 0;
    let (x276, x277) = fiat_bp256_scalar_addcarryx_u32(x275, x225, x259);
    let mut x278: u32 = 0;
    let mut x279: fiat_bp256_scalar_u1 = 0;
    let (x278, x279) = fiat_bp256_scalar_addcarryx_u32(x277, x227, x261);
    let mut x280: u32 = 0;
    let mut x281: fiat_bp256_scalar_u1 = 0;
    let (x280, x281) = fiat_bp256_scalar_addcarryx_u32(x279, x229, x263);
    let mut x282: u32 = 0;
    let mut x283: fiat_bp256_scalar_u1 = 0;
    let (x282, x283) = fiat_bp256_scalar_addcarryx_u32(x281, x231, x265);
    let mut x284: u32 = 0;
    let mut x285: fiat_bp256_scalar_u1 = 0;
    let (x284, x285) = fiat_bp256_scalar_addcarryx_u32(x283, x233, x267);
    let mut x286: u32 = 0;
    let mut x287: fiat_bp256_scalar_u1 = 0;
    let (x286, x287) = fiat_bp256_scalar_addcarryx_u32(x285, x235, x269);
    let mut x288: u32 = 0;
    let mut x289: fiat_bp256_scalar_u1 = 0;
    let (x288, x289) = fiat_bp256_scalar_addcarryx_u32(x287, x237, x271);
    let mut x290: u32 = 0;
    let mut x291: fiat_bp256_scalar_u1 = 0;
    let (x290, x291) = fiat_bp256_scalar_addcarryx_u32(x289, x239, x273);
    let x292: u32 = ((x291 as u32) + (x240 as u32));
    let mut x293: u32 = 0;
    let mut x294: u32 = 0;
    let (x293, x294) = fiat_bp256_scalar_mulx_u32(x3, (arg1[7]));
    let mut x295: u32 = 0;
    let mut x296: u32 = 0;
    let (x295, x296) = fiat_bp256_scalar_mulx_u32(x3, (arg1[6]));
    let mut x297: u32 = 0;
    let mut x298: u32 = 0;
    let (x297, x298) = fiat_bp256_scalar_mulx_u32(x3, (arg1[5]));
    let mut x299: u32 = 0;
    let mut x300: u32 = 0;
    let (x299, x300) = fiat_bp256_scalar_mulx_u32(x3, (arg1[4]));
    let mut x301: u32 = 0;
    let mut x302: u32 = 0;
    let (x301, x302) = fiat_bp256_scalar_mulx_u32(x3, (arg1[3]));
    let mut x303: u32 = 0;
    let mut x304: u32 = 0;
    let (x303, x304) = fiat_bp256_scalar_mulx_u32(x3, (arg1[2]));
    let mut x305: u32 = 0;
    let mut x306: u32 = 0;
    let (x305, x306) = fiat_bp256_scalar_mulx_u32(x3, (arg1[1]));
    let mut x307: u32 = 0;
    let mut x308: u32 = 0;
    let (x307, x308) = fiat_bp256_scalar_mulx_u32(x3, (arg1[0]));
    let mut x309: u32 = 0;
    let mut x310: fiat_bp256_scalar_u1 = 0;
    let (x309, x310) = fiat_bp256_scalar_addcarryx_u32(0x0, x308, x305);
    let mut x311: u32 = 0;
    let mut x312: fiat_bp256_scalar_u1 = 0;
    let (x311, x312) = fiat_bp256_scalar_addcarryx_u32(x310, x306, x303);
    let mut x313: u32 = 0;
    let mut x314: fiat_bp256_scalar_u1 = 0;
    let (x313, x314) = fiat_bp256_scalar_addcarryx_u32(x312, x304, x301);
    let mut x315: u32 = 0;
    let mut x316: fiat_bp256_scalar_u1 = 0;
    let (x315, x316) = fiat_bp256_scalar_addcarryx_u32(x314, x302, x299);
    let mut x317: u32 = 0;
    let mut x318: fiat_bp256_scalar_u1 = 0;
    let (x317, x318) = fiat_bp256_scalar_addcarryx_u32(x316, x300, x297);
    let mut x319: u32 = 0;
    let mut x320: fiat_bp256_scalar_u1 = 0;
    let (x319, x320) = fiat_bp256_scalar_addcarryx_u32(x318, x298, x295);
    let mut x321: u32 = 0;
    let mut x322: fiat_bp256_scalar_u1 = 0;
    let (x321, x322) = fiat_bp256_scalar_addcarryx_u32(x320, x296, x293);
    let x323: u32 = ((x322 as u32) + x294);
    let mut x324: u32 = 0;
    let mut x325: fiat_bp256_scalar_u1 = 0;
    let (x324, x325) = fiat_bp256_scalar_addcarryx_u32(0x0, x276, x307);
    let mut x326: u32 = 0;
    let mut x327: fiat_bp256_scalar_u1 = 0;
    let (x326, x327) = fiat_bp256_scalar_addcarryx_u32(x325, x278, x309);
    let mut x328: u32 = 0;
    let mut x329: fiat_bp256_scalar_u1 = 0;
    let (x328, x329) = fiat_bp256_scalar_addcarryx_u32(x327, x280, x311);
    let mut x330: u32 = 0;
    let mut x331: fiat_bp256_scalar_u1 = 0;
    let (x330, x331) = fiat_bp256_scalar_addcarryx_u32(x329, x282, x313);
    let mut x332: u32 = 0;
    let mut x333: fiat_bp256_scalar_u1 = 0;
    let (x332, x333) = fiat_bp256_scalar_addcarryx_u32(x331, x284, x315);
    let mut x334: u32 = 0;
    let mut x335: fiat_bp256_scalar_u1 = 0;
    let (x334, x335) = fiat_bp256_scalar_addcarryx_u32(x333, x286, x317);
    let mut x336: u32 = 0;
    let mut x337: fiat_bp256_scalar_u1 = 0;
    let (x336, x337) = fiat_bp256_scalar_addcarryx_u32(x335, x288, x319);
    let mut x338: u32 = 0;
    let mut x339: fiat_bp256_scalar_u1 = 0;
    let (x338, x339) = fiat_bp256_scalar_addcarryx_u32(x337, x290, x321);
    let mut x340: u32 = 0;
    let mut x341: fiat_bp256_scalar_u1 = 0;
    let (x340, x341) = fiat_bp256_scalar_addcarryx_u32(x339, x292, x323);
    let mut x342: u32 = 0;
    let mut x343: u32 = 0;
    let (x342, x343) = fiat_bp256_scalar_mulx_u32(x324, 0xcbb40ee9);
    let mut x344: u32 = 0;
    let mut x345: u32 = 0;
    let (x344, x345) = fiat_bp256_scalar_mulx_u32(x342, 0xa9fb57db);
    let mut x346: u32 = 0;
    let mut x347: u32 = 0;
    let (x346, x347) = fiat_bp256_scalar_mulx_u32(x342, 0xa1eea9bc);
    let mut x348: u32 = 0;
    let mut x349: u32 = 0;
    let (x348, x349) = fiat_bp256_scalar_mulx_u32(x342, 0x3e660a90);
    let mut x350: u32 = 0;
    let mut x351: u32 = 0;
    let (x350, x351) = fiat_bp256_scalar_mulx_u32(x342, 0x9d838d71);
    let mut x352: u32 = 0;
    let mut x353: u32 = 0;
    let (x352, x353) = fiat_bp256_scalar_mulx_u32(x342, 0x8c397aa3);
    let mut x354: u32 = 0;
    let mut x355: u32 = 0;
    let (x354, x355) = fiat_bp256_scalar_mulx_u32(x342, 0xb561a6f7);
    let mut x356: u32 = 0;
    let mut x357: u32 = 0;
    let (x356, x357) = fiat_bp256_scalar_mulx_u32(x342, 0x901e0e82);
    let mut x358: u32 = 0;
    let mut x359: u32 = 0;
    let (x358, x359) = fiat_bp256_scalar_mulx_u32(x342, 0x974856a7);
    let mut x360: u32 = 0;
    let mut x361: fiat_bp256_scalar_u1 = 0;
    let (x360, x361) = fiat_bp256_scalar_addcarryx_u32(0x0, x359, x356);
    let mut x362: u32 = 0;
    let mut x363: fiat_bp256_scalar_u1 = 0;
    let (x362, x363) = fiat_bp256_scalar_addcarryx_u32(x361, x357, x354);
    let mut x364: u32 = 0;
    let mut x365: fiat_bp256_scalar_u1 = 0;
    let (x364, x365) = fiat_bp256_scalar_addcarryx_u32(x363, x355, x352);
    let mut x366: u32 = 0;
    let mut x367: fiat_bp256_scalar_u1 = 0;
    let (x366, x367) = fiat_bp256_scalar_addcarryx_u32(x365, x353, x350);
    let mut x368: u32 = 0;
    let mut x369: fiat_bp256_scalar_u1 = 0;
    let (x368, x369) = fiat_bp256_scalar_addcarryx_u32(x367, x351, x348);
    let mut x370: u32 = 0;
    let mut x371: fiat_bp256_scalar_u1 = 0;
    let (x370, x371) = fiat_bp256_scalar_addcarryx_u32(x369, x349, x346);
    let mut x372: u32 = 0;
    let mut x373: fiat_bp256_scalar_u1 = 0;
    let (x372, x373) = fiat_bp256_scalar_addcarryx_u32(x371, x347, x344);
    let x374: u32 = ((x373 as u32) + x345);
    let mut x375: u32 = 0;
    let mut x376: fiat_bp256_scalar_u1 = 0;
    let (x375, x376) = fiat_bp256_scalar_addcarryx_u32(0x0, x324, x358);
    let mut x377: u32 = 0;
    let mut x378: fiat_bp256_scalar_u1 = 0;
    let (x377, x378) = fiat_bp256_scalar_addcarryx_u32(x376, x326, x360);
    let mut x379: u32 = 0;
    let mut x380: fiat_bp256_scalar_u1 = 0;
    let (x379, x380) = fiat_bp256_scalar_addcarryx_u32(x378, x328, x362);
    let mut x381: u32 = 0;
    let mut x382: fiat_bp256_scalar_u1 = 0;
    let (x381, x382) = fiat_bp256_scalar_addcarryx_u32(x380, x330, x364);
    let mut x383: u32 = 0;
    let mut x384: fiat_bp256_scalar_u1 = 0;
    let (x383, x384) = fiat_bp256_scalar_addcarryx_u32(x382, x332, x366);
    let mut x385: u32 = 0;
    let mut x386: fiat_bp256_scalar_u1 = 0;
    let (x385, x386) = fiat_bp256_scalar_addcarryx_u32(x384, x334, x368);
    let mut x387: u32 = 0;
    let mut x388: fiat_bp256_scalar_u1 = 0;
    let (x387, x388) = fiat_bp256_scalar_addcarryx_u32(x386, x336, x370);
    let mut x389: u32 = 0;
    let mut x390: fiat_bp256_scalar_u1 = 0;
    let (x389, x390) = fiat_bp256_scalar_addcarryx_u32(x388, x338, x372);
    let mut x391: u32 = 0;
    let mut x392: fiat_bp256_scalar_u1 = 0;
    let (x391, x392) = fiat_bp256_scalar_addcarryx_u32(x390, x340, x374);
    let x393: u32 = ((x392 as u32) + (x341 as u32));
    let mut x394: u32 = 0;
    let mut x395: u32 = 0;
    let (x394, x395) = fiat_bp256_scalar_mulx_u32(x4, (arg1[7]));
    let mut x396: u32 = 0;
    let mut x397: u32 = 0;
    let (x396, x397) = fiat_bp256_scalar_mulx_u32(x4, (arg1[6]));
    let mut x398: u32 = 0;
    let mut x399: u32 = 0;
    let (x398, x399) = fiat_bp256_scalar_mulx_u32(x4, (arg1[5]));
    let mut x400: u32 = 0;
    let mut x401: u32 = 0;
    let (x400, x401) = fiat_bp256_scalar_mulx_u32(x4, (arg1[4]));
    let mut x402: u32 = 0;
    let mut x403: u32 = 0;
    let (x402, x403) = fiat_bp256_scalar_mulx_u32(x4, (arg1[3]));
    let mut x404: u32 = 0;
    let mut x405: u32 = 0;
    let (x404, x405) = fiat_bp256_scalar_mulx_u32(x4, (arg1[2]));
    let mut x406: u32 = 0;
    let mut x407: u32 = 0;
    let (x406, x407) = fiat_bp256_scalar_mulx_u32(x4, (arg1[1]));
    let mut x408: u32 = 0;
    let mut x409: u32 = 0;
    let (x408, x409) = fiat_bp256_scalar_mulx_u32(x4, (arg1[0]));
    let mut x410: u32 = 0;
    let mut x411: fiat_bp256_scalar_u1 = 0;
    let (x410, x411) = fiat_bp256_scalar_addcarryx_u32(0x0, x409, x406);
    let mut x412: u32 = 0;
    let mut x413: fiat_bp256_scalar_u1 = 0;
    let (x412, x413) = fiat_bp256_scalar_addcarryx_u32(x411, x407, x404);
    let mut x414: u32 = 0;
    let mut x415: fiat_bp256_scalar_u1 = 0;
    let (x414, x415) = fiat_bp256_scalar_addcarryx_u32(x413, x405, x402);
    let mut x416: u32 = 0;
    let mut x417: fiat_bp256_scalar_u1 = 0;
    let (x416, x417) = fiat_bp256_scalar_addcarryx_u32(x415, x403, x400);
    let mut x418: u32 = 0;
    let mut x419: fiat_bp256_scalar_u1 = 0;
    let (x418, x419) = fiat_bp256_scalar_addcarryx_u32(x417, x401, x398);
    let mut x420: u32 = 0;
    let mut x421: fiat_bp256_scalar_u1 = 0;
    let (x420, x421) = fiat_bp256_scalar_addcarryx_u32(x419, x399, x396);
    let mut x422: u32 = 0;
    let mut x423: fiat_bp256_scalar_u1 = 0;
    let (x422, x423) = fiat_bp256_scalar_addcarryx_u32(x421, x397, x394);
    let x424: u32 = ((x423 as u32) + x395);
    let mut x425: u32 = 0;
    let mut x426: fiat_bp256_scalar_u1 = 0;
    let (x425, x426) = fiat_bp256_scalar_addcarryx_u32(0x0, x377, x408);
    let mut x427: u32 = 0;
    let mut x428: fiat_bp256_scalar_u1 = 0;
    let (x427, x428) = fiat_bp256_scalar_addcarryx_u32(x426, x379, x410);
    let mut x429: u32 = 0;
    let mut x430: fiat_bp256_scalar_u1 = 0;
    let (x429, x430) = fiat_bp256_scalar_addcarryx_u32(x428, x381, x412);
    let mut x431: u32 = 0;
    let mut x432: fiat_bp256_scalar_u1 = 0;
    let (x431, x432) = fiat_bp256_scalar_addcarryx_u32(x430, x383, x414);
    let mut x433: u32 = 0;
    let mut x434: fiat_bp256_scalar_u1 = 0;
    let (x433, x434) = fiat_bp256_scalar_addcarryx_u32(x432, x385, x416);
    let mut x435: u32 = 0;
    let mut x436: fiat_bp256_scalar_u1 = 0;
    let (x435, x436) = fiat_bp256_scalar_addcarryx_u32(x434, x387, x418);
    let mut x437: u32 = 0;
    let mut x438: fiat_bp256_scalar_u1 = 0;
    let (x437, x438) = fiat_bp256_scalar_addcarryx_u32(x436, x389, x420);
    let mut x439: u32 = 0;
    let mut x440: fiat_bp256_scalar_u1 = 0;
    let (x439, x440) = fiat_bp256_scalar_addcarryx_u32(x438, x391, x422);
    let mut x441: u32 = 0;
    let mut x442: fiat_bp256_scalar_u1 = 0;
    let (x441, x442) = fiat_bp256_scalar_addcarryx_u32(x440, x393, x424);
    let mut x443: u32 = 0;
    let mut x444: u32 = 0;
    let (x443, x444) = fiat_bp256_scalar_mulx_u32(x425, 0xcbb40ee9);
    let mut x445: u32 = 0;
    let mut x446: u32 = 0;
    let (x445, x446) = fiat_bp256_scalar_mulx_u32(x443, 0xa9fb57db);
    let mut x447: u32 = 0;
    let mut x448: u32 = 0;
    let (x447, x448) = fiat_bp256_scalar_mulx_u32(x443, 0xa1eea9bc);
    let mut x449: u32 = 0;
    let mut x450: u32 = 0;
    let (x449, x450) = fiat_bp256_scalar_mulx_u32(x443, 0x3e660a90);
    let mut x451: u32 = 0;
    let mut x452: u32 = 0;
    let (x451, x452) = fiat_bp256_scalar_mulx_u32(x443, 0x9d838d71);
    let mut x453: u32 = 0;
    let mut x454: u32 = 0;
    let (x453, x454) = fiat_bp256_scalar_mulx_u32(x443, 0x8c397aa3);
    let mut x455: u32 = 0;
    let mut x456: u32 = 0;
    let (x455, x456) = fiat_bp256_scalar_mulx_u32(x443, 0xb561a6f7);
    let mut x457: u32 = 0;
    let mut x458: u32 = 0;
    let (x457, x458) = fiat_bp256_scalar_mulx_u32(x443, 0x901e0e82);
    let mut x459: u32 = 0;
    let mut x460: u32 = 0;
    let (x459, x460) = fiat_bp256_scalar_mulx_u32(x443, 0x974856a7);
    let mut x461: u32 = 0;
    let mut x462: fiat_bp256_scalar_u1 = 0;
    let (x461, x462) = fiat_bp256_scalar_addcarryx_u32(0x0, x460, x457);
    let mut x463: u32 = 0;
    let mut x464: fiat_bp256_scalar_u1 = 0;
    let (x463, x464) = fiat_bp256_scalar_addcarryx_u32(x462, x458, x455);
    let mut x465: u32 = 0;
    let mut x466: fiat_bp256_scalar_u1 = 0;
    let (x465, x466) = fiat_bp256_scalar_addcarryx_u32(x464, x456, x453);
    let mut x467: u32 = 0;
    let mut x468: fiat_bp256_scalar_u1 = 0;
    let (x467, x468) = fiat_bp256_scalar_addcarryx_u32(x466, x454, x451);
    let mut x469: u32 = 0;
    let mut x470: fiat_bp256_scalar_u1 = 0;
    let (x469, x470) = fiat_bp256_scalar_addcarryx_u32(x468, x452, x449);
    let mut x471: u32 = 0;
    let mut x472: fiat_bp256_scalar_u1 = 0;
    let (x471, x472) = fiat_bp256_scalar_addcarryx_u32(x470, x450, x447);
    let mut x473: u32 = 0;
    let mut x474: fiat_bp256_scalar_u1 = 0;
    let (x473, x474) = fiat_bp256_scalar_addcarryx_u32(x472, x448, x445);
    let x475: u32 = ((x474 as u32) + x446);
    let mut x476: u32 = 0;
    let mut x477: fiat_bp256_scalar_u1 = 0;
    let (x476, x477) = fiat_bp256_scalar_addcarryx_u32(0x0, x425, x459);
    let mut x478: u32 = 0;
    let mut x479: fiat_bp256_scalar_u1 = 0;
    let (x478, x479) = fiat_bp256_scalar_addcarryx_u32(x477, x427, x461);
    let mut x480: u32 = 0;
    let mut x481: fiat_bp256_scalar_u1 = 0;
    let (x480, x481) = fiat_bp256_scalar_addcarryx_u32(x479, x429, x463);
    let mut x482: u32 = 0;
    let mut x483: fiat_bp256_scalar_u1 = 0;
    let (x482, x483) = fiat_bp256_scalar_addcarryx_u32(x481, x431, x465);
    let mut x484: u32 = 0;
    let mut x485: fiat_bp256_scalar_u1 = 0;
    let (x484, x485) = fiat_bp256_scalar_addcarryx_u32(x483, x433, x467);
    let mut x486: u32 = 0;
    let mut x487: fiat_bp256_scalar_u1 = 0;
    let (x486, x487) = fiat_bp256_scalar_addcarryx_u32(x485, x435, x469);
    let mut x488: u32 = 0;
    let mut x489: fiat_bp256_scalar_u1 = 0;
    let (x488, x489) = fiat_bp256_scalar_addcarryx_u32(x487, x437, x471);
    let mut x490: u32 = 0;
    let mut x491: fiat_bp256_scalar_u1 = 0;
    let (x490, x491) = fiat_bp256_scalar_addcarryx_u32(x489, x439, x473);
    let mut x492: u32 = 0;
    let mut x493: fiat_bp256_scalar_u1 = 0;
    let (x492, x493) = fiat_bp256_scalar_addcarryx_u32(x491, x441, x475);
    let x494: u32 = ((x493 as u32) + (x442 as u32));
    let mut x495: u32 = 0;
    let mut x496: u32 = 0;
    let (x495, x496) = fiat_bp256_scalar_mulx_u32(x5, (arg1[7]));
    let mut x497: u32 = 0;
    let mut x498: u32 = 0;
    let (x497, x498) = fiat_bp256_scalar_mulx_u32(x5, (arg1[6]));
    let mut x499: u32 = 0;
    let mut x500: u32 = 0;
    let (x499, x500) = fiat_bp256_scalar_mulx_u32(x5, (arg1[5]));
    let mut x501: u32 = 0;
    let mut x502: u32 = 0;
    let (x501, x502) = fiat_bp256_scalar_mulx_u32(x5, (arg1[4]));
    let mut x503: u32 = 0;
    let mut x504: u32 = 0;
    let (x503, x504) = fiat_bp256_scalar_mulx_u32(x5, (arg1[3]));
    let mut x505: u32 = 0;
    let mut x506: u32 = 0;
    let (x505, x506) = fiat_bp256_scalar_mulx_u32(x5, (arg1[2]));
    let mut x507: u32 = 0;
    let mut x508: u32 = 0;
    let (x507, x508) = fiat_bp256_scalar_mulx_u32(x5, (arg1[1]));
    let mut x509: u32 = 0;
    let mut x510: u32 = 0;
    let (x509, x510) = fiat_bp256_scalar_mulx_u32(x5, (arg1[0]));
    let mut x511: u32 = 0;
    let mut x512: fiat_bp256_scalar_u1 = 0;
    let (x511, x512) = fiat_bp256_scalar_addcarryx_u32(0x0, x510, x507);
    let mut x513: u32 = 0;
    let mut x514: fiat_bp256_scalar_u1 = 0;
    let (x513, x514) = fiat_bp256_scalar_addcarryx_u32(x512, x508, x505);
    let mut x515: u32 = 0;
    let mut x516: fiat_bp256_scalar_u1 = 0;
    let (x515, x516) = fiat_bp256_scalar_addcarryx_u32(x514, x506, x503);
    let mut x517: u32 = 0;
    let mut x518: fiat_bp256_scalar_u1 = 0;
    let (x517, x518) = fiat_bp256_scalar_addcarryx_u32(x516, x504, x501);
    let mut x519: u32 = 0;
    let mut x520: fiat_bp256_scalar_u1 = 0;
    let (x519, x520) = fiat_bp256_scalar_addcarryx_u32(x518, x502, x499);
    let mut x521: u32 = 0;
    let mut x522: fiat_bp256_scalar_u1 = 0;
    let (x521, x522) = fiat_bp256_scalar_addcarryx_u32(x520, x500, x497);
    let mut x523: u32 = 0;
    let mut x524: fiat_bp256_scalar_u1 = 0;
    let (x523, x524) = fiat_bp256_scalar_addcarryx_u32(x522, x498, x495);
    let x525: u32 = ((x524 as u32) + x496);
    let mut x526: u32 = 0;
    let mut x527: fiat_bp256_scalar_u1 = 0;
    let (x526, x527) = fiat_bp256_scalar_addcarryx_u32(0x0, x478, x509);
    let mut x528: u32 = 0;
    let mut x529: fiat_bp256_scalar_u1 = 0;
    let (x528, x529) = fiat_bp256_scalar_addcarryx_u32(x527, x480, x511);
    let mut x530: u32 = 0;
    let mut x531: fiat_bp256_scalar_u1 = 0;
    let (x530, x531) = fiat_bp256_scalar_addcarryx_u32(x529, x482, x513);
    let mut x532: u32 = 0;
    let mut x533: fiat_bp256_scalar_u1 = 0;
    let (x532, x533) = fiat_bp256_scalar_addcarryx_u32(x531, x484, x515);
    let mut x534: u32 = 0;
    let mut x535: fiat_bp256_scalar_u1 = 0;
    let (x534, x535) = fiat_bp256_scalar_addcarryx_u32(x533, x486, x517);
    let mut x536: u32 = 0;
    let mut x537: fiat_bp256_scalar_u1 = 0;
    let (x536, x537) = fiat_bp256_scalar_addcarryx_u32(x535, x488, x519);
    let mut x538: u32 = 0;
    let mut x539: fiat_bp256_scalar_u1 = 0;
    let (x538, x539) = fiat_bp256_scalar_addcarryx_u32(x537, x490, x521);
    let mut x540: u32 = 0;
    let mut x541: fiat_bp256_scalar_u1 = 0;
    let (x540, x541) = fiat_bp256_scalar_addcarryx_u32(x539, x492, x523);
    let mut x542: u32 = 0;
    let mut x543: fiat_bp256_scalar_u1 = 0;
    let (x542, x543) = fiat_bp256_scalar_addcarryx_u32(x541, x494, x525);
    let mut x544: u32 = 0;
    let mut x545: u32 = 0;
    let (x544, x545) = fiat_bp256_scalar_mulx_u32(x526, 0xcbb40ee9);
    let mut x546: u32 = 0;
    let mut x547: u32 = 0;
    let (x546, x547) = fiat_bp256_scalar_mulx_u32(x544, 0xa9fb57db);
    let mut x548: u32 = 0;
    let mut x549: u32 = 0;
    let (x548, x549) = fiat_bp256_scalar_mulx_u32(x544, 0xa1eea9bc);
    let mut x550: u32 = 0;
    let mut x551: u32 = 0;
    let (x550, x551) = fiat_bp256_scalar_mulx_u32(x544, 0x3e660a90);
    let mut x552: u32 = 0;
    let mut x553: u32 = 0;
    let (x552, x553) = fiat_bp256_scalar_mulx_u32(x544, 0x9d838d71);
    let mut x554: u32 = 0;
    let mut x555: u32 = 0;
    let (x554, x555) = fiat_bp256_scalar_mulx_u32(x544, 0x8c397aa3);
    let mut x556: u32 = 0;
    let mut x557: u32 = 0;
    let (x556, x557) = fiat_bp256_scalar_mulx_u32(x544, 0xb561a6f7);
    let mut x558: u32 = 0;
    let mut x559: u32 = 0;
    let (x558, x559) = fiat_bp256_scalar_mulx_u32(x544, 0x901e0e82);
    let mut x560: u32 = 0;
    let mut x561: u32 = 0;
    let (x560, x561) = fiat_bp256_scalar_mulx_u32(x544, 0x974856a7);
    let mut x562: u32 = 0;
    let mut x563: fiat_bp256_scalar_u1 = 0;
    let (x562, x563) = fiat_bp256_scalar_addcarryx_u32(0x0, x561, x558);
    let mut x564: u32 = 0;
    let mut x565: fiat_bp256_scalar_u1 = 0;
    let (x564, x565) = fiat_bp256_scalar_addcarryx_u32(x563, x559, x556);
    let mut x566: u32 = 0;
    let mut x567: fiat_bp256_scalar_u1 = 0;
    let (x566, x567) = fiat_bp256_scalar_addcarryx_u32(x565, x557, x554);
    let mut x568: u32 = 0;
    let mut x569: fiat_bp256_scalar_u1 = 0;
    let (x568, x569) = fiat_bp256_scalar_addcarryx_u32(x567, x555, x552);
    let mut x570: u32 = 0;
    let mut x571: fiat_bp256_scalar_u1 = 0;
    let (x570, x571) = fiat_bp256_scalar_addcarryx_u32(x569, x553, x550);
    let mut x572: u32 = 0;
    let mut x573: fiat_bp256_scalar_u1 = 0;
    let (x572, x573) = fiat_bp256_scalar_addcarryx_u32(x571, x551, x548);
    let mut x574: u32 = 0;
    let mut x575: fiat_bp256_scalar_u1 = 0;
    let (x574, x575) = fiat_bp256_scalar_addcarryx_u32(x573, x549, x546);
    let x576: u32 = ((x575 as u32) + x547);
    let mut x577: u32 = 0;
    let mut x578: fiat_bp256_scalar_u1 = 0;
    let (x577, x578) = fiat_bp256_scalar_addcarryx_u32(0x0, x526, x560);
    let mut x579: u32 = 0;
    let mut x580: fiat_bp256_scalar_u1 = 0;
    let (x579, x580) = fiat_bp256_scalar_addcarryx_u32(x578, x528, x562);
    let mut x581: u32 = 0;
    let mut x582: fiat_bp256_scalar_u1 = 0;
    let (x581, x582) = fiat_bp256_scalar_addcarryx_u32(x580, x530, x564);
    let mut x583: u32 = 0;
    let mut x584: fiat_bp256_scalar_u1 = 0;
    let (x583, x584) = fiat_bp256_scalar_addcarryx_u32(x582, x532, x566);
    let mut x585: u32 = 0;
    let mut x586: fiat_bp256_scalar_u1 = 0;
    let (x585, x586) = fiat_bp256_scalar_addcarryx_u32(x584, x534, x568);
    let mut x587: u32 = 0;
    let mut x588: fiat_bp256_scalar_u1 = 0;
    let (x587, x588) = fiat_bp256_scalar_addcarryx_u32(x586, x536, x570);
    let mut x589: u32 = 0;
    let mut x590: fiat_bp256_scalar_u1 = 0;
    let (x589, x590) = fiat_bp256_scalar_addcarryx_u32(x588, x538, x572);
    let mut x591: u32 = 0;
    let mut x592: fiat_bp256_scalar_u1 = 0;
    let (x591, x592) = fiat_bp256_scalar_addcarryx_u32(x590, x540, x574);
    let mut x593: u32 = 0;
    let mut x594: fiat_bp256_scalar_u1 = 0;
    let (x593, x594) = fiat_bp256_scalar_addcarryx_u32(x592, x542, x576);
    let x595: u32 = ((x594 as u32) + (x543 as u32));
    let mut x596: u32 = 0;
    let mut x597: u32 = 0;
    let (x596, x597) = fiat_bp256_scalar_mulx_u32(x6, (arg1[7]));
    let mut x598: u32 = 0;
    let mut x599: u32 = 0;
    let (x598, x599) = fiat_bp256_scalar_mulx_u32(x6, (arg1[6]));
    let mut x600: u32 = 0;
    let mut x601: u32 = 0;
    let (x600, x601) = fiat_bp256_scalar_mulx_u32(x6, (arg1[5]));
    let mut x602: u32 = 0;
    let mut x603: u32 = 0;
    let (x602, x603) = fiat_bp256_scalar_mulx_u32(x6, (arg1[4]));
    let mut x604: u32 = 0;
    let mut x605: u32 = 0;
    let (x604, x605) = fiat_bp256_scalar_mulx_u32(x6, (arg1[3]));
    let mut x606: u32 = 0;
    let mut x607: u32 = 0;
    let (x606, x607) = fiat_bp256_scalar_mulx_u32(x6, (arg1[2]));
    let mut x608: u32 = 0;
    let mut x609: u32 = 0;
    let (x608, x609) = fiat_bp256_scalar_mulx_u32(x6, (arg1[1]));
    let mut x610: u32 = 0;
    let mut x611: u32 = 0;
    let (x610, x611) = fiat_bp256_scalar_mulx_u32(x6, (arg1[0]));
    let mut x612: u32 = 0;
    let mut x613: fiat_bp256_scalar_u1 = 0;
    let (x612, x613) = fiat_bp256_scalar_addcarryx_u32(0x0, x611, x608);
    let mut x614: u32 = 0;
    let mut x615: fiat_bp256_scalar_u1 = 0;
    let (x614, x615) = fiat_bp256_scalar_addcarryx_u32(x613, x609, x606);
    let mut x616: u32 = 0;
    let mut x617: fiat_bp256_scalar_u1 = 0;
    let (x616, x617) = fiat_bp256_scalar_addcarryx_u32(x615, x607, x604);
    let mut x618: u32 = 0;
    let mut x619: fiat_bp256_scalar_u1 = 0;
    let (x618, x619) = fiat_bp256_scalar_addcarryx_u32(x617, x605, x602);
    let mut x620: u32 = 0;
    let mut x621: fiat_bp256_scalar_u1 = 0;
    let (x620, x621) = fiat_bp256_scalar_addcarryx_u32(x619, x603, x600);
    let mut x622: u32 = 0;
    let mut x623: fiat_bp256_scalar_u1 = 0;
    let (x622, x623) = fiat_bp256_scalar_addcarryx_u32(x621, x601, x598);
    let mut x624: u32 = 0;
    let mut x625: fiat_bp256_scalar_u1 = 0;
    let (x624, x625) = fiat_bp256_scalar_addcarryx_u32(x623, x599, x596);
    let x626: u32 = ((x625 as u32) + x597);
    let mut x627: u32 = 0;
    let mut x628: fiat_bp256_scalar_u1 = 0;
    let (x627, x628) = fiat_bp256_scalar_addcarryx_u32(0x0, x579, x610);
    let mut x629: u32 = 0;
    let mut x630: fiat_bp256_scalar_u1 = 0;
    let (x629, x630) = fiat_bp256_scalar_addcarryx_u32(x628, x581, x612);
    let mut x631: u32 = 0;
    let mut x632: fiat_bp256_scalar_u1 = 0;
    let (x631, x632) = fiat_bp256_scalar_addcarryx_u32(x630, x583, x614);
    let mut x633: u32 = 0;
    let mut x634: fiat_bp256_scalar_u1 = 0;
    let (x633, x634) = fiat_bp256_scalar_addcarryx_u32(x632, x585, x616);
    let mut x635: u32 = 0;
    let mut x636: fiat_bp256_scalar_u1 = 0;
    let (x635, x636) = fiat_bp256_scalar_addcarryx_u32(x634, x587, x618);
    let mut x637: u32 = 0;
    let mut x638: fiat_bp256_scalar_u1 = 0;
    let (x637, x638) = fiat_bp256_scalar_addcarryx_u32(x636, x589, x620);
    let mut x639: u32 = 0;
    let mut x640: fiat_bp256_scalar_u1 = 0;
    let (x639, x640) = fiat_bp256_scalar_addcarryx_u32(x638, x591, x622);
    let mut x641: u32 = 0;
    let mut x642: fiat_bp256_scalar_u1 = 0;
    let (x641, x642) = fiat_bp256_scalar_addcarryx_u32(x640, x593, x624);
    let mut x643: u32 = 0;
    let mut x644: fiat_bp256_scalar_u1 = 0;
    let (x643, x644) = fiat_bp256_scalar_addcarryx_u32(x642, x595, x626);
    let mut x645: u32 = 0;
    let mut x646: u32 = 0;
    let (x645, x646) = fiat_bp256_scalar_mulx_u32(x627, 0xcbb40ee9);
    let mut x647: u32 = 0;
    let mut x648: u32 = 0;
    let (x647, x648) = fiat_bp256_scalar_mulx_u32(x645, 0xa9fb57db);
    let mut x649: u32 = 0;
    let mut x650: u32 = 0;
    let (x649, x650) = fiat_bp256_scalar_mulx_u32(x645, 0xa1eea9bc);
    let mut x651: u32 = 0;
    let mut x652: u32 = 0;
    let (x651, x652) = fiat_bp256_scalar_mulx_u32(x645, 0x3e660a90);
    let mut x653: u32 = 0;
    let mut x654: u32 = 0;
    let (x653, x654) = fiat_bp256_scalar_mulx_u32(x645, 0x9d838d71);
    let mut x655: u32 = 0;
    let mut x656: u32 = 0;
    let (x655, x656) = fiat_bp256_scalar_mulx_u32(x645, 0x8c397aa3);
    let mut x657: u32 = 0;
    let mut x658: u32 = 0;
    let (x657, x658) = fiat_bp256_scalar_mulx_u32(x645, 0xb561a6f7);
    let mut x659: u32 = 0;
    let mut x660: u32 = 0;
    let (x659, x660) = fiat_bp256_scalar_mulx_u32(x645, 0x901e0e82);
    let mut x661: u32 = 0;
    let mut x662: u32 = 0;
    let (x661, x662) = fiat_bp256_scalar_mulx_u32(x645, 0x974856a7);
    let mut x663: u32 = 0;
    let mut x664: fiat_bp256_scalar_u1 = 0;
    let (x663, x664) = fiat_bp256_scalar_addcarryx_u32(0x0, x662, x659);
    let mut x665: u32 = 0;
    let mut x666: fiat_bp256_scalar_u1 = 0;
    let (x665, x666) = fiat_bp256_scalar_addcarryx_u32(x664, x660, x657);
    let mut x667: u32 = 0;
    let mut x668: fiat_bp256_scalar_u1 = 0;
    let (x667, x668) = fiat_bp256_scalar_addcarryx_u32(x666, x658, x655);
    let mut x669: u32 = 0;
    let mut x670: fiat_bp256_scalar_u1 = 0;
    let (x669, x670) = fiat_bp256_scalar_addcarryx_u32(x668, x656, x653);
    let mut x671: u32 = 0;
    let mut x672: fiat_bp256_scalar_u1 = 0;
    let (x671, x672) = fiat_bp256_scalar_addcarryx_u32(x670, x654, x651);
    let mut x673: u32 = 0;
    let mut x674: fiat_bp256_scalar_u1 = 0;
    let (x673, x674) = fiat_bp256_scalar_addcarryx_u32(x672, x652, x649);
    let mut x675: u32 = 0;
    let mut x676: fiat_bp256_scalar_u1 = 0;
    let (x675, x676) = fiat_bp256_scalar_addcarryx_u32(x674, x650, x647);
    let x677: u32 = ((x676 as u32) + x648);
    let mut x678: u32 = 0;
    let mut x679: fiat_bp256_scalar_u1 = 0;
    let (x678, x679) = fiat_bp256_scalar_addcarryx_u32(0x0, x627, x661);
    let mut x680: u32 = 0;
    let mut x681: fiat_bp256_scalar_u1 = 0;
    let (x680, x681) = fiat_bp256_scalar_addcarryx_u32(x679, x629, x663);
    let mut x682: u32 = 0;
    let mut x683: fiat_bp256_scalar_u1 = 0;
    let (x682, x683) = fiat_bp256_scalar_addcarryx_u32(x681, x631, x665);
    let mut x684: u32 = 0;
    let mut x685: fiat_bp256_scalar_u1 = 0;
    let (x684, x685) = fiat_bp256_scalar_addcarryx_u32(x683, x633, x667);
    let mut x686: u32 = 0;
    let mut x687: fiat_bp256_scalar_u1 = 0;
    let (x686, x687) = fiat_bp256_scalar_addcarryx_u32(x685, x635, x669);
    let mut x688: u32 = 0;
    let mut x689: fiat_bp256_scalar_u1 = 0;
    let (x688, x689) = fiat_bp256_scalar_addcarryx_u32(x687, x637, x671);
    let mut x690: u32 = 0;
    let mut x691: fiat_bp256_scalar_u1 = 0;
    let (x690, x691) = fiat_bp256_scalar_addcarryx_u32(x689, x639, x673);
    let mut x692: u32 = 0;
    let mut x693: fiat_bp256_scalar_u1 = 0;
    let (x692, x693) = fiat_bp256_scalar_addcarryx_u32(x691, x641, x675);
    let mut x694: u32 = 0;
    let mut x695: fiat_bp256_scalar_u1 = 0;
    let (x694, x695) = fiat_bp256_scalar_addcarryx_u32(x693, x643, x677);
    let x696: u32 = ((x695 as u32) + (x644 as u32));
    let mut x697: u32 = 0;
    let mut x698: u32 = 0;
    let (x697, x698) = fiat_bp256_scalar_mulx_u32(x7, (arg1[7]));
    let mut x699: u32 = 0;
    let mut x700: u32 = 0;
    let (x699, x700) = fiat_bp256_scalar_mulx_u32(x7, (arg1[6]));
    let mut x701: u32 = 0;
    let mut x702: u32 = 0;
    let (x701, x702) = fiat_bp256_scalar_mulx_u32(x7, (arg1[5]));
    let mut x703: u32 = 0;
    let mut x704: u32 = 0;
    let (x703, x704) = fiat_bp256_scalar_mulx_u32(x7, (arg1[4]));
    let mut x705: u32 = 0;
    let mut x706: u32 = 0;
    let (x705, x706) = fiat_bp256_scalar_mulx_u32(x7, (arg1[3]));
    let mut x707: u32 = 0;
    let mut x708: u32 = 0;
    let (x707, x708) = fiat_bp256_scalar_mulx_u32(x7, (arg1[2]));
    let mut x709: u32 = 0;
    let mut x710: u32 = 0;
    let (x709, x710) = fiat_bp256_scalar_mulx_u32(x7, (arg1[1]));
    let mut x711: u32 = 0;
    let mut x712: u32 = 0;
    let (x711, x712) = fiat_bp256_scalar_mulx_u32(x7, (arg1[0]));
    let mut x713: u32 = 0;
    let mut x714: fiat_bp256_scalar_u1 = 0;
    let (x713, x714) = fiat_bp256_scalar_addcarryx_u32(0x0, x712, x709);
    let mut x715: u32 = 0;
    let mut x716: fiat_bp256_scalar_u1 = 0;
    let (x715, x716) = fiat_bp256_scalar_addcarryx_u32(x714, x710, x707);
    let mut x717: u32 = 0;
    let mut x718: fiat_bp256_scalar_u1 = 0;
    let (x717, x718) = fiat_bp256_scalar_addcarryx_u32(x716, x708, x705);
    let mut x719: u32 = 0;
    let mut x720: fiat_bp256_scalar_u1 = 0;
    let (x719, x720) = fiat_bp256_scalar_addcarryx_u32(x718, x706, x703);
    let mut x721: u32 = 0;
    let mut x722: fiat_bp256_scalar_u1 = 0;
    let (x721, x722) = fiat_bp256_scalar_addcarryx_u32(x720, x704, x701);
    let mut x723: u32 = 0;
    let mut x724: fiat_bp256_scalar_u1 = 0;
    let (x723, x724) = fiat_bp256_scalar_addcarryx_u32(x722, x702, x699);
    let mut x725: u32 = 0;
    let mut x726: fiat_bp256_scalar_u1 = 0;
    let (x725, x726) = fiat_bp256_scalar_addcarryx_u32(x724, x700, x697);
    let x727: u32 = ((x726 as u32) + x698);
    let mut x728: u32 = 0;
    let mut x729: fiat_bp256_scalar_u1 = 0;
    let (x728, x729) = fiat_bp256_scalar_addcarryx_u32(0x0, x680, x711);
    let mut x730: u32 = 0;
    let mut x731: fiat_bp256_scalar_u1 = 0;
    let (x730, x731) = fiat_bp256_scalar_addcarryx_u32(x729, x682, x713);
    let mut x732: u32 = 0;
    let mut x733: fiat_bp256_scalar_u1 = 0;
    let (x732, x733) = fiat_bp256_scalar_addcarryx_u32(x731, x684, x715);
    let mut x734: u32 = 0;
    let mut x735: fiat_bp256_scalar_u1 = 0;
    let (x734, x735) = fiat_bp256_scalar_addcarryx_u32(x733, x686, x717);
    let mut x736: u32 = 0;
    let mut x737: fiat_bp256_scalar_u1 = 0;
    let (x736, x737) = fiat_bp256_scalar_addcarryx_u32(x735, x688, x719);
    let mut x738: u32 = 0;
    let mut x739: fiat_bp256_scalar_u1 = 0;
    let (x738, x739) = fiat_bp256_scalar_addcarryx_u32(x737, x690, x721);
    let mut x740: u32 = 0;
    let mut x741: fiat_bp256_scalar_u1 = 0;
    let (x740, x741) = fiat_bp256_scalar_addcarryx_u32(x739, x692, x723);
    let mut x742: u32 = 0;
    let mut x743: fiat_bp256_scalar_u1 = 0;
    let (x742, x743) = fiat_bp256_scalar_addcarryx_u32(x741, x694, x725);
    let mut x744: u32 = 0;
    let mut x745: fiat_bp256_scalar_u1 = 0;
    let (x744, x745) = fiat_bp256_scalar_addcarryx_u32(x743, x696, x727);
    let mut x746: u32 = 0;
    let mut x747: u32 = 0;
    let (x746, x747) = fiat_bp256_scalar_mulx_u32(x728, 0xcbb40ee9);
    let mut x748: u32 = 0;
    let mut x749: u32 = 0;
    let (x748, x749) = fiat_bp256_scalar_mulx_u32(x746, 0xa9fb57db);
    let mut x750: u32 = 0;
    let mut x751: u32 = 0;
    let (x750, x751) = fiat_bp256_scalar_mulx_u32(x746, 0xa1eea9bc);
    let mut x752: u32 = 0;
    let mut x753: u32 = 0;
    let (x752, x753) = fiat_bp256_scalar_mulx_u32(x746, 0x3e660a90);
    let mut x754: u32 = 0;
    let mut x755: u32 = 0;
    let (x754, x755) = fiat_bp256_scalar_mulx_u32(x746, 0x9d838d71);
    let mut x756: u32 = 0;
    let mut x757: u32 = 0;
    let (x756, x757) = fiat_bp256_scalar_mulx_u32(x746, 0x8c397aa3);
    let mut x758: u32 = 0;
    let mut x759: u32 = 0;
    let (x758, x759) = fiat_bp256_scalar_mulx_u32(x746, 0xb561a6f7);
    let mut x760: u32 = 0;
    let mut x761: u32 = 0;
    let (x760, x761) = fiat_bp256_scalar_mulx_u32(x746, 0x901e0e82);
    let mut x762: u32 = 0;
    let mut x763: u32 = 0;
    let (x762, x763) = fiat_bp256_scalar_mulx_u32(x746, 0x974856a7);
    let mut x764: u32 = 0;
    let mut x765: fiat_bp256_scalar_u1 = 0;
    let (x764, x765) = fiat_bp256_scalar_addcarryx_u32(0x0, x763, x760);
    let mut x766: u32 = 0;
    let mut x767: fiat_bp256_scalar_u1 = 0;
    let (x766, x767) = fiat_bp256_scalar_addcarryx_u32(x765, x761, x758);
    let mut x768: u32 = 0;
    let mut x769: fiat_bp256_scalar_u1 = 0;
    let (x768, x769) = fiat_bp256_scalar_addcarryx_u32(x767, x759, x756);
    let mut x770: u32 = 0;
    let mut x771: fiat_bp256_scalar_u1 = 0;
    let (x770, x771) = fiat_bp256_scalar_addcarryx_u32(x769, x757, x754);
    let mut x772: u32 = 0;
    let mut x773: fiat_bp256_scalar_u1 = 0;
    let (x772, x773) = fiat_bp256_scalar_addcarryx_u32(x771, x755, x752);
    let mut x774: u32 = 0;
    let mut x775: fiat_bp256_scalar_u1 = 0;
    let (x774, x775) = fiat_bp256_scalar_addcarryx_u32(x773, x753, x750);
    let mut x776: u32 = 0;
    let mut x777: fiat_bp256_scalar_u1 = 0;
    let (x776, x777) = fiat_bp256_scalar_addcarryx_u32(x775, x751, x748);
    let x778: u32 = ((x777 as u32) + x749);
    let mut x779: u32 = 0;
    let mut x780: fiat_bp256_scalar_u1 = 0;
    let (x779, x780) = fiat_bp256_scalar_addcarryx_u32(0x0, x728, x762);
    let mut x781: u32 = 0;
    let mut x782: fiat_bp256_scalar_u1 = 0;
    let (x781, x782) = fiat_bp256_scalar_addcarryx_u32(x780, x730, x764);
    let mut x783: u32 = 0;
    let mut x784: fiat_bp256_scalar_u1 = 0;
    let (x783, x784) = fiat_bp256_scalar_addcarryx_u32(x782, x732, x766);
    let mut x785: u32 = 0;
    let mut x786: fiat_bp256_scalar_u1 = 0;
    let (x785, x786) = fiat_bp256_scalar_addcarryx_u32(x784, x734, x768);
    let mut x787: u32 = 0;
    let mut x788: fiat_bp256_scalar_u1 = 0;
    let (x787, x788) = fiat_bp256_scalar_addcarryx_u32(x786, x736, x770);
    let mut x789: u32 = 0;
    let mut x790: fiat_bp256_scalar_u1 = 0;
    let (x789, x790) = fiat_bp256_scalar_addcarryx_u32(x788, x738, x772);
    let mut x791: u32 = 0;
    let mut x792: fiat_bp256_scalar_u1 = 0;
    let (x791, x792) = fiat_bp256_scalar_addcarryx_u32(x790, x740, x774);
    let mut x793: u32 = 0;
    let mut x794: fiat_bp256_scalar_u1 = 0;
    let (x793, x794) = fiat_bp256_scalar_addcarryx_u32(x792, x742, x776);
    let mut x795: u32 = 0;
    let mut x796: fiat_bp256_scalar_u1 = 0;
    let (x795, x796) = fiat_bp256_scalar_addcarryx_u32(x794, x744, x778);
    let x797: u32 = ((x796 as u32) + (x745 as u32));
    let mut x798: u32 = 0;
    let mut x799: fiat_bp256_scalar_u1 = 0;
    let (x798, x799) = fiat_bp256_scalar_subborrowx_u32(0x0, x781, 0x974856a7);
    let mut x800: u32 = 0;
    let mut x801: fiat_bp256_scalar_u1 = 0;
    let (x800, x801) = fiat_bp256_scalar_subborrowx_u32(x799, x783, 0x901e0e82);
    let mut x802: u32 = 0;
    let mut x803: fiat_bp256_scalar_u1 = 0;
    let (x802, x803) = fiat_bp256_scalar_subborrowx_u32(x801, x785, 0xb561a6f7);
    let mut x804: u32 = 0;
    let mut x805: fiat_bp256_scalar_u1 = 0;
    let (x804, x805) = fiat_bp256_scalar_subborrowx_u32(x803, x787, 0x8c397aa3);
    let mut x806: u32 = 0;
    let mut x807: fiat_bp256_scalar_u1 = 0;
    let (x806, x807) = fiat_bp256_scalar_subborrowx_u32(x805, x789, 0x9d838d71);
    let mut x808: u32 = 0;
    let mut x809: fiat_bp256_scalar_u1 = 0;
    let (x808, x809) = fiat_bp256_scalar_subborrowx_u32(x807, x791, 0x3e660a90);
    let mut x810: u32 = 0;
    let mut x811: fiat_bp256_scalar_u1 = 0;
    let (x810, x811) = fiat_bp256_scalar_subborrowx_u32(x809, x793, 0xa1eea9bc);
    let mut x812: u32 = 0;
    let mut x813: fiat_bp256_scalar_u1 = 0;
    let (x812, x813) = fiat_bp256_scalar_subborrowx_u32(x811, x795, 0xa9fb57db);
    let mut x814: u32 = 0;
    let mut x815: fiat_bp256_scalar_u1 = 0;
    let (x814, x815) = fiat_bp256_scalar_subborrowx_u32(x813, x797, (0x0 as u32));
    let mut x816: u32 = 0;
    let (x816) = fiat_bp256_scalar_cmovznz_u32(x815, x798, x781);
    let mut x817: u32 = 0;
    let (x817) = fiat_bp256_scalar_cmovznz_u32(x815, x800, x783);
    let mut x818: u32 = 0;
    let (x818) = fiat_bp256_scalar_cmovznz_u32(x815, x802, x785);
    let mut x819: u32 = 0;
    let (x819) = fiat_bp256_scalar_cmovznz_u32(x815, x804, x787);
    let mut x820: u32 = 0;
    let (x820) = fiat_bp256_scalar_cmovznz_u32(x815, x806, x789);
    let mut x821: u32 = 0;
    let (x821) = fiat_bp256_scalar_cmovznz_u32(x815, x808, x791);
    let mut x822: u32 = 0;
    let (x822) = fiat_bp256_scalar_cmovznz_u32(x815, x810, x793);
    let mut x823: u32 = 0;
    let (x823) = fiat_bp256_scalar_cmovznz_u32(x815, x812, x795);
    out1[0] = x816;
    out1[1] = x817;
    out1[2] = x818;
    out1[3] = x819;
    out1[4] = x820;
    out1[5] = x821;
    out1[6] = x822;
    out1[7] = x823;
    out1
}
#[doc = " The function fiat_bp256_scalar_add adds two field elements in the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = "   0 ≤ eval arg2 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) + eval (from_montgomery arg2)) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_bp256_scalar_add(
    arg1: &fiat_bp256_scalar_montgomery_domain_field_element,
    arg2: &fiat_bp256_scalar_montgomery_domain_field_element,
) -> fiat_bp256_scalar_montgomery_domain_field_element {
    let mut out1: fiat_bp256_scalar_montgomery_domain_field_element = [0; 8];
    let mut x1: u32 = 0;
    let mut x2: fiat_bp256_scalar_u1 = 0;
    let (x1, x2) = fiat_bp256_scalar_addcarryx_u32(0x0, (arg1[0]), (arg2[0]));
    let mut x3: u32 = 0;
    let mut x4: fiat_bp256_scalar_u1 = 0;
    let (x3, x4) = fiat_bp256_scalar_addcarryx_u32(x2, (arg1[1]), (arg2[1]));
    let mut x5: u32 = 0;
    let mut x6: fiat_bp256_scalar_u1 = 0;
    let (x5, x6) = fiat_bp256_scalar_addcarryx_u32(x4, (arg1[2]), (arg2[2]));
    let mut x7: u32 = 0;
    let mut x8: fiat_bp256_scalar_u1 = 0;
    let (x7, x8) = fiat_bp256_scalar_addcarryx_u32(x6, (arg1[3]), (arg2[3]));
    let mut x9: u32 = 0;
    let mut x10: fiat_bp256_scalar_u1 = 0;
    let (x9, x10) = fiat_bp256_scalar_addcarryx_u32(x8, (arg1[4]), (arg2[4]));
    let mut x11: u32 = 0;
    let mut x12: fiat_bp256_scalar_u1 = 0;
    let (x11, x12) = fiat_bp256_scalar_addcarryx_u32(x10, (arg1[5]), (arg2[5]));
    let mut x13: u32 = 0;
    let mut x14: fiat_bp256_scalar_u1 = 0;
    let (x13, x14) = fiat_bp256_scalar_addcarryx_u32(x12, (arg1[6]), (arg2[6]));
    let mut x15: u32 = 0;
    let mut x16: fiat_bp256_scalar_u1 = 0;
    let (x15, x16) = fiat_bp256_scalar_addcarryx_u32(x14, (arg1[7]), (arg2[7]));
    let mut x17: u32 = 0;
    let mut x18: fiat_bp256_scalar_u1 = 0;
    let (x17, x18) = fiat_bp256_scalar_subborrowx_u32(0x0, x1, 0x974856a7);
    let mut x19: u32 = 0;
    let mut x20: fiat_bp256_scalar_u1 = 0;
    let (x19, x20) = fiat_bp256_scalar_subborrowx_u32(x18, x3, 0x901e0e82);
    let mut x21: u32 = 0;
    let mut x22: fiat_bp256_scalar_u1 = 0;
    let (x21, x22) = fiat_bp256_scalar_subborrowx_u32(x20, x5, 0xb561a6f7);
    let mut x23: u32 = 0;
    let mut x24: fiat_bp256_scalar_u1 = 0;
    let (x23, x24) = fiat_bp256_scalar_subborrowx_u32(x22, x7, 0x8c397aa3);
    let mut x25: u32 = 0;
    let mut x26: fiat_bp256_scalar_u1 = 0;
    let (x25, x26) = fiat_bp256_scalar_subborrowx_u32(x24, x9, 0x9d838d71);
    let mut x27: u32 = 0;
    let mut x28: fiat_bp256_scalar_u1 = 0;
    let (x27, x28) = fiat_bp256_scalar_subborrowx_u32(x26, x11, 0x3e660a90);
    let mut x29: u32 = 0;
    let mut x30: fiat_bp256_scalar_u1 = 0;
    let (x29, x30) = fiat_bp256_scalar_subborrowx_u32(x28, x13, 0xa1eea9bc);
    let mut x31: u32 = 0;
    let mut x32: fiat_bp256_scalar_u1 = 0;
    let (x31, x32) = fiat_bp256_scalar_subborrowx_u32(x30, x15, 0xa9fb57db);
    let mut x33: u32 = 0;
    let mut x34: fiat_bp256_scalar_u1 = 0;
    let (x33, x34) = fiat_bp256_scalar_subborrowx_u32(x32, (x16 as u32), (0x0 as u32));
    let mut x35: u32 = 0;
    let (x35) = fiat_bp256_scalar_cmovznz_u32(x34, x17, x1);
    let mut x36: u32 = 0;
    let (x36) = fiat_bp256_scalar_cmovznz_u32(x34, x19, x3);
    let mut x37: u32 = 0;
    let (x37) = fiat_bp256_scalar_cmovznz_u32(x34, x21, x5);
    let mut x38: u32 = 0;
    let (x38) = fiat_bp256_scalar_cmovznz_u32(x34, x23, x7);
    let mut x39: u32 = 0;
    let (x39) = fiat_bp256_scalar_cmovznz_u32(x34, x25, x9);
    let mut x40: u32 = 0;
    let (x40) = fiat_bp256_scalar_cmovznz_u32(x34, x27, x11);
    let mut x41: u32 = 0;
    let (x41) = fiat_bp256_scalar_cmovznz_u32(x34, x29, x13);
    let mut x42: u32 = 0;
    let (x42) = fiat_bp256_scalar_cmovznz_u32(x34, x31, x15);
    out1[0] = x35;
    out1[1] = x36;
    out1[2] = x37;
    out1[3] = x38;
    out1[4] = x39;
    out1[5] = x40;
    out1[6] = x41;
    out1[7] = x42;
    out1
}
#[doc = " The function fiat_bp256_scalar_sub subtracts two field elements in the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = "   0 ≤ eval arg2 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = (eval (from_montgomery arg1) - eval (from_montgomery arg2)) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_bp256_scalar_sub(
    arg1: &fiat_bp256_scalar_montgomery_domain_field_element,
    arg2: &fiat_bp256_scalar_montgomery_domain_field_element,
) -> fiat_bp256_scalar_montgomery_domain_field_element {
    let mut out1: fiat_bp256_scalar_montgomery_domain_field_element = [0; 8];
    let mut x1: u32 = 0;
    let mut x2: fiat_bp256_scalar_u1 = 0;
    let (x1, x2) = fiat_bp256_scalar_subborrowx_u32(0x0, (arg1[0]), (arg2[0]));
    let mut x3: u32 = 0;
    let mut x4: fiat_bp256_scalar_u1 = 0;
    let (x3, x4) = fiat_bp256_scalar_subborrowx_u32(x2, (arg1[1]), (arg2[1]));
    let mut x5: u32 = 0;
    let mut x6: fiat_bp256_scalar_u1 = 0;
    let (x5, x6) = fiat_bp256_scalar_subborrowx_u32(x4, (arg1[2]), (arg2[2]));
    let mut x7: u32 = 0;
    let mut x8: fiat_bp256_scalar_u1 = 0;
    let (x7, x8) = fiat_bp256_scalar_subborrowx_u32(x6, (arg1[3]), (arg2[3]));
    let mut x9: u32 = 0;
    let mut x10: fiat_bp256_scalar_u1 = 0;
    let (x9, x10) = fiat_bp256_scalar_subborrowx_u32(x8, (arg1[4]), (arg2[4]));
    let mut x11: u32 = 0;
    let mut x12: fiat_bp256_scalar_u1 = 0;
    let (x11, x12) = fiat_bp256_scalar_subborrowx_u32(x10, (arg1[5]), (arg2[5]));
    let mut x13: u32 = 0;
    let mut x14: fiat_bp256_scalar_u1 = 0;
    let (x13, x14) = fiat_bp256_scalar_subborrowx_u32(x12, (arg1[6]), (arg2[6]));
    let mut x15: u32 = 0;
    let mut x16: fiat_bp256_scalar_u1 = 0;
    let (x15, x16) = fiat_bp256_scalar_subborrowx_u32(x14, (arg1[7]), (arg2[7]));
    let mut x17: u32 = 0;
    let (x17) = fiat_bp256_scalar_cmovznz_u32(x16, (0x0 as u32), 0xffffffff);
    let mut x18: u32 = 0;
    let mut x19: fiat_bp256_scalar_u1 = 0;
    let (x18, x19) = fiat_bp256_scalar_addcarryx_u32(0x0, x1, (x17 & 0x974856a7));
    let mut x20: u32 = 0;
    let mut x21: fiat_bp256_scalar_u1 = 0;
    let (x20, x21) = fiat_bp256_scalar_addcarryx_u32(x19, x3, (x17 & 0x901e0e82));
    let mut x22: u32 = 0;
    let mut x23: fiat_bp256_scalar_u1 = 0;
    let (x22, x23) = fiat_bp256_scalar_addcarryx_u32(x21, x5, (x17 & 0xb561a6f7));
    let mut x24: u32 = 0;
    let mut x25: fiat_bp256_scalar_u1 = 0;
    let (x24, x25) = fiat_bp256_scalar_addcarryx_u32(x23, x7, (x17 & 0x8c397aa3));
    let mut x26: u32 = 0;
    let mut x27: fiat_bp256_scalar_u1 = 0;
    let (x26, x27) = fiat_bp256_scalar_addcarryx_u32(x25, x9, (x17 & 0x9d838d71));
    let mut x28: u32 = 0;
    let mut x29: fiat_bp256_scalar_u1 = 0;
    let (x28, x29) = fiat_bp256_scalar_addcarryx_u32(x27, x11, (x17 & 0x3e660a90));
    let mut x30: u32 = 0;
    let mut x31: fiat_bp256_scalar_u1 = 0;
    let (x30, x31) = fiat_bp256_scalar_addcarryx_u32(x29, x13, (x17 & 0xa1eea9bc));
    let mut x32: u32 = 0;
    let mut x33: fiat_bp256_scalar_u1 = 0;
    let (x32, x33) = fiat_bp256_scalar_addcarryx_u32(x31, x15, (x17 & 0xa9fb57db));
    out1[0] = x18;
    out1[1] = x20;
    out1[2] = x22;
    out1[3] = x24;
    out1[4] = x26;
    out1[5] = x28;
    out1[6] = x30;
    out1[7] = x32;
    out1
}
#[doc = " The function fiat_bp256_scalar_opp negates a field element in the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = -eval (from_montgomery arg1) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_bp256_scalar_opp(
    arg1: &fiat_bp256_scalar_montgomery_domain_field_element,
) -> fiat_bp256_scalar_montgomery_domain_field_element {
    let mut out1: fiat_bp256_scalar_montgomery_domain_field_element = [0; 8];
    let mut x1: u32 = 0;
    let mut x2: fiat_bp256_scalar_u1 = 0;
    let (x1, x2) = fiat_bp256_scalar_subborrowx_u32(0x0, (0x0 as u32), (arg1[0]));
    let mut x3: u32 = 0;
    let mut x4: fiat_bp256_scalar_u1 = 0;
    let (x3, x4) = fiat_bp256_scalar_subborrowx_u32(x2, (0x0 as u32), (arg1[1]));
    let mut x5: u32 = 0;
    let mut x6: fiat_bp256_scalar_u1 = 0;
    let (x5, x6) = fiat_bp256_scalar_subborrowx_u32(x4, (0x0 as u32), (arg1[2]));
    let mut x7: u32 = 0;
    let mut x8: fiat_bp256_scalar_u1 = 0;
    let (x7, x8) = fiat_bp256_scalar_subborrowx_u32(x6, (0x0 as u32), (arg1[3]));
    let mut x9: u32 = 0;
    let mut x10: fiat_bp256_scalar_u1 = 0;
    let (x9, x10) = fiat_bp256_scalar_subborrowx_u32(x8, (0x0 as u32), (arg1[4]));
    let mut x11: u32 = 0;
    let mut x12: fiat_bp256_scalar_u1 = 0;
    let (x11, x12) = fiat_bp256_scalar_subborrowx_u32(x10, (0x0 as u32), (arg1[5]));
    let mut x13: u32 = 0;
    let mut x14: fiat_bp256_scalar_u1 = 0;
    let (x13, x14) = fiat_bp256_scalar_subborrowx_u32(x12, (0x0 as u32), (arg1[6]));
    let mut x15: u32 = 0;
    let mut x16: fiat_bp256_scalar_u1 = 0;
    let (x15, x16) = fiat_bp256_scalar_subborrowx_u32(x14, (0x0 as u32), (arg1[7]));
    let mut x17: u32 = 0;
    let (x17) = fiat_bp256_scalar_cmovznz_u32(x16, (0x0 as u32), 0xffffffff);
    let mut x18: u32 = 0;
    let mut x19: fiat_bp256_scalar_u1 = 0;
    let (x18, x19) = fiat_bp256_scalar_addcarryx_u32(0x0, x1, (x17 & 0x974856a7));
    let mut x20: u32 = 0;
    let mut x21: fiat_bp256_scalar_u1 = 0;
    let (x20, x21) = fiat_bp256_scalar_addcarryx_u32(x19, x3, (x17 & 0x901e0e82));
    let mut x22: u32 = 0;
    let mut x23: fiat_bp256_scalar_u1 = 0;
    let (x22, x23) = fiat_bp256_scalar_addcarryx_u32(x21, x5, (x17 & 0xb561a6f7));
    let mut x24: u32 = 0;
    let mut x25: fiat_bp256_scalar_u1 = 0;
    let (x24, x25) = fiat_bp256_scalar_addcarryx_u32(x23, x7, (x17 & 0x8c397aa3));
    let mut x26: u32 = 0;
    let mut x27: fiat_bp256_scalar_u1 = 0;
    let (x26, x27) = fiat_bp256_scalar_addcarryx_u32(x25, x9, (x17 & 0x9d838d71));
    let mut x28: u32 = 0;
    let mut x29: fiat_bp256_scalar_u1 = 0;
    let (x28, x29) = fiat_bp256_scalar_addcarryx_u32(x27, x11, (x17 & 0x3e660a90));
    let mut x30: u32 = 0;
    let mut x31: fiat_bp256_scalar_u1 = 0;
    let (x30, x31) = fiat_bp256_scalar_addcarryx_u32(x29, x13, (x17 & 0xa1eea9bc));
    let mut x32: u32 = 0;
    let mut x33: fiat_bp256_scalar_u1 = 0;
    let (x32, x33) = fiat_bp256_scalar_addcarryx_u32(x31, x15, (x17 & 0xa9fb57db));
    out1[0] = x18;
    out1[1] = x20;
    out1[2] = x22;
    out1[3] = x24;
    out1[4] = x26;
    out1[5] = x28;
    out1[6] = x30;
    out1[7] = x32;
    out1
}
#[doc = " The function fiat_bp256_scalar_from_montgomery translates a field element out of the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval out1 mod m = (eval arg1 * ((2^32)⁻¹ mod m)^8) mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_bp256_scalar_from_montgomery(
    arg1: &fiat_bp256_scalar_montgomery_domain_field_element,
) -> fiat_bp256_scalar_non_montgomery_domain_field_element {
    let mut out1: fiat_bp256_scalar_non_montgomery_domain_field_element = [0; 8];
    let x1: u32 = (arg1[0]);
    let mut x2: u32 = 0;
    let mut x3: u32 = 0;
    let (x2, x3) = fiat_bp256_scalar_mulx_u32(x1, 0xcbb40ee9);
    let mut x4: u32 = 0;
    let mut x5: u32 = 0;
    let (x4, x5) = fiat_bp256_scalar_mulx_u32(x2, 0xa9fb57db);
    let mut x6: u32 = 0;
    let mut x7: u32 = 0;
    let (x6, x7) = fiat_bp256_scalar_mulx_u32(x2, 0xa1eea9bc);
    let mut x8: u32 = 0;
    let mut x9: u32 = 0;
    let (x8, x9) = fiat_bp256_scalar_mulx_u32(x2, 0x3e660a90);
    let mut x10: u32 = 0;
    let mut x11: u32 = 0;
    let (x10, x11) = fiat_bp256_scalar_mulx_u32(x2, 0x9d838d71);
    let mut x12: u32 = 0;
    let mut x13: u32 = 0;
    let (x12, x13) = fiat_bp256_scalar_mulx_u32(x2, 0x8c397aa3);
    let mut x14: u32 = 0;
    let mut x15: u32 = 0;
    let (x14, x15) = fiat_bp256_scalar_mulx_u32(x2, 0xb561a6f7);
    let mut x16: u32 = 0;
    let mut x17: u32 = 0;
    let (x16, x17) = fiat_bp256_scalar_mulx_u32(x2, 0x901e0e82);
    let mut x18: u32 = 0;
    let mut x19: u32 = 0;
    let (x18, x19) = fiat_bp256_scalar_mulx_u32(x2, 0x974856a7);
    let mut x20: u32 = 0;
    let mut x21: fiat_bp256_scalar_u1 = 0;
    let (x20, x21) = fiat_bp256_scalar_addcarryx_u32(0x0, x19, x16);
    let mut x22: u32 = 0;
    let mut x23: fiat_bp256_scalar_u1 = 0;
    let (x22, x23) = fiat_bp256_scalar_addcarryx_u32(x21, x17, x14);
    let mut x24: u32 = 0;
    let mut x25: fiat_bp256_scalar_u1 = 0;
    let (x24, x25) = fiat_bp256_scalar_addcarryx_u32(x23, x15, x12);
    let mut x26: u32 = 0;
    let mut x27: fiat_bp256_scalar_u1 = 0;
    let (x26, x27) = fiat_bp256_scalar_addcarryx_u32(x25, x13, x10);
    let mut x28: u32 = 0;
    let mut x29: fiat_bp256_scalar_u1 = 0;
    let (x28, x29) = fiat_bp256_scalar_addcarryx_u32(x27, x11, x8);
    let mut x30: u32 = 0;
    let mut x31: fiat_bp256_scalar_u1 = 0;
    let (x30, x31) = fiat_bp256_scalar_addcarryx_u32(x29, x9, x6);
    let mut x32: u32 = 0;
    let mut x33: fiat_bp256_scalar_u1 = 0;
    let (x32, x33) = fiat_bp256_scalar_addcarryx_u32(x31, x7, x4);
    let mut x34: u32 = 0;
    let mut x35: fiat_bp256_scalar_u1 = 0;
    let (x34, x35) = fiat_bp256_scalar_addcarryx_u32(0x0, x1, x18);
    let mut x36: u32 = 0;
    let mut x37: fiat_bp256_scalar_u1 = 0;
    let (x36, x37) = fiat_bp256_scalar_addcarryx_u32(x35, (0x0 as u32), x20);
    let mut x38: u32 = 0;
    let mut x39: fiat_bp256_scalar_u1 = 0;
    let (x38, x39) = fiat_bp256_scalar_addcarryx_u32(x37, (0x0 as u32), x22);
    let mut x40: u32 = 0;
    let mut x41: fiat_bp256_scalar_u1 = 0;
    let (x40, x41) = fiat_bp256_scalar_addcarryx_u32(x39, (0x0 as u32), x24);
    let mut x42: u32 = 0;
    let mut x43: fiat_bp256_scalar_u1 = 0;
    let (x42, x43) = fiat_bp256_scalar_addcarryx_u32(x41, (0x0 as u32), x26);
    let mut x44: u32 = 0;
    let mut x45: fiat_bp256_scalar_u1 = 0;
    let (x44, x45) = fiat_bp256_scalar_addcarryx_u32(x43, (0x0 as u32), x28);
    let mut x46: u32 = 0;
    let mut x47: fiat_bp256_scalar_u1 = 0;
    let (x46, x47) = fiat_bp256_scalar_addcarryx_u32(x45, (0x0 as u32), x30);
    let mut x48: u32 = 0;
    let mut x49: fiat_bp256_scalar_u1 = 0;
    let (x48, x49) = fiat_bp256_scalar_addcarryx_u32(x47, (0x0 as u32), x32);
    let mut x50: u32 = 0;
    let mut x51: fiat_bp256_scalar_u1 = 0;
    let (x50, x51) = fiat_bp256_scalar_addcarryx_u32(0x0, x36, (arg1[1]));
    let mut x52: u32 = 0;
    let mut x53: fiat_bp256_scalar_u1 = 0;
    let (x52, x53) = fiat_bp256_scalar_addcarryx_u32(x51, x38, (0x0 as u32));
    let mut x54: u32 = 0;
    let mut x55: fiat_bp256_scalar_u1 = 0;
    let (x54, x55) = fiat_bp256_scalar_addcarryx_u32(x53, x40, (0x0 as u32));
    let mut x56: u32 = 0;
    let mut x57: fiat_bp256_scalar_u1 = 0;
    let (x56, x57) = fiat_bp256_scalar_addcarryx_u32(x55, x42, (0x0 as u32));
    let mut x58: u32 = 0;
    let mut x59: fiat_bp256_scalar_u1 = 0;
    let (x58, x59) = fiat_bp256_scalar_addcarryx_u32(x57, x44, (0x0 as u32));
    let mut x60: u32 = 0;
    let mut x61: fiat_bp256_scalar_u1 = 0;
    let (x60, x61) = fiat_bp256_scalar_addcarryx_u32(x59, x46, (0x0 as u32));
    let mut x62: u32 = 0;
    let mut x63: fiat_bp256_scalar_u1 = 0;
    let (x62, x63) = fiat_bp256_scalar_addcarryx_u32(x61, x48, (0x0 as u32));
    let mut x64: u32 = 0;
    let mut x65: u32 = 0;
    let (x64, x65) = fiat_bp256_scalar_mulx_u32(x50, 0xcbb40ee9);
    let mut x66: u32 = 0;
    let mut x67: u32 = 0;
    let (x66, x67) = fiat_bp256_scalar_mulx_u32(x64, 0xa9fb57db);
    let mut x68: u32 = 0;
    let mut x69: u32 = 0;
    let (x68, x69) = fiat_bp256_scalar_mulx_u32(x64, 0xa1eea9bc);
    let mut x70: u32 = 0;
    let mut x71: u32 = 0;
    let (x70, x71) = fiat_bp256_scalar_mulx_u32(x64, 0x3e660a90);
    let mut x72: u32 = 0;
    let mut x73: u32 = 0;
    let (x72, x73) = fiat_bp256_scalar_mulx_u32(x64, 0x9d838d71);
    let mut x74: u32 = 0;
    let mut x75: u32 = 0;
    let (x74, x75) = fiat_bp256_scalar_mulx_u32(x64, 0x8c397aa3);
    let mut x76: u32 = 0;
    let mut x77: u32 = 0;
    let (x76, x77) = fiat_bp256_scalar_mulx_u32(x64, 0xb561a6f7);
    let mut x78: u32 = 0;
    let mut x79: u32 = 0;
    let (x78, x79) = fiat_bp256_scalar_mulx_u32(x64, 0x901e0e82);
    let mut x80: u32 = 0;
    let mut x81: u32 = 0;
    let (x80, x81) = fiat_bp256_scalar_mulx_u32(x64, 0x974856a7);
    let mut x82: u32 = 0;
    let mut x83: fiat_bp256_scalar_u1 = 0;
    let (x82, x83) = fiat_bp256_scalar_addcarryx_u32(0x0, x81, x78);
    let mut x84: u32 = 0;
    let mut x85: fiat_bp256_scalar_u1 = 0;
    let (x84, x85) = fiat_bp256_scalar_addcarryx_u32(x83, x79, x76);
    let mut x86: u32 = 0;
    let mut x87: fiat_bp256_scalar_u1 = 0;
    let (x86, x87) = fiat_bp256_scalar_addcarryx_u32(x85, x77, x74);
    let mut x88: u32 = 0;
    let mut x89: fiat_bp256_scalar_u1 = 0;
    let (x88, x89) = fiat_bp256_scalar_addcarryx_u32(x87, x75, x72);
    let mut x90: u32 = 0;
    let mut x91: fiat_bp256_scalar_u1 = 0;
    let (x90, x91) = fiat_bp256_scalar_addcarryx_u32(x89, x73, x70);
    let mut x92: u32 = 0;
    let mut x93: fiat_bp256_scalar_u1 = 0;
    let (x92, x93) = fiat_bp256_scalar_addcarryx_u32(x91, x71, x68);
    let mut x94: u32 = 0;
    let mut x95: fiat_bp256_scalar_u1 = 0;
    let (x94, x95) = fiat_bp256_scalar_addcarryx_u32(x93, x69, x66);
    let mut x96: u32 = 0;
    let mut x97: fiat_bp256_scalar_u1 = 0;
    let (x96, x97) = fiat_bp256_scalar_addcarryx_u32(0x0, x50, x80);
    let mut x98: u32 = 0;
    let mut x99: fiat_bp256_scalar_u1 = 0;
    let (x98, x99) = fiat_bp256_scalar_addcarryx_u32(x97, x52, x82);
    let mut x100: u32 = 0;
    let mut x101: fiat_bp256_scalar_u1 = 0;
    let (x100, x101) = fiat_bp256_scalar_addcarryx_u32(x99, x54, x84);
    let mut x102: u32 = 0;
    let mut x103: fiat_bp256_scalar_u1 = 0;
    let (x102, x103) = fiat_bp256_scalar_addcarryx_u32(x101, x56, x86);
    let mut x104: u32 = 0;
    let mut x105: fiat_bp256_scalar_u1 = 0;
    let (x104, x105) = fiat_bp256_scalar_addcarryx_u32(x103, x58, x88);
    let mut x106: u32 = 0;
    let mut x107: fiat_bp256_scalar_u1 = 0;
    let (x106, x107) = fiat_bp256_scalar_addcarryx_u32(x105, x60, x90);
    let mut x108: u32 = 0;
    let mut x109: fiat_bp256_scalar_u1 = 0;
    let (x108, x109) = fiat_bp256_scalar_addcarryx_u32(x107, x62, x92);
    let mut x110: u32 = 0;
    let mut x111: fiat_bp256_scalar_u1 = 0;
    let (x110, x111) = fiat_bp256_scalar_addcarryx_u32(
        x109,
        ((x63 as u32) + ((x49 as u32) + ((x33 as u32) + x5))),
        x94,
    );
    let mut x112: u32 = 0;
    let mut x113: fiat_bp256_scalar_u1 = 0;
    let (x112, x113) = fiat_bp256_scalar_addcarryx_u32(0x0, x98, (arg1[2]));
    let mut x114: u32 = 0;
    let mut x115: fiat_bp256_scalar_u1 = 0;
    let (x114, x115) = fiat_bp256_scalar_addcarryx_u32(x113, x100, (0x0 as u32));
    let mut x116: u32 = 0;
    let mut x117: fiat_bp256_scalar_u1 = 0;
    let (x116, x117) = fiat_bp256_scalar_addcarryx_u32(x115, x102, (0x0 as u32));
    let mut x118: u32 = 0;
    let mut x119: fiat_bp256_scalar_u1 = 0;
    let (x118, x119) = fiat_bp256_scalar_addcarryx_u32(x117, x104, (0x0 as u32));
    let mut x120: u32 = 0;
    let mut x121: fiat_bp256_scalar_u1 = 0;
    let (x120, x121) = fiat_bp256_scalar_addcarryx_u32(x119, x106, (0x0 as u32));
    let mut x122: u32 = 0;
    let mut x123: fiat_bp256_scalar_u1 = 0;
    let (x122, x123) = fiat_bp256_scalar_addcarryx_u32(x121, x108, (0x0 as u32));
    let mut x124: u32 = 0;
    let mut x125: fiat_bp256_scalar_u1 = 0;
    let (x124, x125) = fiat_bp256_scalar_addcarryx_u32(x123, x110, (0x0 as u32));
    let mut x126: u32 = 0;
    let mut x127: u32 = 0;
    let (x126, x127) = fiat_bp256_scalar_mulx_u32(x112, 0xcbb40ee9);
    let mut x128: u32 = 0;
    let mut x129: u32 = 0;
    let (x128, x129) = fiat_bp256_scalar_mulx_u32(x126, 0xa9fb57db);
    let mut x130: u32 = 0;
    let mut x131: u32 = 0;
    let (x130, x131) = fiat_bp256_scalar_mulx_u32(x126, 0xa1eea9bc);
    let mut x132: u32 = 0;
    let mut x133: u32 = 0;
    let (x132, x133) = fiat_bp256_scalar_mulx_u32(x126, 0x3e660a90);
    let mut x134: u32 = 0;
    let mut x135: u32 = 0;
    let (x134, x135) = fiat_bp256_scalar_mulx_u32(x126, 0x9d838d71);
    let mut x136: u32 = 0;
    let mut x137: u32 = 0;
    let (x136, x137) = fiat_bp256_scalar_mulx_u32(x126, 0x8c397aa3);
    let mut x138: u32 = 0;
    let mut x139: u32 = 0;
    let (x138, x139) = fiat_bp256_scalar_mulx_u32(x126, 0xb561a6f7);
    let mut x140: u32 = 0;
    let mut x141: u32 = 0;
    let (x140, x141) = fiat_bp256_scalar_mulx_u32(x126, 0x901e0e82);
    let mut x142: u32 = 0;
    let mut x143: u32 = 0;
    let (x142, x143) = fiat_bp256_scalar_mulx_u32(x126, 0x974856a7);
    let mut x144: u32 = 0;
    let mut x145: fiat_bp256_scalar_u1 = 0;
    let (x144, x145) = fiat_bp256_scalar_addcarryx_u32(0x0, x143, x140);
    let mut x146: u32 = 0;
    let mut x147: fiat_bp256_scalar_u1 = 0;
    let (x146, x147) = fiat_bp256_scalar_addcarryx_u32(x145, x141, x138);
    let mut x148: u32 = 0;
    let mut x149: fiat_bp256_scalar_u1 = 0;
    let (x148, x149) = fiat_bp256_scalar_addcarryx_u32(x147, x139, x136);
    let mut x150: u32 = 0;
    let mut x151: fiat_bp256_scalar_u1 = 0;
    let (x150, x151) = fiat_bp256_scalar_addcarryx_u32(x149, x137, x134);
    let mut x152: u32 = 0;
    let mut x153: fiat_bp256_scalar_u1 = 0;
    let (x152, x153) = fiat_bp256_scalar_addcarryx_u32(x151, x135, x132);
    let mut x154: u32 = 0;
    let mut x155: fiat_bp256_scalar_u1 = 0;
    let (x154, x155) = fiat_bp256_scalar_addcarryx_u32(x153, x133, x130);
    let mut x156: u32 = 0;
    let mut x157: fiat_bp256_scalar_u1 = 0;
    let (x156, x157) = fiat_bp256_scalar_addcarryx_u32(x155, x131, x128);
    let mut x158: u32 = 0;
    let mut x159: fiat_bp256_scalar_u1 = 0;
    let (x158, x159) = fiat_bp256_scalar_addcarryx_u32(0x0, x112, x142);
    let mut x160: u32 = 0;
    let mut x161: fiat_bp256_scalar_u1 = 0;
    let (x160, x161) = fiat_bp256_scalar_addcarryx_u32(x159, x114, x144);
    let mut x162: u32 = 0;
    let mut x163: fiat_bp256_scalar_u1 = 0;
    let (x162, x163) = fiat_bp256_scalar_addcarryx_u32(x161, x116, x146);
    let mut x164: u32 = 0;
    let mut x165: fiat_bp256_scalar_u1 = 0;
    let (x164, x165) = fiat_bp256_scalar_addcarryx_u32(x163, x118, x148);
    let mut x166: u32 = 0;
    let mut x167: fiat_bp256_scalar_u1 = 0;
    let (x166, x167) = fiat_bp256_scalar_addcarryx_u32(x165, x120, x150);
    let mut x168: u32 = 0;
    let mut x169: fiat_bp256_scalar_u1 = 0;
    let (x168, x169) = fiat_bp256_scalar_addcarryx_u32(x167, x122, x152);
    let mut x170: u32 = 0;
    let mut x171: fiat_bp256_scalar_u1 = 0;
    let (x170, x171) = fiat_bp256_scalar_addcarryx_u32(x169, x124, x154);
    let mut x172: u32 = 0;
    let mut x173: fiat_bp256_scalar_u1 = 0;
    let (x172, x173) = fiat_bp256_scalar_addcarryx_u32(
        x171,
        ((x125 as u32) + ((x111 as u32) + ((x95 as u32) + x67))),
        x156,
    );
    let mut x174: u32 = 0;
    let mut x175: fiat_bp256_scalar_u1 = 0;
    let (x174, x175) = fiat_bp256_scalar_addcarryx_u32(0x0, x160, (arg1[3]));
    let mut x176: u32 = 0;
    let mut x177: fiat_bp256_scalar_u1 = 0;
    let (x176, x177) = fiat_bp256_scalar_addcarryx_u32(x175, x162, (0x0 as u32));
    let mut x178: u32 = 0;
    let mut x179: fiat_bp256_scalar_u1 = 0;
    let (x178, x179) = fiat_bp256_scalar_addcarryx_u32(x177, x164, (0x0 as u32));
    let mut x180: u32 = 0;
    let mut x181: fiat_bp256_scalar_u1 = 0;
    let (x180, x181) = fiat_bp256_scalar_addcarryx_u32(x179, x166, (0x0 as u32));
    let mut x182: u32 = 0;
    let mut x183: fiat_bp256_scalar_u1 = 0;
    let (x182, x183) = fiat_bp256_scalar_addcarryx_u32(x181, x168, (0x0 as u32));
    let mut x184: u32 = 0;
    let mut x185: fiat_bp256_scalar_u1 = 0;
    let (x184, x185) = fiat_bp256_scalar_addcarryx_u32(x183, x170, (0x0 as u32));
    let mut x186: u32 = 0;
    let mut x187: fiat_bp256_scalar_u1 = 0;
    let (x186, x187) = fiat_bp256_scalar_addcarryx_u32(x185, x172, (0x0 as u32));
    let mut x188: u32 = 0;
    let mut x189: u32 = 0;
    let (x188, x189) = fiat_bp256_scalar_mulx_u32(x174, 0xcbb40ee9);
    let mut x190: u32 = 0;
    let mut x191: u32 = 0;
    let (x190, x191) = fiat_bp256_scalar_mulx_u32(x188, 0xa9fb57db);
    let mut x192: u32 = 0;
    let mut x193: u32 = 0;
    let (x192, x193) = fiat_bp256_scalar_mulx_u32(x188, 0xa1eea9bc);
    let mut x194: u32 = 0;
    let mut x195: u32 = 0;
    let (x194, x195) = fiat_bp256_scalar_mulx_u32(x188, 0x3e660a90);
    let mut x196: u32 = 0;
    let mut x197: u32 = 0;
    let (x196, x197) = fiat_bp256_scalar_mulx_u32(x188, 0x9d838d71);
    let mut x198: u32 = 0;
    let mut x199: u32 = 0;
    let (x198, x199) = fiat_bp256_scalar_mulx_u32(x188, 0x8c397aa3);
    let mut x200: u32 = 0;
    let mut x201: u32 = 0;
    let (x200, x201) = fiat_bp256_scalar_mulx_u32(x188, 0xb561a6f7);
    let mut x202: u32 = 0;
    let mut x203: u32 = 0;
    let (x202, x203) = fiat_bp256_scalar_mulx_u32(x188, 0x901e0e82);
    let mut x204: u32 = 0;
    let mut x205: u32 = 0;
    let (x204, x205) = fiat_bp256_scalar_mulx_u32(x188, 0x974856a7);
    let mut x206: u32 = 0;
    let mut x207: fiat_bp256_scalar_u1 = 0;
    let (x206, x207) = fiat_bp256_scalar_addcarryx_u32(0x0, x205, x202);
    let mut x208: u32 = 0;
    let mut x209: fiat_bp256_scalar_u1 = 0;
    let (x208, x209) = fiat_bp256_scalar_addcarryx_u32(x207, x203, x200);
    let mut x210: u32 = 0;
    let mut x211: fiat_bp256_scalar_u1 = 0;
    let (x210, x211) = fiat_bp256_scalar_addcarryx_u32(x209, x201, x198);
    let mut x212: u32 = 0;
    let mut x213: fiat_bp256_scalar_u1 = 0;
    let (x212, x213) = fiat_bp256_scalar_addcarryx_u32(x211, x199, x196);
    let mut x214: u32 = 0;
    let mut x215: fiat_bp256_scalar_u1 = 0;
    let (x214, x215) = fiat_bp256_scalar_addcarryx_u32(x213, x197, x194);
    let mut x216: u32 = 0;
    let mut x217: fiat_bp256_scalar_u1 = 0;
    let (x216, x217) = fiat_bp256_scalar_addcarryx_u32(x215, x195, x192);
    let mut x218: u32 = 0;
    let mut x219: fiat_bp256_scalar_u1 = 0;
    let (x218, x219) = fiat_bp256_scalar_addcarryx_u32(x217, x193, x190);
    let mut x220: u32 = 0;
    let mut x221: fiat_bp256_scalar_u1 = 0;
    let (x220, x221) = fiat_bp256_scalar_addcarryx_u32(0x0, x174, x204);
    let mut x222: u32 = 0;
    let mut x223: fiat_bp256_scalar_u1 = 0;
    let (x222, x223) = fiat_bp256_scalar_addcarryx_u32(x221, x176, x206);
    let mut x224: u32 = 0;
    let mut x225: fiat_bp256_scalar_u1 = 0;
    let (x224, x225) = fiat_bp256_scalar_addcarryx_u32(x223, x178, x208);
    let mut x226: u32 = 0;
    let mut x227: fiat_bp256_scalar_u1 = 0;
    let (x226, x227) = fiat_bp256_scalar_addcarryx_u32(x225, x180, x210);
    let mut x228: u32 = 0;
    let mut x229: fiat_bp256_scalar_u1 = 0;
    let (x228, x229) = fiat_bp256_scalar_addcarryx_u32(x227, x182, x212);
    let mut x230: u32 = 0;
    let mut x231: fiat_bp256_scalar_u1 = 0;
    let (x230, x231) = fiat_bp256_scalar_addcarryx_u32(x229, x184, x214);
    let mut x232: u32 = 0;
    let mut x233: fiat_bp256_scalar_u1 = 0;
    let (x232, x233) = fiat_bp256_scalar_addcarryx_u32(x231, x186, x216);
    let mut x234: u32 = 0;
    let mut x235: fiat_bp256_scalar_u1 = 0;
    let (x234, x235) = fiat_bp256_scalar_addcarryx_u32(
        x233,
        ((x187 as u32) + ((x173 as u32) + ((x157 as u32) + x129))),
        x218,
    );
    let mut x236: u32 = 0;
    let mut x237: fiat_bp256_scalar_u1 = 0;
    let (x236, x237) = fiat_bp256_scalar_addcarryx_u32(0x0, x222, (arg1[4]));
    let mut x238: u32 = 0;
    let mut x239: fiat_bp256_scalar_u1 = 0;
    let (x238, x239) = fiat_bp256_scalar_addcarryx_u32(x237, x224, (0x0 as u32));
    let mut x240: u32 = 0;
    let mut x241: fiat_bp256_scalar_u1 = 0;
    let (x240, x241) = fiat_bp256_scalar_addcarryx_u32(x239, x226, (0x0 as u32));
    let mut x242: u32 = 0;
    let mut x243: fiat_bp256_scalar_u1 = 0;
    let (x242, x243) = fiat_bp256_scalar_addcarryx_u32(x241, x228, (0x0 as u32));
    let mut x244: u32 = 0;
    let mut x245: fiat_bp256_scalar_u1 = 0;
    let (x244, x245) = fiat_bp256_scalar_addcarryx_u32(x243, x230, (0x0 as u32));
    let mut x246: u32 = 0;
    let mut x247: fiat_bp256_scalar_u1 = 0;
    let (x246, x247) = fiat_bp256_scalar_addcarryx_u32(x245, x232, (0x0 as u32));
    let mut x248: u32 = 0;
    let mut x249: fiat_bp256_scalar_u1 = 0;
    let (x248, x249) = fiat_bp256_scalar_addcarryx_u32(x247, x234, (0x0 as u32));
    let mut x250: u32 = 0;
    let mut x251: u32 = 0;
    let (x250, x251) = fiat_bp256_scalar_mulx_u32(x236, 0xcbb40ee9);
    let mut x252: u32 = 0;
    let mut x253: u32 = 0;
    let (x252, x253) = fiat_bp256_scalar_mulx_u32(x250, 0xa9fb57db);
    let mut x254: u32 = 0;
    let mut x255: u32 = 0;
    let (x254, x255) = fiat_bp256_scalar_mulx_u32(x250, 0xa1eea9bc);
    let mut x256: u32 = 0;
    let mut x257: u32 = 0;
    let (x256, x257) = fiat_bp256_scalar_mulx_u32(x250, 0x3e660a90);
    let mut x258: u32 = 0;
    let mut x259: u32 = 0;
    let (x258, x259) = fiat_bp256_scalar_mulx_u32(x250, 0x9d838d71);
    let mut x260: u32 = 0;
    let mut x261: u32 = 0;
    let (x260, x261) = fiat_bp256_scalar_mulx_u32(x250, 0x8c397aa3);
    let mut x262: u32 = 0;
    let mut x263: u32 = 0;
    let (x262, x263) = fiat_bp256_scalar_mulx_u32(x250, 0xb561a6f7);
    let mut x264: u32 = 0;
    let mut x265: u32 = 0;
    let (x264, x265) = fiat_bp256_scalar_mulx_u32(x250, 0x901e0e82);
    let mut x266: u32 = 0;
    let mut x267: u32 = 0;
    let (x266, x267) = fiat_bp256_scalar_mulx_u32(x250, 0x974856a7);
    let mut x268: u32 = 0;
    let mut x269: fiat_bp256_scalar_u1 = 0;
    let (x268, x269) = fiat_bp256_scalar_addcarryx_u32(0x0, x267, x264);
    let mut x270: u32 = 0;
    let mut x271: fiat_bp256_scalar_u1 = 0;
    let (x270, x271) = fiat_bp256_scalar_addcarryx_u32(x269, x265, x262);
    let mut x272: u32 = 0;
    let mut x273: fiat_bp256_scalar_u1 = 0;
    let (x272, x273) = fiat_bp256_scalar_addcarryx_u32(x271, x263, x260);
    let mut x274: u32 = 0;
    let mut x275: fiat_bp256_scalar_u1 = 0;
    let (x274, x275) = fiat_bp256_scalar_addcarryx_u32(x273, x261, x258);
    let mut x276: u32 = 0;
    let mut x277: fiat_bp256_scalar_u1 = 0;
    let (x276, x277) = fiat_bp256_scalar_addcarryx_u32(x275, x259, x256);
    let mut x278: u32 = 0;
    let mut x279: fiat_bp256_scalar_u1 = 0;
    let (x278, x279) = fiat_bp256_scalar_addcarryx_u32(x277, x257, x254);
    let mut x280: u32 = 0;
    let mut x281: fiat_bp256_scalar_u1 = 0;
    let (x280, x281) = fiat_bp256_scalar_addcarryx_u32(x279, x255, x252);
    let mut x282: u32 = 0;
    let mut x283: fiat_bp256_scalar_u1 = 0;
    let (x282, x283) = fiat_bp256_scalar_addcarryx_u32(0x0, x236, x266);
    let mut x284: u32 = 0;
    let mut x285: fiat_bp256_scalar_u1 = 0;
    let (x284, x285) = fiat_bp256_scalar_addcarryx_u32(x283, x238, x268);
    let mut x286: u32 = 0;
    let mut x287: fiat_bp256_scalar_u1 = 0;
    let (x286, x287) = fiat_bp256_scalar_addcarryx_u32(x285, x240, x270);
    let mut x288: u32 = 0;
    let mut x289: fiat_bp256_scalar_u1 = 0;
    let (x288, x289) = fiat_bp256_scalar_addcarryx_u32(x287, x242, x272);
    let mut x290: u32 = 0;
    let mut x291: fiat_bp256_scalar_u1 = 0;
    let (x290, x291) = fiat_bp256_scalar_addcarryx_u32(x289, x244, x274);
    let mut x292: u32 = 0;
    let mut x293: fiat_bp256_scalar_u1 = 0;
    let (x292, x293) = fiat_bp256_scalar_addcarryx_u32(x291, x246, x276);
    let mut x294: u32 = 0;
    let mut x295: fiat_bp256_scalar_u1 = 0;
    let (x294, x295) = fiat_bp256_scalar_addcarryx_u32(x293, x248, x278);
    let mut x296: u32 = 0;
    let mut x297: fiat_bp256_scalar_u1 = 0;
    let (x296, x297) = fiat_bp256_scalar_addcarryx_u32(
        x295,
        ((x249 as u32) + ((x235 as u32) + ((x219 as u32) + x191))),
        x280,
    );
    let mut x298: u32 = 0;
    let mut x299: fiat_bp256_scalar_u1 = 0;
    let (x298, x299) = fiat_bp256_scalar_addcarryx_u32(0x0, x284, (arg1[5]));
    let mut x300: u32 = 0;
    let mut x301: fiat_bp256_scalar_u1 = 0;
    let (x300, x301) = fiat_bp256_scalar_addcarryx_u32(x299, x286, (0x0 as u32));
    let mut x302: u32 = 0;
    let mut x303: fiat_bp256_scalar_u1 = 0;
    let (x302, x303) = fiat_bp256_scalar_addcarryx_u32(x301, x288, (0x0 as u32));
    let mut x304: u32 = 0;
    let mut x305: fiat_bp256_scalar_u1 = 0;
    let (x304, x305) = fiat_bp256_scalar_addcarryx_u32(x303, x290, (0x0 as u32));
    let mut x306: u32 = 0;
    let mut x307: fiat_bp256_scalar_u1 = 0;
    let (x306, x307) = fiat_bp256_scalar_addcarryx_u32(x305, x292, (0x0 as u32));
    let mut x308: u32 = 0;
    let mut x309: fiat_bp256_scalar_u1 = 0;
    let (x308, x309) = fiat_bp256_scalar_addcarryx_u32(x307, x294, (0x0 as u32));
    let mut x310: u32 = 0;
    let mut x311: fiat_bp256_scalar_u1 = 0;
    let (x310, x311) = fiat_bp256_scalar_addcarryx_u32(x309, x296, (0x0 as u32));
    let mut x312: u32 = 0;
    let mut x313: u32 = 0;
    let (x312, x313) = fiat_bp256_scalar_mulx_u32(x298, 0xcbb40ee9);
    let mut x314: u32 = 0;
    let mut x315: u32 = 0;
    let (x314, x315) = fiat_bp256_scalar_mulx_u32(x312, 0xa9fb57db);
    let mut x316: u32 = 0;
    let mut x317: u32 = 0;
    let (x316, x317) = fiat_bp256_scalar_mulx_u32(x312, 0xa1eea9bc);
    let mut x318: u32 = 0;
    let mut x319: u32 = 0;
    let (x318, x319) = fiat_bp256_scalar_mulx_u32(x312, 0x3e660a90);
    let mut x320: u32 = 0;
    let mut x321: u32 = 0;
    let (x320, x321) = fiat_bp256_scalar_mulx_u32(x312, 0x9d838d71);
    let mut x322: u32 = 0;
    let mut x323: u32 = 0;
    let (x322, x323) = fiat_bp256_scalar_mulx_u32(x312, 0x8c397aa3);
    let mut x324: u32 = 0;
    let mut x325: u32 = 0;
    let (x324, x325) = fiat_bp256_scalar_mulx_u32(x312, 0xb561a6f7);
    let mut x326: u32 = 0;
    let mut x327: u32 = 0;
    let (x326, x327) = fiat_bp256_scalar_mulx_u32(x312, 0x901e0e82);
    let mut x328: u32 = 0;
    let mut x329: u32 = 0;
    let (x328, x329) = fiat_bp256_scalar_mulx_u32(x312, 0x974856a7);
    let mut x330: u32 = 0;
    let mut x331: fiat_bp256_scalar_u1 = 0;
    let (x330, x331) = fiat_bp256_scalar_addcarryx_u32(0x0, x329, x326);
    let mut x332: u32 = 0;
    let mut x333: fiat_bp256_scalar_u1 = 0;
    let (x332, x333) = fiat_bp256_scalar_addcarryx_u32(x331, x327, x324);
    let mut x334: u32 = 0;
    let mut x335: fiat_bp256_scalar_u1 = 0;
    let (x334, x335) = fiat_bp256_scalar_addcarryx_u32(x333, x325, x322);
    let mut x336: u32 = 0;
    let mut x337: fiat_bp256_scalar_u1 = 0;
    let (x336, x337) = fiat_bp256_scalar_addcarryx_u32(x335, x323, x320);
    let mut x338: u32 = 0;
    let mut x339: fiat_bp256_scalar_u1 = 0;
    let (x338, x339) = fiat_bp256_scalar_addcarryx_u32(x337, x321, x318);
    let mut x340: u32 = 0;
    let mut x341: fiat_bp256_scalar_u1 = 0;
    let (x340, x341) = fiat_bp256_scalar_addcarryx_u32(x339, x319, x316);
    let mut x342: u32 = 0;
    let mut x343: fiat_bp256_scalar_u1 = 0;
    let (x342, x343) = fiat_bp256_scalar_addcarryx_u32(x341, x317, x314);
    let mut x344: u32 = 0;
    let mut x345: fiat_bp256_scalar_u1 = 0;
    let (x344, x345) = fiat_bp256_scalar_addcarryx_u32(0x0, x298, x328);
    let mut x346: u32 = 0;
    let mut x347: fiat_bp256_scalar_u1 = 0;
    let (x346, x347) = fiat_bp256_scalar_addcarryx_u32(x345, x300, x330);
    let mut x348: u32 = 0;
    let mut x349: fiat_bp256_scalar_u1 = 0;
    let (x348, x349) = fiat_bp256_scalar_addcarryx_u32(x347, x302, x332);
    let mut x350: u32 = 0;
    let mut x351: fiat_bp256_scalar_u1 = 0;
    let (x350, x351) = fiat_bp256_scalar_addcarryx_u32(x349, x304, x334);
    let mut x352: u32 = 0;
    let mut x353: fiat_bp256_scalar_u1 = 0;
    let (x352, x353) = fiat_bp256_scalar_addcarryx_u32(x351, x306, x336);
    let mut x354: u32 = 0;
    let mut x355: fiat_bp256_scalar_u1 = 0;
    let (x354, x355) = fiat_bp256_scalar_addcarryx_u32(x353, x308, x338);
    let mut x356: u32 = 0;
    let mut x357: fiat_bp256_scalar_u1 = 0;
    let (x356, x357) = fiat_bp256_scalar_addcarryx_u32(x355, x310, x340);
    let mut x358: u32 = 0;
    let mut x359: fiat_bp256_scalar_u1 = 0;
    let (x358, x359) = fiat_bp256_scalar_addcarryx_u32(
        x357,
        ((x311 as u32) + ((x297 as u32) + ((x281 as u32) + x253))),
        x342,
    );
    let mut x360: u32 = 0;
    let mut x361: fiat_bp256_scalar_u1 = 0;
    let (x360, x361) = fiat_bp256_scalar_addcarryx_u32(0x0, x346, (arg1[6]));
    let mut x362: u32 = 0;
    let mut x363: fiat_bp256_scalar_u1 = 0;
    let (x362, x363) = fiat_bp256_scalar_addcarryx_u32(x361, x348, (0x0 as u32));
    let mut x364: u32 = 0;
    let mut x365: fiat_bp256_scalar_u1 = 0;
    let (x364, x365) = fiat_bp256_scalar_addcarryx_u32(x363, x350, (0x0 as u32));
    let mut x366: u32 = 0;
    let mut x367: fiat_bp256_scalar_u1 = 0;
    let (x366, x367) = fiat_bp256_scalar_addcarryx_u32(x365, x352, (0x0 as u32));
    let mut x368: u32 = 0;
    let mut x369: fiat_bp256_scalar_u1 = 0;
    let (x368, x369) = fiat_bp256_scalar_addcarryx_u32(x367, x354, (0x0 as u32));
    let mut x370: u32 = 0;
    let mut x371: fiat_bp256_scalar_u1 = 0;
    let (x370, x371) = fiat_bp256_scalar_addcarryx_u32(x369, x356, (0x0 as u32));
    let mut x372: u32 = 0;
    let mut x373: fiat_bp256_scalar_u1 = 0;
    let (x372, x373) = fiat_bp256_scalar_addcarryx_u32(x371, x358, (0x0 as u32));
    let mut x374: u32 = 0;
    let mut x375: u32 = 0;
    let (x374, x375) = fiat_bp256_scalar_mulx_u32(x360, 0xcbb40ee9);
    let mut x376: u32 = 0;
    let mut x377: u32 = 0;
    let (x376, x377) = fiat_bp256_scalar_mulx_u32(x374, 0xa9fb57db);
    let mut x378: u32 = 0;
    let mut x379: u32 = 0;
    let (x378, x379) = fiat_bp256_scalar_mulx_u32(x374, 0xa1eea9bc);
    let mut x380: u32 = 0;
    let mut x381: u32 = 0;
    let (x380, x381) = fiat_bp256_scalar_mulx_u32(x374, 0x3e660a90);
    let mut x382: u32 = 0;
    let mut x383: u32 = 0;
    let (x382, x383) = fiat_bp256_scalar_mulx_u32(x374, 0x9d838d71);
    let mut x384: u32 = 0;
    let mut x385: u32 = 0;
    let (x384, x385) = fiat_bp256_scalar_mulx_u32(x374, 0x8c397aa3);
    let mut x386: u32 = 0;
    let mut x387: u32 = 0;
    let (x386, x387) = fiat_bp256_scalar_mulx_u32(x374, 0xb561a6f7);
    let mut x388: u32 = 0;
    let mut x389: u32 = 0;
    let (x388, x389) = fiat_bp256_scalar_mulx_u32(x374, 0x901e0e82);
    let mut x390: u32 = 0;
    let mut x391: u32 = 0;
    let (x390, x391) = fiat_bp256_scalar_mulx_u32(x374, 0x974856a7);
    let mut x392: u32 = 0;
    let mut x393: fiat_bp256_scalar_u1 = 0;
    let (x392, x393) = fiat_bp256_scalar_addcarryx_u32(0x0, x391, x388);
    let mut x394: u32 = 0;
    let mut x395: fiat_bp256_scalar_u1 = 0;
    let (x394, x395) = fiat_bp256_scalar_addcarryx_u32(x393, x389, x386);
    let mut x396: u32 = 0;
    let mut x397: fiat_bp256_scalar_u1 = 0;
    let (x396, x397) = fiat_bp256_scalar_addcarryx_u32(x395, x387, x384);
    let mut x398: u32 = 0;
    let mut x399: fiat_bp256_scalar_u1 = 0;
    let (x398, x399) = fiat_bp256_scalar_addcarryx_u32(x397, x385, x382);
    let mut x400: u32 = 0;
    let mut x401: fiat_bp256_scalar_u1 = 0;
    let (x400, x401) = fiat_bp256_scalar_addcarryx_u32(x399, x383, x380);
    let mut x402: u32 = 0;
    let mut x403: fiat_bp256_scalar_u1 = 0;
    let (x402, x403) = fiat_bp256_scalar_addcarryx_u32(x401, x381, x378);
    let mut x404: u32 = 0;
    let mut x405: fiat_bp256_scalar_u1 = 0;
    let (x404, x405) = fiat_bp256_scalar_addcarryx_u32(x403, x379, x376);
    let mut x406: u32 = 0;
    let mut x407: fiat_bp256_scalar_u1 = 0;
    let (x406, x407) = fiat_bp256_scalar_addcarryx_u32(0x0, x360, x390);
    let mut x408: u32 = 0;
    let mut x409: fiat_bp256_scalar_u1 = 0;
    let (x408, x409) = fiat_bp256_scalar_addcarryx_u32(x407, x362, x392);
    let mut x410: u32 = 0;
    let mut x411: fiat_bp256_scalar_u1 = 0;
    let (x410, x411) = fiat_bp256_scalar_addcarryx_u32(x409, x364, x394);
    let mut x412: u32 = 0;
    let mut x413: fiat_bp256_scalar_u1 = 0;
    let (x412, x413) = fiat_bp256_scalar_addcarryx_u32(x411, x366, x396);
    let mut x414: u32 = 0;
    let mut x415: fiat_bp256_scalar_u1 = 0;
    let (x414, x415) = fiat_bp256_scalar_addcarryx_u32(x413, x368, x398);
    let mut x416: u32 = 0;
    let mut x417: fiat_bp256_scalar_u1 = 0;
    let (x416, x417) = fiat_bp256_scalar_addcarryx_u32(x415, x370, x400);
    let mut x418: u32 = 0;
    let mut x419: fiat_bp256_scalar_u1 = 0;
    let (x418, x419) = fiat_bp256_scalar_addcarryx_u32(x417, x372, x402);
    let mut x420: u32 = 0;
    let mut x421: fiat_bp256_scalar_u1 = 0;
    let (x420, x421) = fiat_bp256_scalar_addcarryx_u32(
        x419,
        ((x373 as u32) + ((x359 as u32) + ((x343 as u32) + x315))),
        x404,
    );
    let mut x422: u32 = 0;
    let mut x423: fiat_bp256_scalar_u1 = 0;
    let (x422, x423) = fiat_bp256_scalar_addcarryx_u32(0x0, x408, (arg1[7]));
    let mut x424: u32 = 0;
    let mut x425: fiat_bp256_scalar_u1 = 0;
    let (x424, x425) = fiat_bp256_scalar_addcarryx_u32(x423, x410, (0x0 as u32));
    let mut x426: u32 = 0;
    let mut x427: fiat_bp256_scalar_u1 = 0;
    let (x426, x427) = fiat_bp256_scalar_addcarryx_u32(x425, x412, (0x0 as u32));
    let mut x428: u32 = 0;
    let mut x429: fiat_bp256_scalar_u1 = 0;
    let (x428, x429) = fiat_bp256_scalar_addcarryx_u32(x427, x414, (0x0 as u32));
    let mut x430: u32 = 0;
    let mut x431: fiat_bp256_scalar_u1 = 0;
    let (x430, x431) = fiat_bp256_scalar_addcarryx_u32(x429, x416, (0x0 as u32));
    let mut x432: u32 = 0;
    let mut x433: fiat_bp256_scalar_u1 = 0;
    let (x432, x433) = fiat_bp256_scalar_addcarryx_u32(x431, x418, (0x0 as u32));
    let mut x434: u32 = 0;
    let mut x435: fiat_bp256_scalar_u1 = 0;
    let (x434, x435) = fiat_bp256_scalar_addcarryx_u32(x433, x420, (0x0 as u32));
    let mut x436: u32 = 0;
    let mut x437: u32 = 0;
    let (x436, x437) = fiat_bp256_scalar_mulx_u32(x422, 0xcbb40ee9);
    let mut x438: u32 = 0;
    let mut x439: u32 = 0;
    let (x438, x439) = fiat_bp256_scalar_mulx_u32(x436, 0xa9fb57db);
    let mut x440: u32 = 0;
    let mut x441: u32 = 0;
    let (x440, x441) = fiat_bp256_scalar_mulx_u32(x436, 0xa1eea9bc);
    let mut x442: u32 = 0;
    let mut x443: u32 = 0;
    let (x442, x443) = fiat_bp256_scalar_mulx_u32(x436, 0x3e660a90);
    let mut x444: u32 = 0;
    let mut x445: u32 = 0;
    let (x444, x445) = fiat_bp256_scalar_mulx_u32(x436, 0x9d838d71);
    let mut x446: u32 = 0;
    let mut x447: u32 = 0;
    let (x446, x447) = fiat_bp256_scalar_mulx_u32(x436, 0x8c397aa3);
    let mut x448: u32 = 0;
    let mut x449: u32 = 0;
    let (x448, x449) = fiat_bp256_scalar_mulx_u32(x436, 0xb561a6f7);
    let mut x450: u32 = 0;
    let mut x451: u32 = 0;
    let (x450, x451) = fiat_bp256_scalar_mulx_u32(x436, 0x901e0e82);
    let mut x452: u32 = 0;
    let mut x453: u32 = 0;
    let (x452, x453) = fiat_bp256_scalar_mulx_u32(x436, 0x974856a7);
    let mut x454: u32 = 0;
    let mut x455: fiat_bp256_scalar_u1 = 0;
    let (x454, x455) = fiat_bp256_scalar_addcarryx_u32(0x0, x453, x450);
    let mut x456: u32 = 0;
    let mut x457: fiat_bp256_scalar_u1 = 0;
    let (x456, x457) = fiat_bp256_scalar_addcarryx_u32(x455, x451, x448);
    let mut x458: u32 = 0;
    let mut x459: fiat_bp256_scalar_u1 = 0;
    let (x458, x459) = fiat_bp256_scalar_addcarryx_u32(x457, x449, x446);
    let mut x460: u32 = 0;
    let mut x461: fiat_bp256_scalar_u1 = 0;
    let (x460, x461) = fiat_bp256_scalar_addcarryx_u32(x459, x447, x444);
    let mut x462: u32 = 0;
    let mut x463: fiat_bp256_scalar_u1 = 0;
    let (x462, x463) = fiat_bp256_scalar_addcarryx_u32(x461, x445, x442);
    let mut x464: u32 = 0;
    let mut x465: fiat_bp256_scalar_u1 = 0;
    let (x464, x465) = fiat_bp256_scalar_addcarryx_u32(x463, x443, x440);
    let mut x466: u32 = 0;
    let mut x467: fiat_bp256_scalar_u1 = 0;
    let (x466, x467) = fiat_bp256_scalar_addcarryx_u32(x465, x441, x438);
    let mut x468: u32 = 0;
    let mut x469: fiat_bp256_scalar_u1 = 0;
    let (x468, x469) = fiat_bp256_scalar_addcarryx_u32(0x0, x422, x452);
    let mut x470: u32 = 0;
    let mut x471: fiat_bp256_scalar_u1 = 0;
    let (x470, x471) = fiat_bp256_scalar_addcarryx_u32(x469, x424, x454);
    let mut x472: u32 = 0;
    let mut x473: fiat_bp256_scalar_u1 = 0;
    let (x472, x473) = fiat_bp256_scalar_addcarryx_u32(x471, x426, x456);
    let mut x474: u32 = 0;
    let mut x475: fiat_bp256_scalar_u1 = 0;
    let (x474, x475) = fiat_bp256_scalar_addcarryx_u32(x473, x428, x458);
    let mut x476: u32 = 0;
    let mut x477: fiat_bp256_scalar_u1 = 0;
    let (x476, x477) = fiat_bp256_scalar_addcarryx_u32(x475, x430, x460);
    let mut x478: u32 = 0;
    let mut x479: fiat_bp256_scalar_u1 = 0;
    let (x478, x479) = fiat_bp256_scalar_addcarryx_u32(x477, x432, x462);
    let mut x480: u32 = 0;
    let mut x481: fiat_bp256_scalar_u1 = 0;
    let (x480, x481) = fiat_bp256_scalar_addcarryx_u32(x479, x434, x464);
    let mut x482: u32 = 0;
    let mut x483: fiat_bp256_scalar_u1 = 0;
    let (x482, x483) = fiat_bp256_scalar_addcarryx_u32(
        x481,
        ((x435 as u32) + ((x421 as u32) + ((x405 as u32) + x377))),
        x466,
    );
    let x484: u32 = ((x483 as u32) + ((x467 as u32) + x439));
    let mut x485: u32 = 0;
    let mut x486: fiat_bp256_scalar_u1 = 0;
    let (x485, x486) = fiat_bp256_scalar_subborrowx_u32(0x0, x470, 0x974856a7);
    let mut x487: u32 = 0;
    let mut x488: fiat_bp256_scalar_u1 = 0;
    let (x487, x488) = fiat_bp256_scalar_subborrowx_u32(x486, x472, 0x901e0e82);
    let mut x489: u32 = 0;
    let mut x490: fiat_bp256_scalar_u1 = 0;
    let (x489, x490) = fiat_bp256_scalar_subborrowx_u32(x488, x474, 0xb561a6f7);
    let mut x491: u32 = 0;
    let mut x492: fiat_bp256_scalar_u1 = 0;
    let (x491, x492) = fiat_bp256_scalar_subborrowx_u32(x490, x476, 0x8c397aa3);
    let mut x493: u32 = 0;
    let mut x494: fiat_bp256_scalar_u1 = 0;
    let (x493, x494) = fiat_bp256_scalar_subborrowx_u32(x492, x478, 0x9d838d71);
    let mut x495: u32 = 0;
    let mut x496: fiat_bp256_scalar_u1 = 0;
    let (x495, x496) = fiat_bp256_scalar_subborrowx_u32(x494, x480, 0x3e660a90);
    let mut x497: u32 = 0;
    let mut x498: fiat_bp256_scalar_u1 = 0;
    let (x497, x498) = fiat_bp256_scalar_subborrowx_u32(x496, x482, 0xa1eea9bc);
    let mut x499: u32 = 0;
    let mut x500: fiat_bp256_scalar_u1 = 0;
    let (x499, x500) = fiat_bp256_scalar_subborrowx_u32(x498, x484, 0xa9fb57db);
    let mut x501: u32 = 0;
    let mut x502: fiat_bp256_scalar_u1 = 0;
    let (x501, x502) = fiat_bp256_scalar_subborrowx_u32(x500, (0x0 as u32), (0x0 as u32));
    let mut x503: u32 = 0;
    let (x503) = fiat_bp256_scalar_cmovznz_u32(x502, x485, x470);
    let mut x504: u32 = 0;
    let (x504) = fiat_bp256_scalar_cmovznz_u32(x502, x487, x472);
    let mut x505: u32 = 0;
    let (x505) = fiat_bp256_scalar_cmovznz_u32(x502, x489, x474);
    let mut x506: u32 = 0;
    let (x506) = fiat_bp256_scalar_cmovznz_u32(x502, x491, x476);
    let mut x507: u32 = 0;
    let (x507) = fiat_bp256_scalar_cmovznz_u32(x502, x493, x478);
    let mut x508: u32 = 0;
    let (x508) = fiat_bp256_scalar_cmovznz_u32(x502, x495, x480);
    let mut x509: u32 = 0;
    let (x509) = fiat_bp256_scalar_cmovznz_u32(x502, x497, x482);
    let mut x510: u32 = 0;
    let (x510) = fiat_bp256_scalar_cmovznz_u32(x502, x499, x484);
    out1[0] = x503;
    out1[1] = x504;
    out1[2] = x505;
    out1[3] = x506;
    out1[4] = x507;
    out1[5] = x508;
    out1[6] = x509;
    out1[7] = x510;
    out1
}
#[doc = " The function fiat_bp256_scalar_to_montgomery translates a field element into the Montgomery domain."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = eval arg1 mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_bp256_scalar_to_montgomery(
    arg1: &fiat_bp256_scalar_non_montgomery_domain_field_element,
) -> fiat_bp256_scalar_montgomery_domain_field_element {
    let mut out1: fiat_bp256_scalar_montgomery_domain_field_element = [0; 8];
    let x1: u32 = (arg1[1]);
    let x2: u32 = (arg1[2]);
    let x3: u32 = (arg1[3]);
    let x4: u32 = (arg1[4]);
    let x5: u32 = (arg1[5]);
    let x6: u32 = (arg1[6]);
    let x7: u32 = (arg1[7]);
    let x8: u32 = (arg1[0]);
    let mut x9: u32 = 0;
    let mut x10: u32 = 0;
    let (x9, x10) = fiat_bp256_scalar_mulx_u32(x8, 0xb25f1b9);
    let mut x11: u32 = 0;
    let mut x12: u32 = 0;
    let (x11, x12) = fiat_bp256_scalar_mulx_u32(x8, 0xc3236762);
    let mut x13: u32 = 0;
    let mut x14: u32 = 0;
    let (x13, x14) = fiat_bp256_scalar_mulx_u32(x8, 0x9b7f25e7);
    let mut x15: u32 = 0;
    let mut x16: u32 = 0;
    let (x15, x16) = fiat_bp256_scalar_mulx_u32(x8, 0x6c815cb0);
    let mut x17: u32 = 0;
    let mut x18: u32 = 0;
    let (x17, x18) = fiat_bp256_scalar_mulx_u32(x8, 0xf35d176a);
    let mut x19: u32 = 0;
    let mut x20: u32 = 0;
    let (x19, x20) = fiat_bp256_scalar_mulx_u32(x8, 0x1134e4a0);
    let mut x21: u32 = 0;
    let mut x22: u32 = 0;
    let (x21, x22) = fiat_bp256_scalar_mulx_u32(x8, 0xe1d8d8de);
    let mut x23: u32 = 0;
    let mut x24: u32 = 0;
    let (x23, x24) = fiat_bp256_scalar_mulx_u32(x8, 0x3312fca6);
    let mut x25: u32 = 0;
    let mut x26: fiat_bp256_scalar_u1 = 0;
    let (x25, x26) = fiat_bp256_scalar_addcarryx_u32(0x0, x24, x21);
    let mut x27: u32 = 0;
    let mut x28: fiat_bp256_scalar_u1 = 0;
    let (x27, x28) = fiat_bp256_scalar_addcarryx_u32(x26, x22, x19);
    let mut x29: u32 = 0;
    let mut x30: fiat_bp256_scalar_u1 = 0;
    let (x29, x30) = fiat_bp256_scalar_addcarryx_u32(x28, x20, x17);
    let mut x31: u32 = 0;
    let mut x32: fiat_bp256_scalar_u1 = 0;
    let (x31, x32) = fiat_bp256_scalar_addcarryx_u32(x30, x18, x15);
    let mut x33: u32 = 0;
    let mut x34: fiat_bp256_scalar_u1 = 0;
    let (x33, x34) = fiat_bp256_scalar_addcarryx_u32(x32, x16, x13);
    let mut x35: u32 = 0;
    let mut x36: fiat_bp256_scalar_u1 = 0;
    let (x35, x36) = fiat_bp256_scalar_addcarryx_u32(x34, x14, x11);
    let mut x37: u32 = 0;
    let mut x38: fiat_bp256_scalar_u1 = 0;
    let (x37, x38) = fiat_bp256_scalar_addcarryx_u32(x36, x12, x9);
    let mut x39: u32 = 0;
    let mut x40: u32 = 0;
    let (x39, x40) = fiat_bp256_scalar_mulx_u32(x23, 0xcbb40ee9);
    let mut x41: u32 = 0;
    let mut x42: u32 = 0;
    let (x41, x42) = fiat_bp256_scalar_mulx_u32(x39, 0xa9fb57db);
    let mut x43: u32 = 0;
    let mut x44: u32 = 0;
    let (x43, x44) = fiat_bp256_scalar_mulx_u32(x39, 0xa1eea9bc);
    let mut x45: u32 = 0;
    let mut x46: u32 = 0;
    let (x45, x46) = fiat_bp256_scalar_mulx_u32(x39, 0x3e660a90);
    let mut x47: u32 = 0;
    let mut x48: u32 = 0;
    let (x47, x48) = fiat_bp256_scalar_mulx_u32(x39, 0x9d838d71);
    let mut x49: u32 = 0;
    let mut x50: u32 = 0;
    let (x49, x50) = fiat_bp256_scalar_mulx_u32(x39, 0x8c397aa3);
    let mut x51: u32 = 0;
    let mut x52: u32 = 0;
    let (x51, x52) = fiat_bp256_scalar_mulx_u32(x39, 0xb561a6f7);
    let mut x53: u32 = 0;
    let mut x54: u32 = 0;
    let (x53, x54) = fiat_bp256_scalar_mulx_u32(x39, 0x901e0e82);
    let mut x55: u32 = 0;
    let mut x56: u32 = 0;
    let (x55, x56) = fiat_bp256_scalar_mulx_u32(x39, 0x974856a7);
    let mut x57: u32 = 0;
    let mut x58: fiat_bp256_scalar_u1 = 0;
    let (x57, x58) = fiat_bp256_scalar_addcarryx_u32(0x0, x56, x53);
    let mut x59: u32 = 0;
    let mut x60: fiat_bp256_scalar_u1 = 0;
    let (x59, x60) = fiat_bp256_scalar_addcarryx_u32(x58, x54, x51);
    let mut x61: u32 = 0;
    let mut x62: fiat_bp256_scalar_u1 = 0;
    let (x61, x62) = fiat_bp256_scalar_addcarryx_u32(x60, x52, x49);
    let mut x63: u32 = 0;
    let mut x64: fiat_bp256_scalar_u1 = 0;
    let (x63, x64) = fiat_bp256_scalar_addcarryx_u32(x62, x50, x47);
    let mut x65: u32 = 0;
    let mut x66: fiat_bp256_scalar_u1 = 0;
    let (x65, x66) = fiat_bp256_scalar_addcarryx_u32(x64, x48, x45);
    let mut x67: u32 = 0;
    let mut x68: fiat_bp256_scalar_u1 = 0;
    let (x67, x68) = fiat_bp256_scalar_addcarryx_u32(x66, x46, x43);
    let mut x69: u32 = 0;
    let mut x70: fiat_bp256_scalar_u1 = 0;
    let (x69, x70) = fiat_bp256_scalar_addcarryx_u32(x68, x44, x41);
    let mut x71: u32 = 0;
    let mut x72: fiat_bp256_scalar_u1 = 0;
    let (x71, x72) = fiat_bp256_scalar_addcarryx_u32(0x0, x23, x55);
    let mut x73: u32 = 0;
    let mut x74: fiat_bp256_scalar_u1 = 0;
    let (x73, x74) = fiat_bp256_scalar_addcarryx_u32(x72, x25, x57);
    let mut x75: u32 = 0;
    let mut x76: fiat_bp256_scalar_u1 = 0;
    let (x75, x76) = fiat_bp256_scalar_addcarryx_u32(x74, x27, x59);
    let mut x77: u32 = 0;
    let mut x78: fiat_bp256_scalar_u1 = 0;
    let (x77, x78) = fiat_bp256_scalar_addcarryx_u32(x76, x29, x61);
    let mut x79: u32 = 0;
    let mut x80: fiat_bp256_scalar_u1 = 0;
    let (x79, x80) = fiat_bp256_scalar_addcarryx_u32(x78, x31, x63);
    let mut x81: u32 = 0;
    let mut x82: fiat_bp256_scalar_u1 = 0;
    let (x81, x82) = fiat_bp256_scalar_addcarryx_u32(x80, x33, x65);
    let mut x83: u32 = 0;
    let mut x84: fiat_bp256_scalar_u1 = 0;
    let (x83, x84) = fiat_bp256_scalar_addcarryx_u32(x82, x35, x67);
    let mut x85: u32 = 0;
    let mut x86: fiat_bp256_scalar_u1 = 0;
    let (x85, x86) = fiat_bp256_scalar_addcarryx_u32(x84, x37, x69);
    let mut x87: u32 = 0;
    let mut x88: u32 = 0;
    let (x87, x88) = fiat_bp256_scalar_mulx_u32(x1, 0xb25f1b9);
    let mut x89: u32 = 0;
    let mut x90: u32 = 0;
    let (x89, x90) = fiat_bp256_scalar_mulx_u32(x1, 0xc3236762);
    let mut x91: u32 = 0;
    let mut x92: u32 = 0;
    let (x91, x92) = fiat_bp256_scalar_mulx_u32(x1, 0x9b7f25e7);
    let mut x93: u32 = 0;
    let mut x94: u32 = 0;
    let (x93, x94) = fiat_bp256_scalar_mulx_u32(x1, 0x6c815cb0);
    let mut x95: u32 = 0;
    let mut x96: u32 = 0;
    let (x95, x96) = fiat_bp256_scalar_mulx_u32(x1, 0xf35d176a);
    let mut x97: u32 = 0;
    let mut x98: u32 = 0;
    let (x97, x98) = fiat_bp256_scalar_mulx_u32(x1, 0x1134e4a0);
    let mut x99: u32 = 0;
    let mut x100: u32 = 0;
    let (x99, x100) = fiat_bp256_scalar_mulx_u32(x1, 0xe1d8d8de);
    let mut x101: u32 = 0;
    let mut x102: u32 = 0;
    let (x101, x102) = fiat_bp256_scalar_mulx_u32(x1, 0x3312fca6);
    let mut x103: u32 = 0;
    let mut x104: fiat_bp256_scalar_u1 = 0;
    let (x103, x104) = fiat_bp256_scalar_addcarryx_u32(0x0, x102, x99);
    let mut x105: u32 = 0;
    let mut x106: fiat_bp256_scalar_u1 = 0;
    let (x105, x106) = fiat_bp256_scalar_addcarryx_u32(x104, x100, x97);
    let mut x107: u32 = 0;
    let mut x108: fiat_bp256_scalar_u1 = 0;
    let (x107, x108) = fiat_bp256_scalar_addcarryx_u32(x106, x98, x95);
    let mut x109: u32 = 0;
    let mut x110: fiat_bp256_scalar_u1 = 0;
    let (x109, x110) = fiat_bp256_scalar_addcarryx_u32(x108, x96, x93);
    let mut x111: u32 = 0;
    let mut x112: fiat_bp256_scalar_u1 = 0;
    let (x111, x112) = fiat_bp256_scalar_addcarryx_u32(x110, x94, x91);
    let mut x113: u32 = 0;
    let mut x114: fiat_bp256_scalar_u1 = 0;
    let (x113, x114) = fiat_bp256_scalar_addcarryx_u32(x112, x92, x89);
    let mut x115: u32 = 0;
    let mut x116: fiat_bp256_scalar_u1 = 0;
    let (x115, x116) = fiat_bp256_scalar_addcarryx_u32(x114, x90, x87);
    let mut x117: u32 = 0;
    let mut x118: fiat_bp256_scalar_u1 = 0;
    let (x117, x118) = fiat_bp256_scalar_addcarryx_u32(0x0, x73, x101);
    let mut x119: u32 = 0;
    let mut x120: fiat_bp256_scalar_u1 = 0;
    let (x119, x120) = fiat_bp256_scalar_addcarryx_u32(x118, x75, x103);
    let mut x121: u32 = 0;
    let mut x122: fiat_bp256_scalar_u1 = 0;
    let (x121, x122) = fiat_bp256_scalar_addcarryx_u32(x120, x77, x105);
    let mut x123: u32 = 0;
    let mut x124: fiat_bp256_scalar_u1 = 0;
    let (x123, x124) = fiat_bp256_scalar_addcarryx_u32(x122, x79, x107);
    let mut x125: u32 = 0;
    let mut x126: fiat_bp256_scalar_u1 = 0;
    let (x125, x126) = fiat_bp256_scalar_addcarryx_u32(x124, x81, x109);
    let mut x127: u32 = 0;
    let mut x128: fiat_bp256_scalar_u1 = 0;
    let (x127, x128) = fiat_bp256_scalar_addcarryx_u32(x126, x83, x111);
    let mut x129: u32 = 0;
    let mut x130: fiat_bp256_scalar_u1 = 0;
    let (x129, x130) = fiat_bp256_scalar_addcarryx_u32(x128, x85, x113);
    let mut x131: u32 = 0;
    let mut x132: fiat_bp256_scalar_u1 = 0;
    let (x131, x132) = fiat_bp256_scalar_addcarryx_u32(
        x130,
        (((x86 as u32) + ((x38 as u32) + x10)) + ((x70 as u32) + x42)),
        x115,
    );
    let mut x133: u32 = 0;
    let mut x134: u32 = 0;
    let (x133, x134) = fiat_bp256_scalar_mulx_u32(x117, 0xcbb40ee9);
    let mut x135: u32 = 0;
    let mut x136: u32 = 0;
    let (x135, x136) = fiat_bp256_scalar_mulx_u32(x133, 0xa9fb57db);
    let mut x137: u32 = 0;
    let mut x138: u32 = 0;
    let (x137, x138) = fiat_bp256_scalar_mulx_u32(x133, 0xa1eea9bc);
    let mut x139: u32 = 0;
    let mut x140: u32 = 0;
    let (x139, x140) = fiat_bp256_scalar_mulx_u32(x133, 0x3e660a90);
    let mut x141: u32 = 0;
    let mut x142: u32 = 0;
    let (x141, x142) = fiat_bp256_scalar_mulx_u32(x133, 0x9d838d71);
    let mut x143: u32 = 0;
    let mut x144: u32 = 0;
    let (x143, x144) = fiat_bp256_scalar_mulx_u32(x133, 0x8c397aa3);
    let mut x145: u32 = 0;
    let mut x146: u32 = 0;
    let (x145, x146) = fiat_bp256_scalar_mulx_u32(x133, 0xb561a6f7);
    let mut x147: u32 = 0;
    let mut x148: u32 = 0;
    let (x147, x148) = fiat_bp256_scalar_mulx_u32(x133, 0x901e0e82);
    let mut x149: u32 = 0;
    let mut x150: u32 = 0;
    let (x149, x150) = fiat_bp256_scalar_mulx_u32(x133, 0x974856a7);
    let mut x151: u32 = 0;
    let mut x152: fiat_bp256_scalar_u1 = 0;
    let (x151, x152) = fiat_bp256_scalar_addcarryx_u32(0x0, x150, x147);
    let mut x153: u32 = 0;
    let mut x154: fiat_bp256_scalar_u1 = 0;
    let (x153, x154) = fiat_bp256_scalar_addcarryx_u32(x152, x148, x145);
    let mut x155: u32 = 0;
    let mut x156: fiat_bp256_scalar_u1 = 0;
    let (x155, x156) = fiat_bp256_scalar_addcarryx_u32(x154, x146, x143);
    let mut x157: u32 = 0;
    let mut x158: fiat_bp256_scalar_u1 = 0;
    let (x157, x158) = fiat_bp256_scalar_addcarryx_u32(x156, x144, x141);
    let mut x159: u32 = 0;
    let mut x160: fiat_bp256_scalar_u1 = 0;
    let (x159, x160) = fiat_bp256_scalar_addcarryx_u32(x158, x142, x139);
    let mut x161: u32 = 0;
    let mut x162: fiat_bp256_scalar_u1 = 0;
    let (x161, x162) = fiat_bp256_scalar_addcarryx_u32(x160, x140, x137);
    let mut x163: u32 = 0;
    let mut x164: fiat_bp256_scalar_u1 = 0;
    let (x163, x164) = fiat_bp256_scalar_addcarryx_u32(x162, x138, x135);
    let mut x165: u32 = 0;
    let mut x166: fiat_bp256_scalar_u1 = 0;
    let (x165, x166) = fiat_bp256_scalar_addcarryx_u32(0x0, x117, x149);
    let mut x167: u32 = 0;
    let mut x168: fiat_bp256_scalar_u1 = 0;
    let (x167, x168) = fiat_bp256_scalar_addcarryx_u32(x166, x119, x151);
    let mut x169: u32 = 0;
    let mut x170: fiat_bp256_scalar_u1 = 0;
    let (x169, x170) = fiat_bp256_scalar_addcarryx_u32(x168, x121, x153);
    let mut x171: u32 = 0;
    let mut x172: fiat_bp256_scalar_u1 = 0;
    let (x171, x172) = fiat_bp256_scalar_addcarryx_u32(x170, x123, x155);
    let mut x173: u32 = 0;
    let mut x174: fiat_bp256_scalar_u1 = 0;
    let (x173, x174) = fiat_bp256_scalar_addcarryx_u32(x172, x125, x157);
    let mut x175: u32 = 0;
    let mut x176: fiat_bp256_scalar_u1 = 0;
    let (x175, x176) = fiat_bp256_scalar_addcarryx_u32(x174, x127, x159);
    let mut x177: u32 = 0;
    let mut x178: fiat_bp256_scalar_u1 = 0;
    let (x177, x178) = fiat_bp256_scalar_addcarryx_u32(x176, x129, x161);
    let mut x179: u32 = 0;
    let mut x180: fiat_bp256_scalar_u1 = 0;
    let (x179, x180) = fiat_bp256_scalar_addcarryx_u32(x178, x131, x163);
    let mut x181: u32 = 0;
    let mut x182: u32 = 0;
    let (x181, x182) = fiat_bp256_scalar_mulx_u32(x2, 0xb25f1b9);
    let mut x183: u32 = 0;
    let mut x184: u32 = 0;
    let (x183, x184) = fiat_bp256_scalar_mulx_u32(x2, 0xc3236762);
    let mut x185: u32 = 0;
    let mut x186: u32 = 0;
    let (x185, x186) = fiat_bp256_scalar_mulx_u32(x2, 0x9b7f25e7);
    let mut x187: u32 = 0;
    let mut x188: u32 = 0;
    let (x187, x188) = fiat_bp256_scalar_mulx_u32(x2, 0x6c815cb0);
    let mut x189: u32 = 0;
    let mut x190: u32 = 0;
    let (x189, x190) = fiat_bp256_scalar_mulx_u32(x2, 0xf35d176a);
    let mut x191: u32 = 0;
    let mut x192: u32 = 0;
    let (x191, x192) = fiat_bp256_scalar_mulx_u32(x2, 0x1134e4a0);
    let mut x193: u32 = 0;
    let mut x194: u32 = 0;
    let (x193, x194) = fiat_bp256_scalar_mulx_u32(x2, 0xe1d8d8de);
    let mut x195: u32 = 0;
    let mut x196: u32 = 0;
    let (x195, x196) = fiat_bp256_scalar_mulx_u32(x2, 0x3312fca6);
    let mut x197: u32 = 0;
    let mut x198: fiat_bp256_scalar_u1 = 0;
    let (x197, x198) = fiat_bp256_scalar_addcarryx_u32(0x0, x196, x193);
    let mut x199: u32 = 0;
    let mut x200: fiat_bp256_scalar_u1 = 0;
    let (x199, x200) = fiat_bp256_scalar_addcarryx_u32(x198, x194, x191);
    let mut x201: u32 = 0;
    let mut x202: fiat_bp256_scalar_u1 = 0;
    let (x201, x202) = fiat_bp256_scalar_addcarryx_u32(x200, x192, x189);
    let mut x203: u32 = 0;
    let mut x204: fiat_bp256_scalar_u1 = 0;
    let (x203, x204) = fiat_bp256_scalar_addcarryx_u32(x202, x190, x187);
    let mut x205: u32 = 0;
    let mut x206: fiat_bp256_scalar_u1 = 0;
    let (x205, x206) = fiat_bp256_scalar_addcarryx_u32(x204, x188, x185);
    let mut x207: u32 = 0;
    let mut x208: fiat_bp256_scalar_u1 = 0;
    let (x207, x208) = fiat_bp256_scalar_addcarryx_u32(x206, x186, x183);
    let mut x209: u32 = 0;
    let mut x210: fiat_bp256_scalar_u1 = 0;
    let (x209, x210) = fiat_bp256_scalar_addcarryx_u32(x208, x184, x181);
    let mut x211: u32 = 0;
    let mut x212: fiat_bp256_scalar_u1 = 0;
    let (x211, x212) = fiat_bp256_scalar_addcarryx_u32(0x0, x167, x195);
    let mut x213: u32 = 0;
    let mut x214: fiat_bp256_scalar_u1 = 0;
    let (x213, x214) = fiat_bp256_scalar_addcarryx_u32(x212, x169, x197);
    let mut x215: u32 = 0;
    let mut x216: fiat_bp256_scalar_u1 = 0;
    let (x215, x216) = fiat_bp256_scalar_addcarryx_u32(x214, x171, x199);
    let mut x217: u32 = 0;
    let mut x218: fiat_bp256_scalar_u1 = 0;
    let (x217, x218) = fiat_bp256_scalar_addcarryx_u32(x216, x173, x201);
    let mut x219: u32 = 0;
    let mut x220: fiat_bp256_scalar_u1 = 0;
    let (x219, x220) = fiat_bp256_scalar_addcarryx_u32(x218, x175, x203);
    let mut x221: u32 = 0;
    let mut x222: fiat_bp256_scalar_u1 = 0;
    let (x221, x222) = fiat_bp256_scalar_addcarryx_u32(x220, x177, x205);
    let mut x223: u32 = 0;
    let mut x224: fiat_bp256_scalar_u1 = 0;
    let (x223, x224) = fiat_bp256_scalar_addcarryx_u32(x222, x179, x207);
    let mut x225: u32 = 0;
    let mut x226: fiat_bp256_scalar_u1 = 0;
    let (x225, x226) = fiat_bp256_scalar_addcarryx_u32(
        x224,
        (((x180 as u32) + ((x132 as u32) + ((x116 as u32) + x88))) + ((x164 as u32) + x136)),
        x209,
    );
    let mut x227: u32 = 0;
    let mut x228: u32 = 0;
    let (x227, x228) = fiat_bp256_scalar_mulx_u32(x211, 0xcbb40ee9);
    let mut x229: u32 = 0;
    let mut x230: u32 = 0;
    let (x229, x230) = fiat_bp256_scalar_mulx_u32(x227, 0xa9fb57db);
    let mut x231: u32 = 0;
    let mut x232: u32 = 0;
    let (x231, x232) = fiat_bp256_scalar_mulx_u32(x227, 0xa1eea9bc);
    let mut x233: u32 = 0;
    let mut x234: u32 = 0;
    let (x233, x234) = fiat_bp256_scalar_mulx_u32(x227, 0x3e660a90);
    let mut x235: u32 = 0;
    let mut x236: u32 = 0;
    let (x235, x236) = fiat_bp256_scalar_mulx_u32(x227, 0x9d838d71);
    let mut x237: u32 = 0;
    let mut x238: u32 = 0;
    let (x237, x238) = fiat_bp256_scalar_mulx_u32(x227, 0x8c397aa3);
    let mut x239: u32 = 0;
    let mut x240: u32 = 0;
    let (x239, x240) = fiat_bp256_scalar_mulx_u32(x227, 0xb561a6f7);
    let mut x241: u32 = 0;
    let mut x242: u32 = 0;
    let (x241, x242) = fiat_bp256_scalar_mulx_u32(x227, 0x901e0e82);
    let mut x243: u32 = 0;
    let mut x244: u32 = 0;
    let (x243, x244) = fiat_bp256_scalar_mulx_u32(x227, 0x974856a7);
    let mut x245: u32 = 0;
    let mut x246: fiat_bp256_scalar_u1 = 0;
    let (x245, x246) = fiat_bp256_scalar_addcarryx_u32(0x0, x244, x241);
    let mut x247: u32 = 0;
    let mut x248: fiat_bp256_scalar_u1 = 0;
    let (x247, x248) = fiat_bp256_scalar_addcarryx_u32(x246, x242, x239);
    let mut x249: u32 = 0;
    let mut x250: fiat_bp256_scalar_u1 = 0;
    let (x249, x250) = fiat_bp256_scalar_addcarryx_u32(x248, x240, x237);
    let mut x251: u32 = 0;
    let mut x252: fiat_bp256_scalar_u1 = 0;
    let (x251, x252) = fiat_bp256_scalar_addcarryx_u32(x250, x238, x235);
    let mut x253: u32 = 0;
    let mut x254: fiat_bp256_scalar_u1 = 0;
    let (x253, x254) = fiat_bp256_scalar_addcarryx_u32(x252, x236, x233);
    let mut x255: u32 = 0;
    let mut x256: fiat_bp256_scalar_u1 = 0;
    let (x255, x256) = fiat_bp256_scalar_addcarryx_u32(x254, x234, x231);
    let mut x257: u32 = 0;
    let mut x258: fiat_bp256_scalar_u1 = 0;
    let (x257, x258) = fiat_bp256_scalar_addcarryx_u32(x256, x232, x229);
    let mut x259: u32 = 0;
    let mut x260: fiat_bp256_scalar_u1 = 0;
    let (x259, x260) = fiat_bp256_scalar_addcarryx_u32(0x0, x211, x243);
    let mut x261: u32 = 0;
    let mut x262: fiat_bp256_scalar_u1 = 0;
    let (x261, x262) = fiat_bp256_scalar_addcarryx_u32(x260, x213, x245);
    let mut x263: u32 = 0;
    let mut x264: fiat_bp256_scalar_u1 = 0;
    let (x263, x264) = fiat_bp256_scalar_addcarryx_u32(x262, x215, x247);
    let mut x265: u32 = 0;
    let mut x266: fiat_bp256_scalar_u1 = 0;
    let (x265, x266) = fiat_bp256_scalar_addcarryx_u32(x264, x217, x249);
    let mut x267: u32 = 0;
    let mut x268: fiat_bp256_scalar_u1 = 0;
    let (x267, x268) = fiat_bp256_scalar_addcarryx_u32(x266, x219, x251);
    let mut x269: u32 = 0;
    let mut x270: fiat_bp256_scalar_u1 = 0;
    let (x269, x270) = fiat_bp256_scalar_addcarryx_u32(x268, x221, x253);
    let mut x271: u32 = 0;
    let mut x272: fiat_bp256_scalar_u1 = 0;
    let (x271, x272) = fiat_bp256_scalar_addcarryx_u32(x270, x223, x255);
    let mut x273: u32 = 0;
    let mut x274: fiat_bp256_scalar_u1 = 0;
    let (x273, x274) = fiat_bp256_scalar_addcarryx_u32(x272, x225, x257);
    let mut x275: u32 = 0;
    let mut x276: u32 = 0;
    let (x275, x276) = fiat_bp256_scalar_mulx_u32(x3, 0xb25f1b9);
    let mut x277: u32 = 0;
    let mut x278: u32 = 0;
    let (x277, x278) = fiat_bp256_scalar_mulx_u32(x3, 0xc3236762);
    let mut x279: u32 = 0;
    let mut x280: u32 = 0;
    let (x279, x280) = fiat_bp256_scalar_mulx_u32(x3, 0x9b7f25e7);
    let mut x281: u32 = 0;
    let mut x282: u32 = 0;
    let (x281, x282) = fiat_bp256_scalar_mulx_u32(x3, 0x6c815cb0);
    let mut x283: u32 = 0;
    let mut x284: u32 = 0;
    let (x283, x284) = fiat_bp256_scalar_mulx_u32(x3, 0xf35d176a);
    let mut x285: u32 = 0;
    let mut x286: u32 = 0;
    let (x285, x286) = fiat_bp256_scalar_mulx_u32(x3, 0x1134e4a0);
    let mut x287: u32 = 0;
    let mut x288: u32 = 0;
    let (x287, x288) = fiat_bp256_scalar_mulx_u32(x3, 0xe1d8d8de);
    let mut x289: u32 = 0;
    let mut x290: u32 = 0;
    let (x289, x290) = fiat_bp256_scalar_mulx_u32(x3, 0x3312fca6);
    let mut x291: u32 = 0;
    let mut x292: fiat_bp256_scalar_u1 = 0;
    let (x291, x292) = fiat_bp256_scalar_addcarryx_u32(0x0, x290, x287);
    let mut x293: u32 = 0;
    let mut x294: fiat_bp256_scalar_u1 = 0;
    let (x293, x294) = fiat_bp256_scalar_addcarryx_u32(x292, x288, x285);
    let mut x295: u32 = 0;
    let mut x296: fiat_bp256_scalar_u1 = 0;
    let (x295, x296) = fiat_bp256_scalar_addcarryx_u32(x294, x286, x283);
    let mut x297: u32 = 0;
    let mut x298: fiat_bp256_scalar_u1 = 0;
    let (x297, x298) = fiat_bp256_scalar_addcarryx_u32(x296, x284, x281);
    let mut x299: u32 = 0;
    let mut x300: fiat_bp256_scalar_u1 = 0;
    let (x299, x300) = fiat_bp256_scalar_addcarryx_u32(x298, x282, x279);
    let mut x301: u32 = 0;
    let mut x302: fiat_bp256_scalar_u1 = 0;
    let (x301, x302) = fiat_bp256_scalar_addcarryx_u32(x300, x280, x277);
    let mut x303: u32 = 0;
    let mut x304: fiat_bp256_scalar_u1 = 0;
    let (x303, x304) = fiat_bp256_scalar_addcarryx_u32(x302, x278, x275);
    let mut x305: u32 = 0;
    let mut x306: fiat_bp256_scalar_u1 = 0;
    let (x305, x306) = fiat_bp256_scalar_addcarryx_u32(0x0, x261, x289);
    let mut x307: u32 = 0;
    let mut x308: fiat_bp256_scalar_u1 = 0;
    let (x307, x308) = fiat_bp256_scalar_addcarryx_u32(x306, x263, x291);
    let mut x309: u32 = 0;
    let mut x310: fiat_bp256_scalar_u1 = 0;
    let (x309, x310) = fiat_bp256_scalar_addcarryx_u32(x308, x265, x293);
    let mut x311: u32 = 0;
    let mut x312: fiat_bp256_scalar_u1 = 0;
    let (x311, x312) = fiat_bp256_scalar_addcarryx_u32(x310, x267, x295);
    let mut x313: u32 = 0;
    let mut x314: fiat_bp256_scalar_u1 = 0;
    let (x313, x314) = fiat_bp256_scalar_addcarryx_u32(x312, x269, x297);
    let mut x315: u32 = 0;
    let mut x316: fiat_bp256_scalar_u1 = 0;
    let (x315, x316) = fiat_bp256_scalar_addcarryx_u32(x314, x271, x299);
    let mut x317: u32 = 0;
    let mut x318: fiat_bp256_scalar_u1 = 0;
    let (x317, x318) = fiat_bp256_scalar_addcarryx_u32(x316, x273, x301);
    let mut x319: u32 = 0;
    let mut x320: fiat_bp256_scalar_u1 = 0;
    let (x319, x320) = fiat_bp256_scalar_addcarryx_u32(
        x318,
        (((x274 as u32) + ((x226 as u32) + ((x210 as u32) + x182))) + ((x258 as u32) + x230)),
        x303,
    );
    let mut x321: u32 = 0;
    let mut x322: u32 = 0;
    let (x321, x322) = fiat_bp256_scalar_mulx_u32(x305, 0xcbb40ee9);
    let mut x323: u32 = 0;
    let mut x324: u32 = 0;
    let (x323, x324) = fiat_bp256_scalar_mulx_u32(x321, 0xa9fb57db);
    let mut x325: u32 = 0;
    let mut x326: u32 = 0;
    let (x325, x326) = fiat_bp256_scalar_mulx_u32(x321, 0xa1eea9bc);
    let mut x327: u32 = 0;
    let mut x328: u32 = 0;
    let (x327, x328) = fiat_bp256_scalar_mulx_u32(x321, 0x3e660a90);
    let mut x329: u32 = 0;
    let mut x330: u32 = 0;
    let (x329, x330) = fiat_bp256_scalar_mulx_u32(x321, 0x9d838d71);
    let mut x331: u32 = 0;
    let mut x332: u32 = 0;
    let (x331, x332) = fiat_bp256_scalar_mulx_u32(x321, 0x8c397aa3);
    let mut x333: u32 = 0;
    let mut x334: u32 = 0;
    let (x333, x334) = fiat_bp256_scalar_mulx_u32(x321, 0xb561a6f7);
    let mut x335: u32 = 0;
    let mut x336: u32 = 0;
    let (x335, x336) = fiat_bp256_scalar_mulx_u32(x321, 0x901e0e82);
    let mut x337: u32 = 0;
    let mut x338: u32 = 0;
    let (x337, x338) = fiat_bp256_scalar_mulx_u32(x321, 0x974856a7);
    let mut x339: u32 = 0;
    let mut x340: fiat_bp256_scalar_u1 = 0;
    let (x339, x340) = fiat_bp256_scalar_addcarryx_u32(0x0, x338, x335);
    let mut x341: u32 = 0;
    let mut x342: fiat_bp256_scalar_u1 = 0;
    let (x341, x342) = fiat_bp256_scalar_addcarryx_u32(x340, x336, x333);
    let mut x343: u32 = 0;
    let mut x344: fiat_bp256_scalar_u1 = 0;
    let (x343, x344) = fiat_bp256_scalar_addcarryx_u32(x342, x334, x331);
    let mut x345: u32 = 0;
    let mut x346: fiat_bp256_scalar_u1 = 0;
    let (x345, x346) = fiat_bp256_scalar_addcarryx_u32(x344, x332, x329);
    let mut x347: u32 = 0;
    let mut x348: fiat_bp256_scalar_u1 = 0;
    let (x347, x348) = fiat_bp256_scalar_addcarryx_u32(x346, x330, x327);
    let mut x349: u32 = 0;
    let mut x350: fiat_bp256_scalar_u1 = 0;
    let (x349, x350) = fiat_bp256_scalar_addcarryx_u32(x348, x328, x325);
    let mut x351: u32 = 0;
    let mut x352: fiat_bp256_scalar_u1 = 0;
    let (x351, x352) = fiat_bp256_scalar_addcarryx_u32(x350, x326, x323);
    let mut x353: u32 = 0;
    let mut x354: fiat_bp256_scalar_u1 = 0;
    let (x353, x354) = fiat_bp256_scalar_addcarryx_u32(0x0, x305, x337);
    let mut x355: u32 = 0;
    let mut x356: fiat_bp256_scalar_u1 = 0;
    let (x355, x356) = fiat_bp256_scalar_addcarryx_u32(x354, x307, x339);
    let mut x357: u32 = 0;
    let mut x358: fiat_bp256_scalar_u1 = 0;
    let (x357, x358) = fiat_bp256_scalar_addcarryx_u32(x356, x309, x341);
    let mut x359: u32 = 0;
    let mut x360: fiat_bp256_scalar_u1 = 0;
    let (x359, x360) = fiat_bp256_scalar_addcarryx_u32(x358, x311, x343);
    let mut x361: u32 = 0;
    let mut x362: fiat_bp256_scalar_u1 = 0;
    let (x361, x362) = fiat_bp256_scalar_addcarryx_u32(x360, x313, x345);
    let mut x363: u32 = 0;
    let mut x364: fiat_bp256_scalar_u1 = 0;
    let (x363, x364) = fiat_bp256_scalar_addcarryx_u32(x362, x315, x347);
    let mut x365: u32 = 0;
    let mut x366: fiat_bp256_scalar_u1 = 0;
    let (x365, x366) = fiat_bp256_scalar_addcarryx_u32(x364, x317, x349);
    let mut x367: u32 = 0;
    let mut x368: fiat_bp256_scalar_u1 = 0;
    let (x367, x368) = fiat_bp256_scalar_addcarryx_u32(x366, x319, x351);
    let mut x369: u32 = 0;
    let mut x370: u32 = 0;
    let (x369, x370) = fiat_bp256_scalar_mulx_u32(x4, 0xb25f1b9);
    let mut x371: u32 = 0;
    let mut x372: u32 = 0;
    let (x371, x372) = fiat_bp256_scalar_mulx_u32(x4, 0xc3236762);
    let mut x373: u32 = 0;
    let mut x374: u32 = 0;
    let (x373, x374) = fiat_bp256_scalar_mulx_u32(x4, 0x9b7f25e7);
    let mut x375: u32 = 0;
    let mut x376: u32 = 0;
    let (x375, x376) = fiat_bp256_scalar_mulx_u32(x4, 0x6c815cb0);
    let mut x377: u32 = 0;
    let mut x378: u32 = 0;
    let (x377, x378) = fiat_bp256_scalar_mulx_u32(x4, 0xf35d176a);
    let mut x379: u32 = 0;
    let mut x380: u32 = 0;
    let (x379, x380) = fiat_bp256_scalar_mulx_u32(x4, 0x1134e4a0);
    let mut x381: u32 = 0;
    let mut x382: u32 = 0;
    let (x381, x382) = fiat_bp256_scalar_mulx_u32(x4, 0xe1d8d8de);
    let mut x383: u32 = 0;
    let mut x384: u32 = 0;
    let (x383, x384) = fiat_bp256_scalar_mulx_u32(x4, 0x3312fca6);
    let mut x385: u32 = 0;
    let mut x386: fiat_bp256_scalar_u1 = 0;
    let (x385, x386) = fiat_bp256_scalar_addcarryx_u32(0x0, x384, x381);
    let mut x387: u32 = 0;
    let mut x388: fiat_bp256_scalar_u1 = 0;
    let (x387, x388) = fiat_bp256_scalar_addcarryx_u32(x386, x382, x379);
    let mut x389: u32 = 0;
    let mut x390: fiat_bp256_scalar_u1 = 0;
    let (x389, x390) = fiat_bp256_scalar_addcarryx_u32(x388, x380, x377);
    let mut x391: u32 = 0;
    let mut x392: fiat_bp256_scalar_u1 = 0;
    let (x391, x392) = fiat_bp256_scalar_addcarryx_u32(x390, x378, x375);
    let mut x393: u32 = 0;
    let mut x394: fiat_bp256_scalar_u1 = 0;
    let (x393, x394) = fiat_bp256_scalar_addcarryx_u32(x392, x376, x373);
    let mut x395: u32 = 0;
    let mut x396: fiat_bp256_scalar_u1 = 0;
    let (x395, x396) = fiat_bp256_scalar_addcarryx_u32(x394, x374, x371);
    let mut x397: u32 = 0;
    let mut x398: fiat_bp256_scalar_u1 = 0;
    let (x397, x398) = fiat_bp256_scalar_addcarryx_u32(x396, x372, x369);
    let mut x399: u32 = 0;
    let mut x400: fiat_bp256_scalar_u1 = 0;
    let (x399, x400) = fiat_bp256_scalar_addcarryx_u32(0x0, x355, x383);
    let mut x401: u32 = 0;
    let mut x402: fiat_bp256_scalar_u1 = 0;
    let (x401, x402) = fiat_bp256_scalar_addcarryx_u32(x400, x357, x385);
    let mut x403: u32 = 0;
    let mut x404: fiat_bp256_scalar_u1 = 0;
    let (x403, x404) = fiat_bp256_scalar_addcarryx_u32(x402, x359, x387);
    let mut x405: u32 = 0;
    let mut x406: fiat_bp256_scalar_u1 = 0;
    let (x405, x406) = fiat_bp256_scalar_addcarryx_u32(x404, x361, x389);
    let mut x407: u32 = 0;
    let mut x408: fiat_bp256_scalar_u1 = 0;
    let (x407, x408) = fiat_bp256_scalar_addcarryx_u32(x406, x363, x391);
    let mut x409: u32 = 0;
    let mut x410: fiat_bp256_scalar_u1 = 0;
    let (x409, x410) = fiat_bp256_scalar_addcarryx_u32(x408, x365, x393);
    let mut x411: u32 = 0;
    let mut x412: fiat_bp256_scalar_u1 = 0;
    let (x411, x412) = fiat_bp256_scalar_addcarryx_u32(x410, x367, x395);
    let mut x413: u32 = 0;
    let mut x414: fiat_bp256_scalar_u1 = 0;
    let (x413, x414) = fiat_bp256_scalar_addcarryx_u32(
        x412,
        (((x368 as u32) + ((x320 as u32) + ((x304 as u32) + x276))) + ((x352 as u32) + x324)),
        x397,
    );
    let mut x415: u32 = 0;
    let mut x416: u32 = 0;
    let (x415, x416) = fiat_bp256_scalar_mulx_u32(x399, 0xcbb40ee9);
    let mut x417: u32 = 0;
    let mut x418: u32 = 0;
    let (x417, x418) = fiat_bp256_scalar_mulx_u32(x415, 0xa9fb57db);
    let mut x419: u32 = 0;
    let mut x420: u32 = 0;
    let (x419, x420) = fiat_bp256_scalar_mulx_u32(x415, 0xa1eea9bc);
    let mut x421: u32 = 0;
    let mut x422: u32 = 0;
    let (x421, x422) = fiat_bp256_scalar_mulx_u32(x415, 0x3e660a90);
    let mut x423: u32 = 0;
    let mut x424: u32 = 0;
    let (x423, x424) = fiat_bp256_scalar_mulx_u32(x415, 0x9d838d71);
    let mut x425: u32 = 0;
    let mut x426: u32 = 0;
    let (x425, x426) = fiat_bp256_scalar_mulx_u32(x415, 0x8c397aa3);
    let mut x427: u32 = 0;
    let mut x428: u32 = 0;
    let (x427, x428) = fiat_bp256_scalar_mulx_u32(x415, 0xb561a6f7);
    let mut x429: u32 = 0;
    let mut x430: u32 = 0;
    let (x429, x430) = fiat_bp256_scalar_mulx_u32(x415, 0x901e0e82);
    let mut x431: u32 = 0;
    let mut x432: u32 = 0;
    let (x431, x432) = fiat_bp256_scalar_mulx_u32(x415, 0x974856a7);
    let mut x433: u32 = 0;
    let mut x434: fiat_bp256_scalar_u1 = 0;
    let (x433, x434) = fiat_bp256_scalar_addcarryx_u32(0x0, x432, x429);
    let mut x435: u32 = 0;
    let mut x436: fiat_bp256_scalar_u1 = 0;
    let (x435, x436) = fiat_bp256_scalar_addcarryx_u32(x434, x430, x427);
    let mut x437: u32 = 0;
    let mut x438: fiat_bp256_scalar_u1 = 0;
    let (x437, x438) = fiat_bp256_scalar_addcarryx_u32(x436, x428, x425);
    let mut x439: u32 = 0;
    let mut x440: fiat_bp256_scalar_u1 = 0;
    let (x439, x440) = fiat_bp256_scalar_addcarryx_u32(x438, x426, x423);
    let mut x441: u32 = 0;
    let mut x442: fiat_bp256_scalar_u1 = 0;
    let (x441, x442) = fiat_bp256_scalar_addcarryx_u32(x440, x424, x421);
    let mut x443: u32 = 0;
    let mut x444: fiat_bp256_scalar_u1 = 0;
    let (x443, x444) = fiat_bp256_scalar_addcarryx_u32(x442, x422, x419);
    let mut x445: u32 = 0;
    let mut x446: fiat_bp256_scalar_u1 = 0;
    let (x445, x446) = fiat_bp256_scalar_addcarryx_u32(x444, x420, x417);
    let mut x447: u32 = 0;
    let mut x448: fiat_bp256_scalar_u1 = 0;
    let (x447, x448) = fiat_bp256_scalar_addcarryx_u32(0x0, x399, x431);
    let mut x449: u32 = 0;
    let mut x450: fiat_bp256_scalar_u1 = 0;
    let (x449, x450) = fiat_bp256_scalar_addcarryx_u32(x448, x401, x433);
    let mut x451: u32 = 0;
    let mut x452: fiat_bp256_scalar_u1 = 0;
    let (x451, x452) = fiat_bp256_scalar_addcarryx_u32(x450, x403, x435);
    let mut x453: u32 = 0;
    let mut x454: fiat_bp256_scalar_u1 = 0;
    let (x453, x454) = fiat_bp256_scalar_addcarryx_u32(x452, x405, x437);
    let mut x455: u32 = 0;
    let mut x456: fiat_bp256_scalar_u1 = 0;
    let (x455, x456) = fiat_bp256_scalar_addcarryx_u32(x454, x407, x439);
    let mut x457: u32 = 0;
    let mut x458: fiat_bp256_scalar_u1 = 0;
    let (x457, x458) = fiat_bp256_scalar_addcarryx_u32(x456, x409, x441);
    let mut x459: u32 = 0;
    let mut x460: fiat_bp256_scalar_u1 = 0;
    let (x459, x460) = fiat_bp256_scalar_addcarryx_u32(x458, x411, x443);
    let mut x461: u32 = 0;
    let mut x462: fiat_bp256_scalar_u1 = 0;
    let (x461, x462) = fiat_bp256_scalar_addcarryx_u32(x460, x413, x445);
    let mut x463: u32 = 0;
    let mut x464: u32 = 0;
    let (x463, x464) = fiat_bp256_scalar_mulx_u32(x5, 0xb25f1b9);
    let mut x465: u32 = 0;
    let mut x466: u32 = 0;
    let (x465, x466) = fiat_bp256_scalar_mulx_u32(x5, 0xc3236762);
    let mut x467: u32 = 0;
    let mut x468: u32 = 0;
    let (x467, x468) = fiat_bp256_scalar_mulx_u32(x5, 0x9b7f25e7);
    let mut x469: u32 = 0;
    let mut x470: u32 = 0;
    let (x469, x470) = fiat_bp256_scalar_mulx_u32(x5, 0x6c815cb0);
    let mut x471: u32 = 0;
    let mut x472: u32 = 0;
    let (x471, x472) = fiat_bp256_scalar_mulx_u32(x5, 0xf35d176a);
    let mut x473: u32 = 0;
    let mut x474: u32 = 0;
    let (x473, x474) = fiat_bp256_scalar_mulx_u32(x5, 0x1134e4a0);
    let mut x475: u32 = 0;
    let mut x476: u32 = 0;
    let (x475, x476) = fiat_bp256_scalar_mulx_u32(x5, 0xe1d8d8de);
    let mut x477: u32 = 0;
    let mut x478: u32 = 0;
    let (x477, x478) = fiat_bp256_scalar_mulx_u32(x5, 0x3312fca6);
    let mut x479: u32 = 0;
    let mut x480: fiat_bp256_scalar_u1 = 0;
    let (x479, x480) = fiat_bp256_scalar_addcarryx_u32(0x0, x478, x475);
    let mut x481: u32 = 0;
    let mut x482: fiat_bp256_scalar_u1 = 0;
    let (x481, x482) = fiat_bp256_scalar_addcarryx_u32(x480, x476, x473);
    let mut x483: u32 = 0;
    let mut x484: fiat_bp256_scalar_u1 = 0;
    let (x483, x484) = fiat_bp256_scalar_addcarryx_u32(x482, x474, x471);
    let mut x485: u32 = 0;
    let mut x486: fiat_bp256_scalar_u1 = 0;
    let (x485, x486) = fiat_bp256_scalar_addcarryx_u32(x484, x472, x469);
    let mut x487: u32 = 0;
    let mut x488: fiat_bp256_scalar_u1 = 0;
    let (x487, x488) = fiat_bp256_scalar_addcarryx_u32(x486, x470, x467);
    let mut x489: u32 = 0;
    let mut x490: fiat_bp256_scalar_u1 = 0;
    let (x489, x490) = fiat_bp256_scalar_addcarryx_u32(x488, x468, x465);
    let mut x491: u32 = 0;
    let mut x492: fiat_bp256_scalar_u1 = 0;
    let (x491, x492) = fiat_bp256_scalar_addcarryx_u32(x490, x466, x463);
    let mut x493: u32 = 0;
    let mut x494: fiat_bp256_scalar_u1 = 0;
    let (x493, x494) = fiat_bp256_scalar_addcarryx_u32(0x0, x449, x477);
    let mut x495: u32 = 0;
    let mut x496: fiat_bp256_scalar_u1 = 0;
    let (x495, x496) = fiat_bp256_scalar_addcarryx_u32(x494, x451, x479);
    let mut x497: u32 = 0;
    let mut x498: fiat_bp256_scalar_u1 = 0;
    let (x497, x498) = fiat_bp256_scalar_addcarryx_u32(x496, x453, x481);
    let mut x499: u32 = 0;
    let mut x500: fiat_bp256_scalar_u1 = 0;
    let (x499, x500) = fiat_bp256_scalar_addcarryx_u32(x498, x455, x483);
    let mut x501: u32 = 0;
    let mut x502: fiat_bp256_scalar_u1 = 0;
    let (x501, x502) = fiat_bp256_scalar_addcarryx_u32(x500, x457, x485);
    let mut x503: u32 = 0;
    let mut x504: fiat_bp256_scalar_u1 = 0;
    let (x503, x504) = fiat_bp256_scalar_addcarryx_u32(x502, x459, x487);
    let mut x505: u32 = 0;
    let mut x506: fiat_bp256_scalar_u1 = 0;
    let (x505, x506) = fiat_bp256_scalar_addcarryx_u32(x504, x461, x489);
    let mut x507: u32 = 0;
    let mut x508: fiat_bp256_scalar_u1 = 0;
    let (x507, x508) = fiat_bp256_scalar_addcarryx_u32(
        x506,
        (((x462 as u32) + ((x414 as u32) + ((x398 as u32) + x370))) + ((x446 as u32) + x418)),
        x491,
    );
    let mut x509: u32 = 0;
    let mut x510: u32 = 0;
    let (x509, x510) = fiat_bp256_scalar_mulx_u32(x493, 0xcbb40ee9);
    let mut x511: u32 = 0;
    let mut x512: u32 = 0;
    let (x511, x512) = fiat_bp256_scalar_mulx_u32(x509, 0xa9fb57db);
    let mut x513: u32 = 0;
    let mut x514: u32 = 0;
    let (x513, x514) = fiat_bp256_scalar_mulx_u32(x509, 0xa1eea9bc);
    let mut x515: u32 = 0;
    let mut x516: u32 = 0;
    let (x515, x516) = fiat_bp256_scalar_mulx_u32(x509, 0x3e660a90);
    let mut x517: u32 = 0;
    let mut x518: u32 = 0;
    let (x517, x518) = fiat_bp256_scalar_mulx_u32(x509, 0x9d838d71);
    let mut x519: u32 = 0;
    let mut x520: u32 = 0;
    let (x519, x520) = fiat_bp256_scalar_mulx_u32(x509, 0x8c397aa3);
    let mut x521: u32 = 0;
    let mut x522: u32 = 0;
    let (x521, x522) = fiat_bp256_scalar_mulx_u32(x509, 0xb561a6f7);
    let mut x523: u32 = 0;
    let mut x524: u32 = 0;
    let (x523, x524) = fiat_bp256_scalar_mulx_u32(x509, 0x901e0e82);
    let mut x525: u32 = 0;
    let mut x526: u32 = 0;
    let (x525, x526) = fiat_bp256_scalar_mulx_u32(x509, 0x974856a7);
    let mut x527: u32 = 0;
    let mut x528: fiat_bp256_scalar_u1 = 0;
    let (x527, x528) = fiat_bp256_scalar_addcarryx_u32(0x0, x526, x523);
    let mut x529: u32 = 0;
    let mut x530: fiat_bp256_scalar_u1 = 0;
    let (x529, x530) = fiat_bp256_scalar_addcarryx_u32(x528, x524, x521);
    let mut x531: u32 = 0;
    let mut x532: fiat_bp256_scalar_u1 = 0;
    let (x531, x532) = fiat_bp256_scalar_addcarryx_u32(x530, x522, x519);
    let mut x533: u32 = 0;
    let mut x534: fiat_bp256_scalar_u1 = 0;
    let (x533, x534) = fiat_bp256_scalar_addcarryx_u32(x532, x520, x517);
    let mut x535: u32 = 0;
    let mut x536: fiat_bp256_scalar_u1 = 0;
    let (x535, x536) = fiat_bp256_scalar_addcarryx_u32(x534, x518, x515);
    let mut x537: u32 = 0;
    let mut x538: fiat_bp256_scalar_u1 = 0;
    let (x537, x538) = fiat_bp256_scalar_addcarryx_u32(x536, x516, x513);
    let mut x539: u32 = 0;
    let mut x540: fiat_bp256_scalar_u1 = 0;
    let (x539, x540) = fiat_bp256_scalar_addcarryx_u32(x538, x514, x511);
    let mut x541: u32 = 0;
    let mut x542: fiat_bp256_scalar_u1 = 0;
    let (x541, x542) = fiat_bp256_scalar_addcarryx_u32(0x0, x493, x525);
    let mut x543: u32 = 0;
    let mut x544: fiat_bp256_scalar_u1 = 0;
    let (x543, x544) = fiat_bp256_scalar_addcarryx_u32(x542, x495, x527);
    let mut x545: u32 = 0;
    let mut x546: fiat_bp256_scalar_u1 = 0;
    let (x545, x546) = fiat_bp256_scalar_addcarryx_u32(x544, x497, x529);
    let mut x547: u32 = 0;
    let mut x548: fiat_bp256_scalar_u1 = 0;
    let (x547, x548) = fiat_bp256_scalar_addcarryx_u32(x546, x499, x531);
    let mut x549: u32 = 0;
    let mut x550: fiat_bp256_scalar_u1 = 0;
    let (x549, x550) = fiat_bp256_scalar_addcarryx_u32(x548, x501, x533);
    let mut x551: u32 = 0;
    let mut x552: fiat_bp256_scalar_u1 = 0;
    let (x551, x552) = fiat_bp256_scalar_addcarryx_u32(x550, x503, x535);
    let mut x553: u32 = 0;
    let mut x554: fiat_bp256_scalar_u1 = 0;
    let (x553, x554) = fiat_bp256_scalar_addcarryx_u32(x552, x505, x537);
    let mut x555: u32 = 0;
    let mut x556: fiat_bp256_scalar_u1 = 0;
    let (x555, x556) = fiat_bp256_scalar_addcarryx_u32(x554, x507, x539);
    let mut x557: u32 = 0;
    let mut x558: u32 = 0;
    let (x557, x558) = fiat_bp256_scalar_mulx_u32(x6, 0xb25f1b9);
    let mut x559: u32 = 0;
    let mut x560: u32 = 0;
    let (x559, x560) = fiat_bp256_scalar_mulx_u32(x6, 0xc3236762);
    let mut x561: u32 = 0;
    let mut x562: u32 = 0;
    let (x561, x562) = fiat_bp256_scalar_mulx_u32(x6, 0x9b7f25e7);
    let mut x563: u32 = 0;
    let mut x564: u32 = 0;
    let (x563, x564) = fiat_bp256_scalar_mulx_u32(x6, 0x6c815cb0);
    let mut x565: u32 = 0;
    let mut x566: u32 = 0;
    let (x565, x566) = fiat_bp256_scalar_mulx_u32(x6, 0xf35d176a);
    let mut x567: u32 = 0;
    let mut x568: u32 = 0;
    let (x567, x568) = fiat_bp256_scalar_mulx_u32(x6, 0x1134e4a0);
    let mut x569: u32 = 0;
    let mut x570: u32 = 0;
    let (x569, x570) = fiat_bp256_scalar_mulx_u32(x6, 0xe1d8d8de);
    let mut x571: u32 = 0;
    let mut x572: u32 = 0;
    let (x571, x572) = fiat_bp256_scalar_mulx_u32(x6, 0x3312fca6);
    let mut x573: u32 = 0;
    let mut x574: fiat_bp256_scalar_u1 = 0;
    let (x573, x574) = fiat_bp256_scalar_addcarryx_u32(0x0, x572, x569);
    let mut x575: u32 = 0;
    let mut x576: fiat_bp256_scalar_u1 = 0;
    let (x575, x576) = fiat_bp256_scalar_addcarryx_u32(x574, x570, x567);
    let mut x577: u32 = 0;
    let mut x578: fiat_bp256_scalar_u1 = 0;
    let (x577, x578) = fiat_bp256_scalar_addcarryx_u32(x576, x568, x565);
    let mut x579: u32 = 0;
    let mut x580: fiat_bp256_scalar_u1 = 0;
    let (x579, x580) = fiat_bp256_scalar_addcarryx_u32(x578, x566, x563);
    let mut x581: u32 = 0;
    let mut x582: fiat_bp256_scalar_u1 = 0;
    let (x581, x582) = fiat_bp256_scalar_addcarryx_u32(x580, x564, x561);
    let mut x583: u32 = 0;
    let mut x584: fiat_bp256_scalar_u1 = 0;
    let (x583, x584) = fiat_bp256_scalar_addcarryx_u32(x582, x562, x559);
    let mut x585: u32 = 0;
    let mut x586: fiat_bp256_scalar_u1 = 0;
    let (x585, x586) = fiat_bp256_scalar_addcarryx_u32(x584, x560, x557);
    let mut x587: u32 = 0;
    let mut x588: fiat_bp256_scalar_u1 = 0;
    let (x587, x588) = fiat_bp256_scalar_addcarryx_u32(0x0, x543, x571);
    let mut x589: u32 = 0;
    let mut x590: fiat_bp256_scalar_u1 = 0;
    let (x589, x590) = fiat_bp256_scalar_addcarryx_u32(x588, x545, x573);
    let mut x591: u32 = 0;
    let mut x592: fiat_bp256_scalar_u1 = 0;
    let (x591, x592) = fiat_bp256_scalar_addcarryx_u32(x590, x547, x575);
    let mut x593: u32 = 0;
    let mut x594: fiat_bp256_scalar_u1 = 0;
    let (x593, x594) = fiat_bp256_scalar_addcarryx_u32(x592, x549, x577);
    let mut x595: u32 = 0;
    let mut x596: fiat_bp256_scalar_u1 = 0;
    let (x595, x596) = fiat_bp256_scalar_addcarryx_u32(x594, x551, x579);
    let mut x597: u32 = 0;
    let mut x598: fiat_bp256_scalar_u1 = 0;
    let (x597, x598) = fiat_bp256_scalar_addcarryx_u32(x596, x553, x581);
    let mut x599: u32 = 0;
    let mut x600: fiat_bp256_scalar_u1 = 0;
    let (x599, x600) = fiat_bp256_scalar_addcarryx_u32(x598, x555, x583);
    let mut x601: u32 = 0;
    let mut x602: fiat_bp256_scalar_u1 = 0;
    let (x601, x602) = fiat_bp256_scalar_addcarryx_u32(
        x600,
        (((x556 as u32) + ((x508 as u32) + ((x492 as u32) + x464))) + ((x540 as u32) + x512)),
        x585,
    );
    let mut x603: u32 = 0;
    let mut x604: u32 = 0;
    let (x603, x604) = fiat_bp256_scalar_mulx_u32(x587, 0xcbb40ee9);
    let mut x605: u32 = 0;
    let mut x606: u32 = 0;
    let (x605, x606) = fiat_bp256_scalar_mulx_u32(x603, 0xa9fb57db);
    let mut x607: u32 = 0;
    let mut x608: u32 = 0;
    let (x607, x608) = fiat_bp256_scalar_mulx_u32(x603, 0xa1eea9bc);
    let mut x609: u32 = 0;
    let mut x610: u32 = 0;
    let (x609, x610) = fiat_bp256_scalar_mulx_u32(x603, 0x3e660a90);
    let mut x611: u32 = 0;
    let mut x612: u32 = 0;
    let (x611, x612) = fiat_bp256_scalar_mulx_u32(x603, 0x9d838d71);
    let mut x613: u32 = 0;
    let mut x614: u32 = 0;
    let (x613, x614) = fiat_bp256_scalar_mulx_u32(x603, 0x8c397aa3);
    let mut x615: u32 = 0;
    let mut x616: u32 = 0;
    let (x615, x616) = fiat_bp256_scalar_mulx_u32(x603, 0xb561a6f7);
    let mut x617: u32 = 0;
    let mut x618: u32 = 0;
    let (x617, x618) = fiat_bp256_scalar_mulx_u32(x603, 0x901e0e82);
    let mut x619: u32 = 0;
    let mut x620: u32 = 0;
    let (x619, x620) = fiat_bp256_scalar_mulx_u32(x603, 0x974856a7);
    let mut x621: u32 = 0;
    let mut x622: fiat_bp256_scalar_u1 = 0;
    let (x621, x622) = fiat_bp256_scalar_addcarryx_u32(0x0, x620, x617);
    let mut x623: u32 = 0;
    let mut x624: fiat_bp256_scalar_u1 = 0;
    let (x623, x624) = fiat_bp256_scalar_addcarryx_u32(x622, x618, x615);
    let mut x625: u32 = 0;
    let mut x626: fiat_bp256_scalar_u1 = 0;
    let (x625, x626) = fiat_bp256_scalar_addcarryx_u32(x624, x616, x613);
    let mut x627: u32 = 0;
    let mut x628: fiat_bp256_scalar_u1 = 0;
    let (x627, x628) = fiat_bp256_scalar_addcarryx_u32(x626, x614, x611);
    let mut x629: u32 = 0;
    let mut x630: fiat_bp256_scalar_u1 = 0;
    let (x629, x630) = fiat_bp256_scalar_addcarryx_u32(x628, x612, x609);
    let mut x631: u32 = 0;
    let mut x632: fiat_bp256_scalar_u1 = 0;
    let (x631, x632) = fiat_bp256_scalar_addcarryx_u32(x630, x610, x607);
    let mut x633: u32 = 0;
    let mut x634: fiat_bp256_scalar_u1 = 0;
    let (x633, x634) = fiat_bp256_scalar_addcarryx_u32(x632, x608, x605);
    let mut x635: u32 = 0;
    let mut x636: fiat_bp256_scalar_u1 = 0;
    let (x635, x636) = fiat_bp256_scalar_addcarryx_u32(0x0, x587, x619);
    let mut x637: u32 = 0;
    let mut x638: fiat_bp256_scalar_u1 = 0;
    let (x637, x638) = fiat_bp256_scalar_addcarryx_u32(x636, x589, x621);
    let mut x639: u32 = 0;
    let mut x640: fiat_bp256_scalar_u1 = 0;
    let (x639, x640) = fiat_bp256_scalar_addcarryx_u32(x638, x591, x623);
    let mut x641: u32 = 0;
    let mut x642: fiat_bp256_scalar_u1 = 0;
    let (x641, x642) = fiat_bp256_scalar_addcarryx_u32(x640, x593, x625);
    let mut x643: u32 = 0;
    let mut x644: fiat_bp256_scalar_u1 = 0;
    let (x643, x644) = fiat_bp256_scalar_addcarryx_u32(x642, x595, x627);
    let mut x645: u32 = 0;
    let mut x646: fiat_bp256_scalar_u1 = 0;
    let (x645, x646) = fiat_bp256_scalar_addcarryx_u32(x644, x597, x629);
    let mut x647: u32 = 0;
    let mut x648: fiat_bp256_scalar_u1 = 0;
    let (x647, x648) = fiat_bp256_scalar_addcarryx_u32(x646, x599, x631);
    let mut x649: u32 = 0;
    let mut x650: fiat_bp256_scalar_u1 = 0;
    let (x649, x650) = fiat_bp256_scalar_addcarryx_u32(x648, x601, x633);
    let mut x651: u32 = 0;
    let mut x652: u32 = 0;
    let (x651, x652) = fiat_bp256_scalar_mulx_u32(x7, 0xb25f1b9);
    let mut x653: u32 = 0;
    let mut x654: u32 = 0;
    let (x653, x654) = fiat_bp256_scalar_mulx_u32(x7, 0xc3236762);
    let mut x655: u32 = 0;
    let mut x656: u32 = 0;
    let (x655, x656) = fiat_bp256_scalar_mulx_u32(x7, 0x9b7f25e7);
    let mut x657: u32 = 0;
    let mut x658: u32 = 0;
    let (x657, x658) = fiat_bp256_scalar_mulx_u32(x7, 0x6c815cb0);
    let mut x659: u32 = 0;
    let mut x660: u32 = 0;
    let (x659, x660) = fiat_bp256_scalar_mulx_u32(x7, 0xf35d176a);
    let mut x661: u32 = 0;
    let mut x662: u32 = 0;
    let (x661, x662) = fiat_bp256_scalar_mulx_u32(x7, 0x1134e4a0);
    let mut x663: u32 = 0;
    let mut x664: u32 = 0;
    let (x663, x664) = fiat_bp256_scalar_mulx_u32(x7, 0xe1d8d8de);
    let mut x665: u32 = 0;
    let mut x666: u32 = 0;
    let (x665, x666) = fiat_bp256_scalar_mulx_u32(x7, 0x3312fca6);
    let mut x667: u32 = 0;
    let mut x668: fiat_bp256_scalar_u1 = 0;
    let (x667, x668) = fiat_bp256_scalar_addcarryx_u32(0x0, x666, x663);
    let mut x669: u32 = 0;
    let mut x670: fiat_bp256_scalar_u1 = 0;
    let (x669, x670) = fiat_bp256_scalar_addcarryx_u32(x668, x664, x661);
    let mut x671: u32 = 0;
    let mut x672: fiat_bp256_scalar_u1 = 0;
    let (x671, x672) = fiat_bp256_scalar_addcarryx_u32(x670, x662, x659);
    let mut x673: u32 = 0;
    let mut x674: fiat_bp256_scalar_u1 = 0;
    let (x673, x674) = fiat_bp256_scalar_addcarryx_u32(x672, x660, x657);
    let mut x675: u32 = 0;
    let mut x676: fiat_bp256_scalar_u1 = 0;
    let (x675, x676) = fiat_bp256_scalar_addcarryx_u32(x674, x658, x655);
    let mut x677: u32 = 0;
    let mut x678: fiat_bp256_scalar_u1 = 0;
    let (x677, x678) = fiat_bp256_scalar_addcarryx_u32(x676, x656, x653);
    let mut x679: u32 = 0;
    let mut x680: fiat_bp256_scalar_u1 = 0;
    let (x679, x680) = fiat_bp256_scalar_addcarryx_u32(x678, x654, x651);
    let mut x681: u32 = 0;
    let mut x682: fiat_bp256_scalar_u1 = 0;
    let (x681, x682) = fiat_bp256_scalar_addcarryx_u32(0x0, x637, x665);
    let mut x683: u32 = 0;
    let mut x684: fiat_bp256_scalar_u1 = 0;
    let (x683, x684) = fiat_bp256_scalar_addcarryx_u32(x682, x639, x667);
    let mut x685: u32 = 0;
    let mut x686: fiat_bp256_scalar_u1 = 0;
    let (x685, x686) = fiat_bp256_scalar_addcarryx_u32(x684, x641, x669);
    let mut x687: u32 = 0;
    let mut x688: fiat_bp256_scalar_u1 = 0;
    let (x687, x688) = fiat_bp256_scalar_addcarryx_u32(x686, x643, x671);
    let mut x689: u32 = 0;
    let mut x690: fiat_bp256_scalar_u1 = 0;
    let (x689, x690) = fiat_bp256_scalar_addcarryx_u32(x688, x645, x673);
    let mut x691: u32 = 0;
    let mut x692: fiat_bp256_scalar_u1 = 0;
    let (x691, x692) = fiat_bp256_scalar_addcarryx_u32(x690, x647, x675);
    let mut x693: u32 = 0;
    let mut x694: fiat_bp256_scalar_u1 = 0;
    let (x693, x694) = fiat_bp256_scalar_addcarryx_u32(x692, x649, x677);
    let mut x695: u32 = 0;
    let mut x696: fiat_bp256_scalar_u1 = 0;
    let (x695, x696) = fiat_bp256_scalar_addcarryx_u32(
        x694,
        (((x650 as u32) + ((x602 as u32) + ((x586 as u32) + x558))) + ((x634 as u32) + x606)),
        x679,
    );
    let mut x697: u32 = 0;
    let mut x698: u32 = 0;
    let (x697, x698) = fiat_bp256_scalar_mulx_u32(x681, 0xcbb40ee9);
    let mut x699: u32 = 0;
    let mut x700: u32 = 0;
    let (x699, x700) = fiat_bp256_scalar_mulx_u32(x697, 0xa9fb57db);
    let mut x701: u32 = 0;
    let mut x702: u32 = 0;
    let (x701, x702) = fiat_bp256_scalar_mulx_u32(x697, 0xa1eea9bc);
    let mut x703: u32 = 0;
    let mut x704: u32 = 0;
    let (x703, x704) = fiat_bp256_scalar_mulx_u32(x697, 0x3e660a90);
    let mut x705: u32 = 0;
    let mut x706: u32 = 0;
    let (x705, x706) = fiat_bp256_scalar_mulx_u32(x697, 0x9d838d71);
    let mut x707: u32 = 0;
    let mut x708: u32 = 0;
    let (x707, x708) = fiat_bp256_scalar_mulx_u32(x697, 0x8c397aa3);
    let mut x709: u32 = 0;
    let mut x710: u32 = 0;
    let (x709, x710) = fiat_bp256_scalar_mulx_u32(x697, 0xb561a6f7);
    let mut x711: u32 = 0;
    let mut x712: u32 = 0;
    let (x711, x712) = fiat_bp256_scalar_mulx_u32(x697, 0x901e0e82);
    let mut x713: u32 = 0;
    let mut x714: u32 = 0;
    let (x713, x714) = fiat_bp256_scalar_mulx_u32(x697, 0x974856a7);
    let mut x715: u32 = 0;
    let mut x716: fiat_bp256_scalar_u1 = 0;
    let (x715, x716) = fiat_bp256_scalar_addcarryx_u32(0x0, x714, x711);
    let mut x717: u32 = 0;
    let mut x718: fiat_bp256_scalar_u1 = 0;
    let (x717, x718) = fiat_bp256_scalar_addcarryx_u32(x716, x712, x709);
    let mut x719: u32 = 0;
    let mut x720: fiat_bp256_scalar_u1 = 0;
    let (x719, x720) = fiat_bp256_scalar_addcarryx_u32(x718, x710, x707);
    let mut x721: u32 = 0;
    let mut x722: fiat_bp256_scalar_u1 = 0;
    let (x721, x722) = fiat_bp256_scalar_addcarryx_u32(x720, x708, x705);
    let mut x723: u32 = 0;
    let mut x724: fiat_bp256_scalar_u1 = 0;
    let (x723, x724) = fiat_bp256_scalar_addcarryx_u32(x722, x706, x703);
    let mut x725: u32 = 0;
    let mut x726: fiat_bp256_scalar_u1 = 0;
    let (x725, x726) = fiat_bp256_scalar_addcarryx_u32(x724, x704, x701);
    let mut x727: u32 = 0;
    let mut x728: fiat_bp256_scalar_u1 = 0;
    let (x727, x728) = fiat_bp256_scalar_addcarryx_u32(x726, x702, x699);
    let mut x729: u32 = 0;
    let mut x730: fiat_bp256_scalar_u1 = 0;
    let (x729, x730) = fiat_bp256_scalar_addcarryx_u32(0x0, x681, x713);
    let mut x731: u32 = 0;
    let mut x732: fiat_bp256_scalar_u1 = 0;
    let (x731, x732) = fiat_bp256_scalar_addcarryx_u32(x730, x683, x715);
    let mut x733: u32 = 0;
    let mut x734: fiat_bp256_scalar_u1 = 0;
    let (x733, x734) = fiat_bp256_scalar_addcarryx_u32(x732, x685, x717);
    let mut x735: u32 = 0;
    let mut x736: fiat_bp256_scalar_u1 = 0;
    let (x735, x736) = fiat_bp256_scalar_addcarryx_u32(x734, x687, x719);
    let mut x737: u32 = 0;
    let mut x738: fiat_bp256_scalar_u1 = 0;
    let (x737, x738) = fiat_bp256_scalar_addcarryx_u32(x736, x689, x721);
    let mut x739: u32 = 0;
    let mut x740: fiat_bp256_scalar_u1 = 0;
    let (x739, x740) = fiat_bp256_scalar_addcarryx_u32(x738, x691, x723);
    let mut x741: u32 = 0;
    let mut x742: fiat_bp256_scalar_u1 = 0;
    let (x741, x742) = fiat_bp256_scalar_addcarryx_u32(x740, x693, x725);
    let mut x743: u32 = 0;
    let mut x744: fiat_bp256_scalar_u1 = 0;
    let (x743, x744) = fiat_bp256_scalar_addcarryx_u32(x742, x695, x727);
    let x745: u32 =
        (((x744 as u32) + ((x696 as u32) + ((x680 as u32) + x652))) + ((x728 as u32) + x700));
    let mut x746: u32 = 0;
    let mut x747: fiat_bp256_scalar_u1 = 0;
    let (x746, x747) = fiat_bp256_scalar_subborrowx_u32(0x0, x731, 0x974856a7);
    let mut x748: u32 = 0;
    let mut x749: fiat_bp256_scalar_u1 = 0;
    let (x748, x749) = fiat_bp256_scalar_subborrowx_u32(x747, x733, 0x901e0e82);
    let mut x750: u32 = 0;
    let mut x751: fiat_bp256_scalar_u1 = 0;
    let (x750, x751) = fiat_bp256_scalar_subborrowx_u32(x749, x735, 0xb561a6f7);
    let mut x752: u32 = 0;
    let mut x753: fiat_bp256_scalar_u1 = 0;
    let (x752, x753) = fiat_bp256_scalar_subborrowx_u32(x751, x737, 0x8c397aa3);
    let mut x754: u32 = 0;
    let mut x755: fiat_bp256_scalar_u1 = 0;
    let (x754, x755) = fiat_bp256_scalar_subborrowx_u32(x753, x739, 0x9d838d71);
    let mut x756: u32 = 0;
    let mut x757: fiat_bp256_scalar_u1 = 0;
    let (x756, x757) = fiat_bp256_scalar_subborrowx_u32(x755, x741, 0x3e660a90);
    let mut x758: u32 = 0;
    let mut x759: fiat_bp256_scalar_u1 = 0;
    let (x758, x759) = fiat_bp256_scalar_subborrowx_u32(x757, x743, 0xa1eea9bc);
    let mut x760: u32 = 0;
    let mut x761: fiat_bp256_scalar_u1 = 0;
    let (x760, x761) = fiat_bp256_scalar_subborrowx_u32(x759, x745, 0xa9fb57db);
    let mut x762: u32 = 0;
    let mut x763: fiat_bp256_scalar_u1 = 0;
    let (x762, x763) = fiat_bp256_scalar_subborrowx_u32(x761, (0x0 as u32), (0x0 as u32));
    let mut x764: u32 = 0;
    let (x764) = fiat_bp256_scalar_cmovznz_u32(x763, x746, x731);
    let mut x765: u32 = 0;
    let (x765) = fiat_bp256_scalar_cmovznz_u32(x763, x748, x733);
    let mut x766: u32 = 0;
    let (x766) = fiat_bp256_scalar_cmovznz_u32(x763, x750, x735);
    let mut x767: u32 = 0;
    let (x767) = fiat_bp256_scalar_cmovznz_u32(x763, x752, x737);
    let mut x768: u32 = 0;
    let (x768) = fiat_bp256_scalar_cmovznz_u32(x763, x754, x739);
    let mut x769: u32 = 0;
    let (x769) = fiat_bp256_scalar_cmovznz_u32(x763, x756, x741);
    let mut x770: u32 = 0;
    let (x770) = fiat_bp256_scalar_cmovznz_u32(x763, x758, x743);
    let mut x771: u32 = 0;
    let (x771) = fiat_bp256_scalar_cmovznz_u32(x763, x760, x745);
    out1[0] = x764;
    out1[1] = x765;
    out1[2] = x766;
    out1[3] = x767;
    out1[4] = x768;
    out1[5] = x769;
    out1[6] = x770;
    out1[7] = x771;
    out1
}
#[doc = " The function fiat_bp256_scalar_nonzero outputs a single non-zero word if the input is non-zero and zero otherwise."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   out1 = 0 ↔ eval (from_montgomery arg1) mod m = 0"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[inline]
pub const fn fiat_bp256_scalar_nonzero(arg1: &[u32; 8]) -> u32 {
    let mut out1: u32 = 0;
    let x1: u32 = ((arg1[0])
        | ((arg1[1])
            | ((arg1[2]) | ((arg1[3]) | ((arg1[4]) | ((arg1[5]) | ((arg1[6]) | (arg1[7]))))))));
    out1 = x1;
    out1
}
#[doc = " The function fiat_bp256_scalar_selectznz is a multi-limb conditional select."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   out1 = (if arg1 = 0 then arg2 else arg3)"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0x1]"]
#[doc = "   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[inline]
pub const fn fiat_bp256_scalar_selectznz(
    arg1: fiat_bp256_scalar_u1,
    arg2: &[u32; 8],
    arg3: &[u32; 8],
) -> [u32; 8] {
    let mut out1: [u32; 8] = [0; 8];
    let mut x1: u32 = 0;
    let (x1) = fiat_bp256_scalar_cmovznz_u32(arg1, (arg2[0]), (arg3[0]));
    let mut x2: u32 = 0;
    let (x2) = fiat_bp256_scalar_cmovznz_u32(arg1, (arg2[1]), (arg3[1]));
    let mut x3: u32 = 0;
    let (x3) = fiat_bp256_scalar_cmovznz_u32(arg1, (arg2[2]), (arg3[2]));
    let mut x4: u32 = 0;
    let (x4) = fiat_bp256_scalar_cmovznz_u32(arg1, (arg2[3]), (arg3[3]));
    let mut x5: u32 = 0;
    let (x5) = fiat_bp256_scalar_cmovznz_u32(arg1, (arg2[4]), (arg3[4]));
    let mut x6: u32 = 0;
    let (x6) = fiat_bp256_scalar_cmovznz_u32(arg1, (arg2[5]), (arg3[5]));
    let mut x7: u32 = 0;
    let (x7) = fiat_bp256_scalar_cmovznz_u32(arg1, (arg2[6]), (arg3[6]));
    let mut x8: u32 = 0;
    let (x8) = fiat_bp256_scalar_cmovznz_u32(arg1, (arg2[7]), (arg3[7]));
    out1[0] = x1;
    out1[1] = x2;
    out1[2] = x3;
    out1[3] = x4;
    out1[4] = x5;
    out1[5] = x6;
    out1[6] = x7;
    out1[7] = x8;
    out1
}
#[doc = " The function fiat_bp256_scalar_to_bytes serializes a field element NOT in the Montgomery domain to bytes in little-endian order."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   out1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..31]"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]"]
#[inline]
pub const fn fiat_bp256_scalar_to_bytes(arg1: &[u32; 8]) -> [u8; 32] {
    let mut out1: [u8; 32] = [0; 32];
    let x1: u32 = (arg1[7]);
    let x2: u32 = (arg1[6]);
    let x3: u32 = (arg1[5]);
    let x4: u32 = (arg1[4]);
    let x5: u32 = (arg1[3]);
    let x6: u32 = (arg1[2]);
    let x7: u32 = (arg1[1]);
    let x8: u32 = (arg1[0]);
    let x9: u8 = ((x8 & (0xff as u32)) as u8);
    let x10: u32 = (x8 >> 8);
    let x11: u8 = ((x10 & (0xff as u32)) as u8);
    let x12: u32 = (x10 >> 8);
    let x13: u8 = ((x12 & (0xff as u32)) as u8);
    let x14: u8 = ((x12 >> 8) as u8);
    let x15: u8 = ((x7 & (0xff as u32)) as u8);
    let x16: u32 = (x7 >> 8);
    let x17: u8 = ((x16 & (0xff as u32)) as u8);
    let x18: u32 = (x16 >> 8);
    let x19: u8 = ((x18 & (0xff as u32)) as u8);
    let x20: u8 = ((x18 >> 8) as u8);
    let x21: u8 = ((x6 & (0xff as u32)) as u8);
    let x22: u32 = (x6 >> 8);
    let x23: u8 = ((x22 & (0xff as u32)) as u8);
    let x24: u32 = (x22 >> 8);
    let x25: u8 = ((x24 & (0xff as u32)) as u8);
    let x26: u8 = ((x24 >> 8) as u8);
    let x27: u8 = ((x5 & (0xff as u32)) as u8);
    let x28: u32 = (x5 >> 8);
    let x29: u8 = ((x28 & (0xff as u32)) as u8);
    let x30: u32 = (x28 >> 8);
    let x31: u8 = ((x30 & (0xff as u32)) as u8);
    let x32: u8 = ((x30 >> 8) as u8);
    let x33: u8 = ((x4 & (0xff as u32)) as u8);
    let x34: u32 = (x4 >> 8);
    let x35: u8 = ((x34 & (0xff as u32)) as u8);
    let x36: u32 = (x34 >> 8);
    let x37: u8 = ((x36 & (0xff as u32)) as u8);
    let x38: u8 = ((x36 >> 8) as u8);
    let x39: u8 = ((x3 & (0xff as u32)) as u8);
    let x40: u32 = (x3 >> 8);
    let x41: u8 = ((x40 & (0xff as u32)) as u8);
    let x42: u32 = (x40 >> 8);
    let x43: u8 = ((x42 & (0xff as u32)) as u8);
    let x44: u8 = ((x42 >> 8) as u8);
    let x45: u8 = ((x2 & (0xff as u32)) as u8);
    let x46: u32 = (x2 >> 8);
    let x47: u8 = ((x46 & (0xff as u32)) as u8);
    let x48: u32 = (x46 >> 8);
    let x49: u8 = ((x48 & (0xff as u32)) as u8);
    let x50: u8 = ((x48 >> 8) as u8);
    let x51: u8 = ((x1 & (0xff as u32)) as u8);
    let x52: u32 = (x1 >> 8);
    let x53: u8 = ((x52 & (0xff as u32)) as u8);
    let x54: u32 = (x52 >> 8);
    let x55: u8 = ((x54 & (0xff as u32)) as u8);
    let x56: u8 = ((x54 >> 8) as u8);
    out1[0] = x9;
    out1[1] = x11;
    out1[2] = x13;
    out1[3] = x14;
    out1[4] = x15;
    out1[5] = x17;
    out1[6] = x19;
    out1[7] = x20;
    out1[8] = x21;
    out1[9] = x23;
    out1[10] = x25;
    out1[11] = x26;
    out1[12] = x27;
    out1[13] = x29;
    out1[14] = x31;
    out1[15] = x32;
    out1[16] = x33;
    out1[17] = x35;
    out1[18] = x37;
    out1[19] = x38;
    out1[20] = x39;
    out1[21] = x41;
    out1[22] = x43;
    out1[23] = x44;
    out1[24] = x45;
    out1[25] = x47;
    out1[26] = x49;
    out1[27] = x50;
    out1[28] = x51;
    out1[29] = x53;
    out1[30] = x55;
    out1[31] = x56;
    out1
}
#[doc = " The function fiat_bp256_scalar_from_bytes deserializes a field element NOT in the Montgomery domain from bytes in little-endian order."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ bytes_eval arg1 < m"]
#[doc = " Postconditions:"]
#[doc = "   eval out1 mod m = bytes_eval arg1 mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff]]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[inline]
pub const fn fiat_bp256_scalar_from_bytes(arg1: &[u8; 32]) -> [u32; 8] {
    let mut out1: [u32; 8] = [0; 8];
    let x1: u32 = (((arg1[31]) as u32) << 24);
    let x2: u32 = (((arg1[30]) as u32) << 16);
    let x3: u32 = (((arg1[29]) as u32) << 8);
    let x4: u8 = (arg1[28]);
    let x5: u32 = (((arg1[27]) as u32) << 24);
    let x6: u32 = (((arg1[26]) as u32) << 16);
    let x7: u32 = (((arg1[25]) as u32) << 8);
    let x8: u8 = (arg1[24]);
    let x9: u32 = (((arg1[23]) as u32) << 24);
    let x10: u32 = (((arg1[22]) as u32) << 16);
    let x11: u32 = (((arg1[21]) as u32) << 8);
    let x12: u8 = (arg1[20]);
    let x13: u32 = (((arg1[19]) as u32) << 24);
    let x14: u32 = (((arg1[18]) as u32) << 16);
    let x15: u32 = (((arg1[17]) as u32) << 8);
    let x16: u8 = (arg1[16]);
    let x17: u32 = (((arg1[15]) as u32) << 24);
    let x18: u32 = (((arg1[14]) as u32) << 16);
    let x19: u32 = (((arg1[13]) as u32) << 8);
    let x20: u8 = (arg1[12]);
    let x21: u32 = (((arg1[11]) as u32) << 24);
    let x22: u32 = (((arg1[10]) as u32) << 16);
    let x23: u32 = (((arg1[9]) as u32) << 8);
    let x24: u8 = (arg1[8]);
    let x25: u32 = (((arg1[7]) as u32) << 24);
    let x26: u32 = (((arg1[6]) as u32) << 16);
    let x27: u32 = (((arg1[5]) as u32) << 8);
    let x28: u8 = (arg1[4]);
    let x29: u32 = (((arg1[3]) as u32) << 24);
    let x30: u32 = (((arg1[2]) as u32) << 16);
    let x31: u32 = (((arg1[1]) as u32) << 8);
    let x32: u8 = (arg1[0]);
    let x33: u32 = (x31 + (x32 as u32));
    let x34: u32 = (x30 + x33);
    let x35: u32 = (x29 + x34);
    let x36: u32 = (x27 + (x28 as u32));
    let x37: u32 = (x26 + x36);
    let x38: u32 = (x25 + x37);
    let x39: u32 = (x23 + (x24 as u32));
    let x40: u32 = (x22 + x39);
    let x41: u32 = (x21 + x40);
    let x42: u32 = (x19 + (x20 as u32));
    let x43: u32 = (x18 + x42);
    let x44: u32 = (x17 + x43);
    let x45: u32 = (x15 + (x16 as u32));
    let x46: u32 = (x14 + x45);
    let x47: u32 = (x13 + x46);
    let x48: u32 = (x11 + (x12 as u32));
    let x49: u32 = (x10 + x48);
    let x50: u32 = (x9 + x49);
    let x51: u32 = (x7 + (x8 as u32));
    let x52: u32 = (x6 + x51);
    let x53: u32 = (x5 + x52);
    let x54: u32 = (x3 + (x4 as u32));
    let x55: u32 = (x2 + x54);
    let x56: u32 = (x1 + x55);
    out1[0] = x35;
    out1[1] = x38;
    out1[2] = x41;
    out1[3] = x44;
    out1[4] = x47;
    out1[5] = x50;
    out1[6] = x53;
    out1[7] = x56;
    out1
}
#[doc = " The function fiat_bp256_scalar_set_one returns the field element one in the Montgomery domain."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) mod m = 1 mod m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[inline]
pub const fn fiat_bp256_scalar_set_one() -> fiat_bp256_scalar_montgomery_domain_field_element {
    let mut out1: fiat_bp256_scalar_montgomery_domain_field_element = [0; 8];
    out1[0] = 0x68b7a959;
    out1[1] = 0x6fe1f17d;
    out1[2] = 0x4a9e5908;
    out1[3] = 0x73c6855c;
    out1[4] = 0x627c728e;
    out1[5] = 0xc199f56f;
    out1[6] = 0x5e115643;
    out1[7] = 0x5604a824;
    out1
}
#[doc = " The function fiat_bp256_scalar_msat returns the saturated representation of the prime modulus."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   twos_complement_eval out1 = m"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[inline]
pub const fn fiat_bp256_scalar_msat() -> [u32; 9] {
    let mut out1: [u32; 9] = [0; 9];
    out1[0] = 0x974856a7;
    out1[1] = 0x901e0e82;
    out1[2] = 0xb561a6f7;
    out1[3] = 0x8c397aa3;
    out1[4] = 0x9d838d71;
    out1[5] = 0x3e660a90;
    out1[6] = 0xa1eea9bc;
    out1[7] = 0xa9fb57db;
    out1[8] = (0x0 as u32);
    out1
}
#[doc = " The function fiat_bp256_scalar_divstep computes a divstep."]
#[doc = ""]
#[doc = " Preconditions:"]
#[doc = "   0 ≤ eval arg4 < m"]
#[doc = "   0 ≤ eval arg5 < m"]
#[doc = " Postconditions:"]
#[doc = "   out1 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then 1 - arg1 else 1 + arg1)"]
#[doc = "   twos_complement_eval out2 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then twos_complement_eval arg3 else twos_complement_eval arg2)"]
#[doc = "   twos_complement_eval out3 = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then ⌊(twos_complement_eval arg3 - twos_complement_eval arg2) / 2⌋ else ⌊(twos_complement_eval arg3 + (twos_complement_eval arg3 mod 2) * twos_complement_eval arg2) / 2⌋)"]
#[doc = "   eval (from_montgomery out4) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (2 * eval (from_montgomery arg5)) mod m else (2 * eval (from_montgomery arg4)) mod m)"]
#[doc = "   eval (from_montgomery out5) mod m = (if 0 < arg1 ∧ (twos_complement_eval arg3) is odd then (eval (from_montgomery arg4) - eval (from_montgomery arg4)) mod m else (eval (from_montgomery arg5) + (twos_complement_eval arg3 mod 2) * eval (from_montgomery arg4)) mod m)"]
#[doc = "   0 ≤ eval out5 < m"]
#[doc = "   0 ≤ eval out5 < m"]
#[doc = "   0 ≤ eval out2 < m"]
#[doc = "   0 ≤ eval out3 < m"]
#[doc = ""]
#[doc = " Input Bounds:"]
#[doc = "   arg1: [0x0 ~> 0xffffffff]"]
#[doc = "   arg2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   arg3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   arg4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   arg5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = " Output Bounds:"]
#[doc = "   out1: [0x0 ~> 0xffffffff]"]
#[doc = "   out2: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   out3: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   out4: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[doc = "   out5: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[inline]
pub const fn fiat_bp256_scalar_divstep(
    arg1: u32,
    arg2: &[u32; 9],
    arg3: &[u32; 9],
    arg4: &[u32; 8],
    arg5: &[u32; 8],
) -> (u32, [u32; 9], [u32; 9], [u32; 8], [u32; 8]) {
    let mut out1: u32 = 0;
    let mut out2: [u32; 9] = [0; 9];
    let mut out3: [u32; 9] = [0; 9];
    let mut out4: [u32; 8] = [0; 8];
    let mut out5: [u32; 8] = [0; 8];
    let mut x1: u32 = 0;
    let mut x2: fiat_bp256_scalar_u1 = 0;
    let (x1, x2) = fiat_bp256_scalar_addcarryx_u32(0x0, (!arg1), (0x1 as u32));
    let x3: fiat_bp256_scalar_u1 = (((x1 >> 31) as fiat_bp256_scalar_u1)
        & (((arg3[0]) & (0x1 as u32)) as fiat_bp256_scalar_u1));
    let mut x4: u32 = 0;
    let mut x5: fiat_bp256_scalar_u1 = 0;
    let (x4, x5) = fiat_bp256_scalar_addcarryx_u32(0x0, (!arg1), (0x1 as u32));
    let mut x6: u32 = 0;
    let (x6) = fiat_bp256_scalar_cmovznz_u32(x3, arg1, x4);
    let mut x7: u32 = 0;
    let (x7) = fiat_bp256_scalar_cmovznz_u32(x3, (arg2[0]), (arg3[0]));
    let mut x8: u32 = 0;
    let (x8) = fiat_bp256_scalar_cmovznz_u32(x3, (arg2[1]), (arg3[1]));
    let mut x9: u32 = 0;
    let (x9) = fiat_bp256_scalar_cmovznz_u32(x3, (arg2[2]), (arg3[2]));
    let mut x10: u32 = 0;
    let (x10) = fiat_bp256_scalar_cmovznz_u32(x3, (arg2[3]), (arg3[3]));
    let mut x11: u32 = 0;
    let (x11) = fiat_bp256_scalar_cmovznz_u32(x3, (arg2[4]), (arg3[4]));
    let mut x12: u32 = 0;
    let (x12) = fiat_bp256_scalar_cmovznz_u32(x3, (arg2[5]), (arg3[5]));
    let mut x13: u32 = 0;
    let (x13) = fiat_bp256_scalar_cmovznz_u32(x3, (arg2[6]), (arg3[6]));
    let mut x14: u32 = 0;
    let (x14) = fiat_bp256_scalar_cmovznz_u32(x3, (arg2[7]), (arg3[7]));
    let mut x15: u32 = 0;
    let (x15) = fiat_bp256_scalar_cmovznz_u32(x3, (arg2[8]), (arg3[8]));
    let mut x16: u32 = 0;
    let mut x17: fiat_bp256_scalar_u1 = 0;
    let (x16, x17) = fiat_bp256_scalar_addcarryx_u32(0x0, (0x1 as u32), (!(arg2[0])));
    let mut x18: u32 = 0;
    let mut x19: fiat_bp256_scalar_u1 = 0;
    let (x18, x19) = fiat_bp256_scalar_addcarryx_u32(x17, (0x0 as u32), (!(arg2[1])));
    let mut x20: u32 = 0;
    let mut x21: fiat_bp256_scalar_u1 = 0;
    let (x20, x21) = fiat_bp256_scalar_addcarryx_u32(x19, (0x0 as u32), (!(arg2[2])));
    let mut x22: u32 = 0;
    let mut x23: fiat_bp256_scalar_u1 = 0;
    let (x22, x23) = fiat_bp256_scalar_addcarryx_u32(x21, (0x0 as u32), (!(arg2[3])));
    let mut x24: u32 = 0;
    let mut x25: fiat_bp256_scalar_u1 = 0;
    let (x24, x25) = fiat_bp256_scalar_addcarryx_u32(x23, (0x0 as u32), (!(arg2[4])));
    let mut x26: u32 = 0;
    let mut x27: fiat_bp256_scalar_u1 = 0;
    let (x26, x27) = fiat_bp256_scalar_addcarryx_u32(x25, (0x0 as u32), (!(arg2[5])));
    let mut x28: u32 = 0;
    let mut x29: fiat_bp256_scalar_u1 = 0;
    let (x28, x29) = fiat_bp256_scalar_addcarryx_u32(x27, (0x0 as u32), (!(arg2[6])));
    let mut x30: u32 = 0;
    let mut x31: fiat_bp256_scalar_u1 = 0;
    let (x30, x31) = fiat_bp256_scalar_addcarryx_u32(x29, (0x0 as u32), (!(arg2[7])));
    let mut x32: u32 = 0;
    let mut x33: fiat_bp256_scalar_u1 = 0;
    let (x32, x33) = fiat_bp256_scalar_addcarryx_u32(x31, (0x0 as u32), (!(arg2[8])));
    let mut x34: u32 = 0;
    let (x34) = fiat_bp256_scalar_cmovznz_u32(x3, (arg3[0]), x16);
    let mut x35: u32 = 0;
    let (x35) = fiat_bp256_scalar_cmovznz_u32(x3, (arg3[1]), x18);
    let mut x36: u32 = 0;
    let (x36) = fiat_bp256_scalar_cmovznz_u32(x3, (arg3[2]), x20);
    let mut x37: u32 = 0;
    let (x37) = fiat_bp256_scalar_cmovznz_u32(x3, (arg3[3]), x22);
    let mut x38: u32 = 0;
    let (x38) = fiat_bp256_scalar_cmovznz_u32(x3, (arg3[4]), x24);
    let mut x39: u32 = 0;
    let (x39) = fiat_bp256_scalar_cmovznz_u32(x3, (arg3[5]), x26);
    let mut x40: u32 = 0;
    let (x40) = fiat_bp256_scalar_cmovznz_u32(x3, (arg3[6]), x28);
    let mut x41: u32 = 0;
    let (x41) = fiat_bp256_scalar_cmovznz_u32(x3, (arg3[7]), x30);
    let mut x42: u32 = 0;
    let (x42) = fiat_bp256_scalar_cmovznz_u32(x3, (arg3[8]), x32);
    let mut x43: u32 = 0;
    let (x43) = fiat_bp256_scalar_cmovznz_u32(x3, (arg4[0]), (arg5[0]));
    let mut x44: u32 = 0;
    let (x44) = fiat_bp256_scalar_cmovznz_u32(x3, (arg4[1]), (arg5[1]));
    let mut x45: u32 = 0;
    let (x45) = fiat_bp256_scalar_cmovznz_u32(x3, (arg4[2]), (arg5[2]));
    let mut x46: u32 = 0;
    let (x46) = fiat_bp256_scalar_cmovznz_u32(x3, (arg4[3]), (arg5[3]));
    let mut x47: u32 = 0;
    let (x47) = fiat_bp256_scalar_cmovznz_u32(x3, (arg4[4]), (arg5[4]));
    let mut x48: u32 = 0;
    let (x48) = fiat_bp256_scalar_cmovznz_u32(x3, (arg4[5]), (arg5[5]));
    let mut x49: u32 = 0;
    let (x49) = fiat_bp256_scalar_cmovznz_u32(x3, (arg4[6]), (arg5[6]));
    let mut x50: u32 = 0;
    let (x50) = fiat_bp256_scalar_cmovznz_u32(x3, (arg4[7]), (arg5[7]));
    let mut x51: u32 = 0;
    let mut x52: fiat_bp256_scalar_u1 = 0;
    let (x51, x52) = fiat_bp256_scalar_addcarryx_u32(0x0, x43, x43);
    let mut x53: u32 = 0;
    let mut x54: fiat_bp256_scalar_u1 = 0;
    let (x53, x54) = fiat_bp256_scalar_addcarryx_u32(x52, x44, x44);
    let mut x55: u32 = 0;
    let mut x56: fiat_bp256_scalar_u1 = 0;
    let (x55, x56) = fiat_bp256_scalar_addcarryx_u32(x54, x45, x45);
    let mut x57: u32 = 0;
    let mut x58: fiat_bp256_scalar_u1 = 0;
    let (x57, x58) = fiat_bp256_scalar_addcarryx_u32(x56, x46, x46);
    let mut x59: u32 = 0;
    let mut x60: fiat_bp256_scalar_u1 = 0;
    let (x59, x60) = fiat_bp256_scalar_addcarryx_u32(x58, x47, x47);
    let mut x61: u32 = 0;
    let mut x62: fiat_bp256_scalar_u1 = 0;
    let (x61, x62) = fiat_bp256_scalar_addcarryx_u32(x60, x48, x48);
    let mut x63: u32 = 0;
    let mut x64: fiat_bp256_scalar_u1 = 0;
    let (x63, x64) = fiat_bp256_scalar_addcarryx_u32(x62, x49, x49);
    let mut x65: u32 = 0;
    let mut x66: fiat_bp256_scalar_u1 = 0;
    let (x65, x66) = fiat_bp256_scalar_addcarryx_u32(x64, x50, x50);
    let mut x67: u32 = 0;
    let mut x68: fiat_bp256_scalar_u1 = 0;
    let (x67, x68) = fiat_bp256_scalar_subborrowx_u32(0x0, x51, 0x974856a7);
    let mut x69: u32 = 0;
    let mut x70: fiat_bp256_scalar_u1 = 0;
    let (x69, x70) = fiat_bp256_scalar_subborrowx_u32(x68, x53, 0x901e0e82);
    let mut x71: u32 = 0;
    let mut x72: fiat_bp256_scalar_u1 = 0;
    let (x71, x72) = fiat_bp256_scalar_subborrowx_u32(x70, x55, 0xb561a6f7);
    let mut x73: u32 = 0;
    let mut x74: fiat_bp256_scalar_u1 = 0;
    let (x73, x74) = fiat_bp256_scalar_subborrowx_u32(x72, x57, 0x8c397aa3);
    let mut x75: u32 = 0;
    let mut x76: fiat_bp256_scalar_u1 = 0;
    let (x75, x76) = fiat_bp256_scalar_subborrowx_u32(x74, x59, 0x9d838d71);
    let mut x77: u32 = 0;
    let mut x78: fiat_bp256_scalar_u1 = 0;
    let (x77, x78) = fiat_bp256_scalar_subborrowx_u32(x76, x61, 0x3e660a90);
    let mut x79: u32 = 0;
    let mut x80: fiat_bp256_scalar_u1 = 0;
    let (x79, x80) = fiat_bp256_scalar_subborrowx_u32(x78, x63, 0xa1eea9bc);
    let mut x81: u32 = 0;
    let mut x82: fiat_bp256_scalar_u1 = 0;
    let (x81, x82) = fiat_bp256_scalar_subborrowx_u32(x80, x65, 0xa9fb57db);
    let mut x83: u32 = 0;
    let mut x84: fiat_bp256_scalar_u1 = 0;
    let (x83, x84) = fiat_bp256_scalar_subborrowx_u32(x82, (x66 as u32), (0x0 as u32));
    let x85: u32 = (arg4[7]);
    let x86: u32 = (arg4[6]);
    let x87: u32 = (arg4[5]);
    let x88: u32 = (arg4[4]);
    let x89: u32 = (arg4[3]);
    let x90: u32 = (arg4[2]);
    let x91: u32 = (arg4[1]);
    let x92: u32 = (arg4[0]);
    let mut x93: u32 = 0;
    let mut x94: fiat_bp256_scalar_u1 = 0;
    let (x93, x94) = fiat_bp256_scalar_subborrowx_u32(0x0, (0x0 as u32), x92);
    let mut x95: u32 = 0;
    let mut x96: fiat_bp256_scalar_u1 = 0;
    let (x95, x96) = fiat_bp256_scalar_subborrowx_u32(x94, (0x0 as u32), x91);
    let mut x97: u32 = 0;
    let mut x98: fiat_bp256_scalar_u1 = 0;
    let (x97, x98) = fiat_bp256_scalar_subborrowx_u32(x96, (0x0 as u32), x90);
    let mut x99: u32 = 0;
    let mut x100: fiat_bp256_scalar_u1 = 0;
    let (x99, x100) = fiat_bp256_scalar_subborrowx_u32(x98, (0x0 as u32), x89);
    let mut x101: u32 = 0;
    let mut x102: fiat_bp256_scalar_u1 = 0;
    let (x101, x102) = fiat_bp256_scalar_subborrowx_u32(x100, (0x0 as u32), x88);
    let mut x103: u32 = 0;
    let mut x104: fiat_bp256_scalar_u1 = 0;
    let (x103, x104) = fiat_bp256_scalar_subborrowx_u32(x102, (0x0 as u32), x87);
    let mut x105: u32 = 0;
    let mut x106: fiat_bp256_scalar_u1 = 0;
    let (x105, x106) = fiat_bp256_scalar_subborrowx_u32(x104, (0x0 as u32), x86);
    let mut x107: u32 = 0;
    let mut x108: fiat_bp256_scalar_u1 = 0;
    let (x107, x108) = fiat_bp256_scalar_subborrowx_u32(x106, (0x0 as u32), x85);
    let mut x109: u32 = 0;
    let (x109) = fiat_bp256_scalar_cmovznz_u32(x108, (0x0 as u32), 0xffffffff);
    let mut x110: u32 = 0;
    let mut x111: fiat_bp256_scalar_u1 = 0;
    let (x110, x111) = fiat_bp256_scalar_addcarryx_u32(0x0, x93, (x109 & 0x974856a7));
    let mut x112: u32 = 0;
    let mut x113: fiat_bp256_scalar_u1 = 0;
    let (x112, x113) = fiat_bp256_scalar_addcarryx_u32(x111, x95, (x109 & 0x901e0e82));
    let mut x114: u32 = 0;
    let mut x115: fiat_bp256_scalar_u1 = 0;
    let (x114, x115) = fiat_bp256_scalar_addcarryx_u32(x113, x97, (x109 & 0xb561a6f7));
    let mut x116: u32 = 0;
    let mut x117: fiat_bp256_scalar_u1 = 0;
    let (x116, x117) = fiat_bp256_scalar_addcarryx_u32(x115, x99, (x109 & 0x8c397aa3));
    let mut x118: u32 = 0;
    let mut x119: fiat_bp256_scalar_u1 = 0;
    let (x118, x119) = fiat_bp256_scalar_addcarryx_u32(x117, x101, (x109 & 0x9d838d71));
    let mut x120: u32 = 0;
    let mut x121: fiat_bp256_scalar_u1 = 0;
    let (x120, x121) = fiat_bp256_scalar_addcarryx_u32(x119, x103, (x109 & 0x3e660a90));
    let mut x122: u32 = 0;
    let mut x123: fiat_bp256_scalar_u1 = 0;
    let (x122, x123) = fiat_bp256_scalar_addcarryx_u32(x121, x105, (x109 & 0xa1eea9bc));
    let mut x124: u32 = 0;
    let mut x125: fiat_bp256_scalar_u1 = 0;
    let (x124, x125) = fiat_bp256_scalar_addcarryx_u32(x123, x107, (x109 & 0xa9fb57db));
    let mut x126: u32 = 0;
    let (x126) = fiat_bp256_scalar_cmovznz_u32(x3, (arg5[0]), x110);
    let mut x127: u32 = 0;
    let (x127) = fiat_bp256_scalar_cmovznz_u32(x3, (arg5[1]), x112);
    let mut x128: u32 = 0;
    let (x128) = fiat_bp256_scalar_cmovznz_u32(x3, (arg5[2]), x114);
    let mut x129: u32 = 0;
    let (x129) = fiat_bp256_scalar_cmovznz_u32(x3, (arg5[3]), x116);
    let mut x130: u32 = 0;
    let (x130) = fiat_bp256_scalar_cmovznz_u32(x3, (arg5[4]), x118);
    let mut x131: u32 = 0;
    let (x131) = fiat_bp256_scalar_cmovznz_u32(x3, (arg5[5]), x120);
    let mut x132: u32 = 0;
    let (x132) = fiat_bp256_scalar_cmovznz_u32(x3, (arg5[6]), x122);
    let mut x133: u32 = 0;
    let (x133) = fiat_bp256_scalar_cmovznz_u32(x3, (arg5[7]), x124);
    let x134: fiat_bp256_scalar_u1 = ((x34 & (0x1 as u32)) as fiat_bp256_scalar_u1);
    let mut x135: u32 = 0;
    let (x135) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x7);
    let mut x136: u32 = 0;
    let (x136) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x8);
    let mut x137: u32 = 0;
    let (x137) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x9);
    let mut x138: u32 = 0;
    let (x138) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x10);
    let mut x139: u32 = 0;
    let (x139) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x11);
    let mut x140: u32 = 0;
    let (x140) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x12);
    let mut x141: u32 = 0;
    let (x141) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x13);
    let mut x142: u32 = 0;
    let (x142) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x14);
    let mut x143: u32 = 0;
    let (x143) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x15);
    let mut x144: u32 = 0;
    let mut x145: fiat_bp256_scalar_u1 = 0;
    let (x144, x145) = fiat_bp256_scalar_addcarryx_u32(0x0, x34, x135);
    let mut x146: u32 = 0;
    let mut x147: fiat_bp256_scalar_u1 = 0;
    let (x146, x147) = fiat_bp256_scalar_addcarryx_u32(x145, x35, x136);
    let mut x148: u32 = 0;
    let mut x149: fiat_bp256_scalar_u1 = 0;
    let (x148, x149) = fiat_bp256_scalar_addcarryx_u32(x147, x36, x137);
    let mut x150: u32 = 0;
    let mut x151: fiat_bp256_scalar_u1 = 0;
    let (x150, x151) = fiat_bp256_scalar_addcarryx_u32(x149, x37, x138);
    let mut x152: u32 = 0;
    let mut x153: fiat_bp256_scalar_u1 = 0;
    let (x152, x153) = fiat_bp256_scalar_addcarryx_u32(x151, x38, x139);
    let mut x154: u32 = 0;
    let mut x155: fiat_bp256_scalar_u1 = 0;
    let (x154, x155) = fiat_bp256_scalar_addcarryx_u32(x153, x39, x140);
    let mut x156: u32 = 0;
    let mut x157: fiat_bp256_scalar_u1 = 0;
    let (x156, x157) = fiat_bp256_scalar_addcarryx_u32(x155, x40, x141);
    let mut x158: u32 = 0;
    let mut x159: fiat_bp256_scalar_u1 = 0;
    let (x158, x159) = fiat_bp256_scalar_addcarryx_u32(x157, x41, x142);
    let mut x160: u32 = 0;
    let mut x161: fiat_bp256_scalar_u1 = 0;
    let (x160, x161) = fiat_bp256_scalar_addcarryx_u32(x159, x42, x143);
    let mut x162: u32 = 0;
    let (x162) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x43);
    let mut x163: u32 = 0;
    let (x163) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x44);
    let mut x164: u32 = 0;
    let (x164) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x45);
    let mut x165: u32 = 0;
    let (x165) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x46);
    let mut x166: u32 = 0;
    let (x166) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x47);
    let mut x167: u32 = 0;
    let (x167) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x48);
    let mut x168: u32 = 0;
    let (x168) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x49);
    let mut x169: u32 = 0;
    let (x169) = fiat_bp256_scalar_cmovznz_u32(x134, (0x0 as u32), x50);
    let mut x170: u32 = 0;
    let mut x171: fiat_bp256_scalar_u1 = 0;
    let (x170, x171) = fiat_bp256_scalar_addcarryx_u32(0x0, x126, x162);
    let mut x172: u32 = 0;
    let mut x173: fiat_bp256_scalar_u1 = 0;
    let (x172, x173) = fiat_bp256_scalar_addcarryx_u32(x171, x127, x163);
    let mut x174: u32 = 0;
    let mut x175: fiat_bp256_scalar_u1 = 0;
    let (x174, x175) = fiat_bp256_scalar_addcarryx_u32(x173, x128, x164);
    let mut x176: u32 = 0;
    let mut x177: fiat_bp256_scalar_u1 = 0;
    let (x176, x177) = fiat_bp256_scalar_addcarryx_u32(x175, x129, x165);
    let mut x178: u32 = 0;
    let mut x179: fiat_bp256_scalar_u1 = 0;
    let (x178, x179) = fiat_bp256_scalar_addcarryx_u32(x177, x130, x166);
    let mut x180: u32 = 0;
    let mut x181: fiat_bp256_scalar_u1 = 0;
    let (x180, x181) = fiat_bp256_scalar_addcarryx_u32(x179, x131, x167);
    let mut x182: u32 = 0;
    let mut x183: fiat_bp256_scalar_u1 = 0;
    let (x182, x183) = fiat_bp256_scalar_addcarryx_u32(x181, x132, x168);
    let mut x184: u32 = 0;
    let mut x185: fiat_bp256_scalar_u1 = 0;
    let (x184, x185) = fiat_bp256_scalar_addcarryx_u32(x183, x133, x169);
    let mut x186: u32 = 0;
    let mut x187: fiat_bp256_scalar_u1 = 0;
    let (x186, x187) = fiat_bp256_scalar_subborrowx_u32(0x0, x170, 0x974856a7);
    let mut x188: u32 = 0;
    let mut x189: fiat_bp256_scalar_u1 = 0;
    let (x188, x189) = fiat_bp256_scalar_subborrowx_u32(x187, x172, 0x901e0e82);
    let mut x190: u32 = 0;
    let mut x191: fiat_bp256_scalar_u1 = 0;
    let (x190, x191) = fiat_bp256_scalar_subborrowx_u32(x189, x174, 0xb561a6f7);
    let mut x192: u32 = 0;
    let mut x193: fiat_bp256_scalar_u1 = 0;
    let (x192, x193) = fiat_bp256_scalar_subborrowx_u32(x191, x176, 0x8c397aa3);
    let mut x194: u32 = 0;
    let mut x195: fiat_bp256_scalar_u1 = 0;
    let (x194, x195) = fiat_bp256_scalar_subborrowx_u32(x193, x178, 0x9d838d71);
    let mut x196: u32 = 0;
    let mut x197: fiat_bp256_scalar_u1 = 0;
    let (x196, x197) = fiat_bp256_scalar_subborrowx_u32(x195, x180, 0x3e660a90);
    let mut x198: u32 = 0;
    let mut x199: fiat_bp256_scalar_u1 = 0;
    let (x198, x199) = fiat_bp256_scalar_subborrowx_u32(x197, x182, 0xa1eea9bc);
    let mut x200: u32 = 0;
    let mut x201: fiat_bp256_scalar_u1 = 0;
    let (x200, x201) = fiat_bp256_scalar_subborrowx_u32(x199, x184, 0xa9fb57db);
    let mut x202: u32 = 0;
    let mut x203: fiat_bp256_scalar_u1 = 0;
    let (x202, x203) = fiat_bp256_scalar_subborrowx_u32(x201, (x185 as u32), (0x0 as u32));
    let mut x204: u32 = 0;
    let mut x205: fiat_bp256_scalar_u1 = 0;
    let (x204, x205) = fiat_bp256_scalar_addcarryx_u32(0x0, x6, (0x1 as u32));
    let x206: u32 = ((x144 >> 1) | ((x146 << 31) & 0xffffffff));
    let x207: u32 = ((x146 >> 1) | ((x148 << 31) & 0xffffffff));
    let x208: u32 = ((x148 >> 1) | ((x150 << 31) & 0xffffffff));
    let x209: u32 = ((x150 >> 1) | ((x152 << 31) & 0xffffffff));
    let x210: u32 = ((x152 >> 1) | ((x154 << 31) & 0xffffffff));
    let x211: u32 = ((x154 >> 1) | ((x156 << 31) & 0xffffffff));
    let x212: u32 = ((x156 >> 1) | ((x158 << 31) & 0xffffffff));
    let x213: u32 = ((x158 >> 1) | ((x160 << 31) & 0xffffffff));
    let x214: u32 = ((x160 & 0x80000000) | (x160 >> 1));
    let mut x215: u32 = 0;
    let (x215) = fiat_bp256_scalar_cmovznz_u32(x84, x67, x51);
    let mut x216: u32 = 0;
    let (x216) = fiat_bp256_scalar_cmovznz_u32(x84, x69, x53);
    let mut x217: u32 = 0;
    let (x217) = fiat_bp256_scalar_cmovznz_u32(x84, x71, x55);
    let mut x218: u32 = 0;
    let (x218) = fiat_bp256_scalar_cmovznz_u32(x84, x73, x57);
    let mut x219: u32 = 0;
    let (x219) = fiat_bp256_scalar_cmovznz_u32(x84, x75, x59);
    let mut x220: u32 = 0;
    let (x220) = fiat_bp256_scalar_cmovznz_u32(x84, x77, x61);
    let mut x221: u32 = 0;
    let (x221) = fiat_bp256_scalar_cmovznz_u32(x84, x79, x63);
    let mut x222: u32 = 0;
    let (x222) = fiat_bp256_scalar_cmovznz_u32(x84, x81, x65);
    let mut x223: u32 = 0;
    let (x223) = fiat_bp256_scalar_cmovznz_u32(x203, x186, x170);
    let mut x224: u32 = 0;
    let (x224) = fiat_bp256_scalar_cmovznz_u32(x203, x188, x172);
    let mut x225: u32 = 0;
    let (x225) = fiat_bp256_scalar_cmovznz_u32(x203, x190, x174);
    let mut x226: u32 = 0;
    let (x226) = fiat_bp256_scalar_cmovznz_u32(x203, x192, x176);
    let mut x227: u32 = 0;
    let (x227) = fiat_bp256_scalar_cmovznz_u32(x203, x194, x178);
    let mut x228: u32 = 0;
    let (x228) = fiat_bp256_scalar_cmovznz_u32(x203, x196, x180);
    let mut x229: u32 = 0;
    let (x229) = fiat_bp256_scalar_cmovznz_u32(x203, x198, x182);
    let mut x230: u32 = 0;
    let (x230) = fiat_bp256_scalar_cmovznz_u32(x203, x200, x184);
    out1 = x204;
    out2[0] = x7;
    out2[1] = x8;
    out2[2] = x9;
    out2[3] = x10;
    out2[4] = x11;
    out2[5] = x12;
    out2[6] = x13;
    out2[7] = x14;
    out2[8] = x15;
    out3[0] = x206;
    out3[1] = x207;
    out3[2] = x208;
    out3[3] = x209;
    out3[4] = x210;
    out3[5] = x211;
    out3[6] = x212;
    out3[7] = x213;
    out3[8] = x214;
    out4[0] = x215;
    out4[1] = x216;
    out4[2] = x217;
    out4[3] = x218;
    out4[4] = x219;
    out4[5] = x220;
    out4[6] = x221;
    out4[7] = x222;
    out5[0] = x223;
    out5[1] = x224;
    out5[2] = x225;
    out5[3] = x226;
    out5[4] = x227;
    out5[5] = x228;
    out5[6] = x229;
    out5[7] = x230;
    (out1, out2, out3, out4, out5)
}
#[doc = " The function fiat_bp256_scalar_divstep_precomp returns the precomputed value for Bernstein-Yang-inversion (in montgomery form)."]
#[doc = ""]
#[doc = " Postconditions:"]
#[doc = "   eval (from_montgomery out1) = ⌊(m - 1) / 2⌋^(if ⌊log2 m⌋ + 1 < 46 then ⌊(49 * (⌊log2 m⌋ + 1) + 80) / 17⌋ else ⌊(49 * (⌊log2 m⌋ + 1) + 57) / 17⌋)"]
#[doc = "   0 ≤ eval out1 < m"]
#[doc = ""]
#[doc = " Output Bounds:"]
#[doc = "   out1: [[0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff], [0x0 ~> 0xffffffff]]"]
#[inline]
pub const fn fiat_bp256_scalar_divstep_precomp() -> [u32; 8] {
    let mut out1: [u32; 8] = [0; 8];
    out1[0] = 0x12af6f78;
    out1[1] = 0xc7963fc;
    out1[2] = 0xb90facdb;
    out1[3] = 0x7a5ce3cb;
    out1[4] = 0x3917f8b8;
    out1[5] = 0x466fa370;
    out1[6] = 0x93d612ba;
    out1[7] = 0x862a9350;
    out1
}
